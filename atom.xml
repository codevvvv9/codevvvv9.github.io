<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shaolin</title>
  
  <subtitle>悟已往之不谏，知来者之可追！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codevvvv9.github.io/"/>
  <updated>2020-07-25T15:27:43.861Z</updated>
  <id>https://codevvvv9.github.io/</id>
  
  <author>
    <name>吴少林</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac-10.15的bug</title>
    <link href="https://codevvvv9.github.io/2020/07/25/mac-10-15-de-bug/"/>
    <id>https://codevvvv9.github.io/2020/07/25/mac-10-15-de-bug/</id>
    <published>2020-07-25T15:23:16.000Z</published>
    <updated>2020-07-25T15:27:43.861Z</updated>
    
    <content type="html"><![CDATA[<p>Mac系统更新到10.15大版本之后，我遇到的最常见的大bug就是：<code>npm</code>安装时经常报<code>gyp: No Xcode or CLT version detected!</code></p><p>解决方法：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">rm</span> -rf <span class="token variable"><span class="token variable">$(</span>xcode-select -print-path<span class="token variable">)</span></span>$ xcode-select --install</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac系统更新到10.15大版本之后，我遇到的最常见的大bug就是：&lt;code&gt;npm&lt;/code&gt;安装时经常报&lt;code&gt;gyp: No Xcode or CLT version detected!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;pre class=&quot;
      
    
    </summary>
    
    
      <category term="工具类的使用" scheme="https://codevvvv9.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="前端之外" scheme="https://codevvvv9.github.io/tags/%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>前端初学SpringBoot系列（三）自定义注解的学习与练习</title>
    <link href="https://codevvvv9.github.io/2020/07/25/qian-duan-chu-xue-springboot-xi-lie-san-zi-ding-yi-zhu-jie-de-xue-xi-yu-lian-xi/"/>
    <id>https://codevvvv9.github.io/2020/07/25/qian-duan-chu-xue-springboot-xi-lie-san-zi-ding-yi-zhu-jie-de-xue-xi-yu-lian-xi/</id>
    <published>2020-07-25T14:28:51.000Z</published>
    <updated>2020-07-25T14:44:58.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识注解"><a href="#初识注解" class="headerlink" title="初识注解"></a>初识注解</h2><p>前面两节学习了<code>springboot</code>的基本使用，其中大量使用了注解来减少代码量，想必大家都觉得挺奇怪的吧。</p><p>所以第三节，稍微停顿一下增删改查的脚步，补补一些基础(๑•̀ㅂ•́)و✧。</p><p>对于前端来说，注解这个概念很陌生，如此神秘的力量是如何发挥作用的呢，今天学习一下<code>java</code>中的注解：一种形如<code>@xxx</code>的东东，xxx一般是大写字母开头。</p><h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><p>注解<code>Annotation</code>是在<code>java源码</code>中对于类、方法、字段、方法参数的一种<strong>特殊注释</strong>。</p><a id="more"></a> <ul><li>是一种注释？？？</li></ul><p>之所以说它是<code>注释</code>，是因为<code>注解</code>本身并不会对代码逻辑造成任何影响，对于如何使用注解去完成对应的功能是工具或者说某些容器的事，从这一点出发，感觉挺像注释的，<strong>但是它又是很特殊的</strong></p><ul><li>特殊在哪里？？？</li></ul><p>注释不会被编译器处理，直接原样复制忽略掉了，但注解可以被编译器打包进<code>class</code>文件中，所以注解被理解为用作标注的元数据。</p><h3 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h3><p>一般来说注解分为三类：</p><ol><li>编译器默认使用的注解。</li></ol><ul><li>例如我们经常在实体类中见到的各种<code>@Overrider</code>,这个基础注解直译就是覆写。</li></ul><img src="/2020/07/25/qian-duan-chu-xue-springboot-xi-lie-san-zi-ding-yi-zhu-jie-de-xue-xi-yu-lian-xi/override.png" class="" title="This is an image"><ul><li><p><code>@SuppressWarnings</code>,告诉编译器忽略此处的警告。</p></li><li><p>特点。通过上面两个小🌰可以发现，这一类的注解编译器使用而已，对于真实的代码跑起来后并不需要，因此这一类注解的特点就是：不会被编译进<code>class</code>文件，编译后编译器就忽略掉这些代码了。</p></li></ul><ol start="2"><li><p>底层库处理时需要用到的注解，这类注解会被编译进<code>class文件中</code>，但是距离我们一线开发者很遥远，目前不需要关注。</p></li><li><p>程序运行时需要读取并产生副作用的注解，这是我们一线开发者的需要经常使用的注解。</p></li></ol><h3 id="注解有啥用"><a href="#注解有啥用" class="headerlink" title="注解有啥用"></a>注解有啥用</h3><p>有了上面的小小的基础后，我们基本可以发现，注解可以在程序运行时告诉编译器，它有一些副作用，能帮助开发者做一些工作，而且写完之后到处使用，开发者仅仅需要打一个标签就行。</p><h2 id="定义一个注解"><a href="#定义一个注解" class="headerlink" title="定义一个注解"></a>定义一个注解</h2><p>上面我们了解了注解的基本情况，大约有了点认识，接下来看一下<code>java</code>官方的定义，毕竟要整点正规军的东西。<br>官方使用<code>@interface</code> 来定义一个新的注解，基本格式大约如下：</p><pre class=" language-java"><code class="language-java">publice @<span class="token keyword">interface</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>  String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 多个参数...</span><span class="token punctuation">}</span></code></pre><h3 id="几个小约定"><a href="#几个小约定" class="headerlink" title="几个小约定"></a>几个小约定</h3><ul><li>一般来说良好的编码风格需要给注解的不同参数设定一个<code>default</code>默认值（虽然很多🐮的库也不这么干:-D）</li><li>常用的参数最好命名为<code>value</code></li><li><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3></li></ul><p>◔ ‸◔? ❓这还没理解注解，咋还冒出来个<code>元注解</code>呢，因为这个是定义注解的第一步😄<br>所谓的<code>元注解</code>就是：能够解释其他注解的注解，这样的注解我们就可以称呼它为<code>meta annotation</code>。我们自定义注解需要用到一些重要的<code>元注解</code>，下面介绍几个元注解：</p><ol><li><code>@Target</code></li></ol><p>这个注解告诉编译器我的代码在<strong>哪个位置</strong>被使用：</p><ul><li>在类或接口中被使用：注解内容为 <code>ElementType.TYPE</code></li><li>在字段中被使用：注解内容为 <code>ElementType.FIELD</code></li><li>在方法中被使用：注解内容为 <code>ElementType.METHOD</code></li><li>在构造方法中被使用：注解内容为 <code>ElementType.CONSTRUCTURE</code></li><li>在方法参数中被使用：注解内容为 <code>ElementType.PARAMETER</code></li></ul><p>一个小🌰，假如你要定义一个<code>用在方法</code>上的注解，那么就使用<code>@Target(ElementType.METHOD)</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>  String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>假如你要想定义一个注解<code>用在方法或者字段上</code>的注解，可以使用<code>@Target({ElementType.METHOD, ElementType.FIELD})</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span>  ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>  String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><code>@Retention</code><br>这个元注解<code>极其重要</code>，它定义了注解的生命周期，即自定义的注解在代码的什么阶段被使用。</li></ol><ul><li>在编译期：<code>RetentionPolicy.SOURCE</code></li><li>在class文件中：<code>RetentionPolicy.CLASS</code></li><li>在运行期：<code>RetentionPolicy.RUNTIME</code></li></ul><p>当然了，如果你一不小心忘了使用这个元注解，那么默认为<code>CLASS</code>。在我们开发中，我们自定义的注解都是<code>RUNTIME</code>的元注解。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>  String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><code>@Repeatable</code><br>这个元注解是说自定义的注解可否被重复使用。一线开发比较少用。</li><li><code>@Inherited</code><br>这个元注解是说子类可否继承父类定义的注解，但是它只能对<code>@Target(ElementType.TYPE)</code>类型的注解生效，而且只是针对<code>class</code></li></ol><p>综上所述，自定义注解时，最重要的就是必须设置<code>@Target @Retention</code>，以上一节的<code>mybatis</code>中的基础注解<code>@Select</code>为例：</p><img src="/2020/07/25/qian-duan-chu-xue-springboot-xi-lie-san-zi-ding-yi-zhu-jie-de-xue-xi-yu-lian-xi/Select.gif" class="" title="This is an image"><p>可以发现它生命周期是在<code>RUNTIME</code>，适用范围在<code>METHOD</code>上，另一个元注解就比较陌生啦。</p><p>所以啊o_O，<code>java</code>中注解千千万，以后遇到陌生注解再说，目前够用(〃’▽’〃)……</p><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><p><code>在实战中使用，在模拟中练习</code>是最好的学习方式，本节尝试手写一个自定义注解去体会体会注解的奥妙，不过再开始写<code>BUGS</code>之前，还有一些理论知识需要补充：<br>上一节<code>注解的定义</code>中解释了<code>@Retentions</code>元注解能够规定注解的三个生命周期，那个这三个生命周期要干啥呢：</p><ul><li><code>SOURCE</code>生命周期的注解编译期使用，也就是说我们只关心使用就行。</li><li><code>CLASS</code>仅在build之后中的<code>class</code>文件中存在，与我们一线开发关系也不大。</li><li><code>RUNTIME</code>是我们经常要使用并且可以充分发挥我们程序员才智的阶段。</li></ul><h3 id="一个小小的tips"><a href="#一个小小的tips" class="headerlink" title="一个小小的tips"></a>一个小小的tips</h3><p>对于前端来说，下面的知识很陌生（说得好像其他知识你不陌生一样🙂）：<br><code>java</code>中build后都是class文件，注解继承自<code>java.lang.annotation.Annotation</code>，至于如何读取注解，需要继续学习<code>反射API</code>,这就是下一节需要补充的知识了，这一节我们假装😄会用了。</p><h3 id="反射API基本操作"><a href="#反射API基本操作" class="headerlink" title="反射API基本操作"></a><code>反射API</code>基本操作</h3><p>既然我们要读取<code>Annotation</code>，一般有以下几个步骤：</p><ol><li>首先我们要先判断它存不存在。常见的判断的API如下</li></ol><ul><li><code>Class.isAnnotationPresent(Class)</code></li><li><code>Field.isAnnotationPresent(Class)</code></li><li><code>Method.isAnnotationPresent(Class)</code></li><li><code>Constructor.isAnnotationPresent(Class)</code></li><li>🌰：<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//判断@Test注解是否存在与Test中</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span></code></pre></li></ul><ol start="2"><li>存在的话，我们读取注解</li></ol><ul><li><code>Class.getAnnotation(Class)</code></li><li><code>Field.getAnnotation(Class)</code></li><li><code>Method.getAnnotation(Class)</code></li><li><code>Constructor.getAnnotation(Class)</code></li><li>🌰：<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取定义在Demo类上的@Test注解</span>Test test <span class="token operator">=</span> Demo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>String value <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//...</span></code></pre></li></ul><h3 id="练习自定义注解"><a href="#练习自定义注解" class="headerlink" title="练习自定义注解"></a>练习自定义注解</h3><p>有了上述的基础知识之后，我们开始练习一下，手写一个简单的注解，实现判断类中的字段的最大值最小值</p><ol><li>定义一个注解<code>@Range</code></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wushao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span>        ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Range</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>应用在一个类中和类中字段中</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wushao<span class="token punctuation">;</span><span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//name这个字符串长度必须在1-20之间</span>    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//city这个字符串长度最大为10，有个默认最小值0</span>    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", city='"</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String city<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>在<code>Main</code>入口函数中简单的测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wushao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"wushao"</span><span class="token punctuation">,</span> <span class="token string">"Qingdao"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Shanghai"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"gaoyuayuan"</span><span class="token punctuation">,</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Range range <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Range<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person的注解："</span> <span class="token operator">+</span> range<span class="token punctuation">)</span><span class="token punctuation">;</span>        range<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Person p <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">check</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person "</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" checked ok."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> ReflectiveOperationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person "</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" checked failed: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 类中其他方法必须使用static关键字修饰，并且抛出以下两个错误</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> ReflectiveOperationException <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//遍历person类中的所有字段</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field<span class="token operator">:</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取定义在Field中的注解`@Range`</span>            Range range <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Range<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果存在这个注解进行操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>range <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取不同Field字段的值</span>                Object value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//TODO: 核心判断逻辑</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的<code>TODO</code>中的校验函数是挺重要的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> ReflectiveOperationException <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field<span class="token operator">:</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Range range <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Range<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>range <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断字段值是否是String类型的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span>  <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String s <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> value<span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s: "</span><span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果字段的值不符合注解的最大最小值抛出一个异常，会被`Main`函数的catch🐖</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> range<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> range<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid field is: "</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>简单的执行一下，上面的demo实例发现打印如下：</p><img src="/2020/07/25/qian-duan-chu-xue-springboot-xi-lie-san-zi-ding-yi-zhu-jie-de-xue-xi-yu-lian-xi/error.png" class="" title="This is an image"><p><strong>发现在检验到<code>p2</code>这个人的时候，报错了，因为他的name为空，长度不满足注解要求的1-20之间。</strong></p><p>另外，学习过程中感谢<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a>和<a href="https://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a></p><h2 id="接下来继续填坑，学习反射是如何读取上面的注解的↖-ω-↗"><a href="#接下来继续填坑，学习反射是如何读取上面的注解的↖-ω-↗" class="headerlink" title="接下来继续填坑，学习反射是如何读取上面的注解的↖(^ω^)↗"></a>接下来继续填坑，学习反射是如何读取上面的注解的↖(^ω^)↗</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初识注解&quot;&gt;&lt;a href=&quot;#初识注解&quot; class=&quot;headerlink&quot; title=&quot;初识注解&quot;&gt;&lt;/a&gt;初识注解&lt;/h2&gt;&lt;p&gt;前面两节学习了&lt;code&gt;springboot&lt;/code&gt;的基本使用，其中大量使用了注解来减少代码量，想必大家都觉得挺奇怪的吧。&lt;/p&gt;
&lt;p&gt;所以第三节，稍微停顿一下增删改查的脚步，补补一些基础(๑•̀ㅂ•́)و✧。&lt;/p&gt;
&lt;p&gt;对于前端来说，注解这个概念很陌生，如此神秘的力量是如何发挥作用的呢，今天学习一下&lt;code&gt;java&lt;/code&gt;中的注解：一种形如&lt;code&gt;@xxx&lt;/code&gt;的东东，xxx一般是大写字母开头。&lt;/p&gt;
&lt;h3 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h3&gt;&lt;p&gt;注解&lt;code&gt;Annotation&lt;/code&gt;是在&lt;code&gt;java源码&lt;/code&gt;中对于类、方法、字段、方法参数的一种&lt;strong&gt;特殊注释&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端精进" scheme="https://codevvvv9.github.io/categories/%E5%89%8D%E7%AB%AF%E7%B2%BE%E8%BF%9B/"/>
    
    
      <category term="Java" scheme="https://codevvvv9.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>前端初学SpringBoot系列（二）使用mybatis完成数据库的查询</title>
    <link href="https://codevvvv9.github.io/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/"/>
    <id>https://codevvvv9.github.io/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/</id>
    <published>2020-07-24T15:00:35.000Z</published>
    <updated>2020-07-25T10:00:51.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识mybatis"><a href="#初识mybatis" class="headerlink" title="初识mybatis"></a>初识<code>mybatis</code></h2><p>在第一节中学习了如何初始化一个项目，并且写了一个最最最最😄简单的接口，但是项目中数据肯定是来自数据库，在传统<code>java</code>中使用<code>JDBC</code>来操作数据库，进入<code>web</code>部分后，现在主要采用<code>mybatis持久层框架</code>做SQL映射（把数据库内容映射成对象，Object Relational Mapping）来操作数据库，在<code>spring boot</code>中集成到了<code>mybatis-spring-boot-starter</code>中。<a id="more"></a><br>所以本系列教程中操作数据库时第一步在<code>pom.xml</code>先引入两个依赖:</p><h3 id="引入必备依赖"><a href="#引入必备依赖" class="headerlink" title="引入必备依赖"></a>引入必备依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="配置datasource"><a href="#配置datasource" class="headerlink" title="配置datasource"></a>配置<code>datasource</code></h3><p>有了上述的<code>starter</code>和<code>mysql驱动</code>之后，做一个小小的改变，将<code>resources/application.properties</code>文件删除。然后在此位置新建<code>application.yml</code>，然后写入数据库连接配置项：</p><pre class=" language-yml"><code class="language-yml">server:  port: 8082  servlet:    context-path: /api#####################上面三行在第一节已经解释spring:  datasource:    url: jdbc:mysql://localhost:3307/test_spring?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai    username: root    password: root    driver-class-name: com.mysql.cj.jdbc.Driver</code></pre><p>其中<code>datasource</code>各个字段含义：</p><ul><li><code>url</code>: <ul><li>含义：数据库地址</li><li>格式：<code>jdbc:mysql://数据库ip:数据库端口号/数据库名字?用户编码&amp;字符编码&amp;服务器时区</code></li></ul></li><li><code>username</code>:<ul><li>含义：数据库账户名称</li></ul></li><li><code>password</code>:<ul><li>含义：数据库账户密码</li></ul></li><li><code>driver-class-name</code>:<ul><li>含义：数据库驱动类名</li></ul></li></ul><h2 id="使用mybatis"><a href="#使用mybatis" class="headerlink" title="使用mybatis"></a>使用<code>mybatis</code></h2><p>通常来说有两种方式来使用<code>mybatis</code>:</p><ul><li>使用注解</li><li>使用<code>mapper</code><br>接下来通过基本的数据库操作-<strong>查询数据库</strong>来分别实践两种方式，然后再把<strong>增删改查</strong>四种方式都实现一遍。<h3 id="几个约定"><a href="#几个约定" class="headerlink" title="几个约定"></a>几个约定</h3>我是<code>约定大于配置</code>的拥趸，同样的，在<code>springboot</code>开发中也有一套约定，目前我觉得有两个好约定：代码结构和书写顺序：</li><li>代码结构最好是如下的组织结构：</li></ul><img src="/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/1.png" class="" title="This is an image"><p>以上代码结构也是良好的分层结构-三层<code>controller dao service</code>，其中对于<code>service</code>层通常习惯面向接口（<code>interface</code>）编程，具体的实现在<code>impl</code>中写实现类，提高了不同业务中针对同一接口的不同实现。</p><ul><li>书写顺序<br>通常在<code>web</code>开发中，按照如下的四个顺序写代码，比较快、也比较容易组织代码<h3 id="使用注解完成数据库查询"><a href="#使用注解完成数据库查询" class="headerlink" title="使用注解完成数据库查询"></a>使用注解完成数据库查询</h3></li></ul><ol><li>把数据库中要用到的表用实体类映射出来</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wushao<span class="token punctuation">.</span>springbootdemo<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span>  String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于以上的属性，直接利用<code>IDEA</code>的快捷键<code>alt+insert</code>进行<code>getter setter equals hashCode</code>的快速实现，也可以借助<code>lombok</code>的注解快速实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>面向顶层来写代码，也就是对接的前端展示层，即<code>controller层</code>，可以认为是<strong>接口层</strong>。</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">listUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getUsers"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsersByCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">listUsersByCondition</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于<code>control</code>层来说</p><ul><li>首先要打上<code>@RestController</code>的注解，告诉容器我是一个<code>restful</code>风格的api层</li><li>其次使用<code>@RequestMapping</code>注解标识接口的根路径为<code>/users</code></li><li>使用<code>@Autowired</code>自动注入<code>Service</code>层的逻辑接口。</li><li>使用<code>@GetMapping @PostMapping @PutMapping @DeleteMapping</code>四种注解完成<code>Restful</code>接口</li></ul><ol start="3"><li>在<code>service</code>中完成业务</li></ol><p>这一层是后端实现逻辑的主要<strong>业务层</strong>，通常来说，这一层的代码结构采用两层来进行细化（详见上图的目录结构）</p><ul><li>外层是接口定义</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUsersByCondition</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>内层<code>impl/</code>去实现上面的<code>interface</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserDao userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUsersByCondition</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">findUsersByCondition</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于<code>Service层</code>来说，使用<code>Spring框架</code>的注解<code>@Service</code>告诉容器我是<code>Spring的一个Bean</code></p><img src="/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/2.gif" class="" title="This is an image"><ol start="4"><li><code>service</code>中调用<code>dao</code>层相关<code>sql</code>去操作数据库</li></ol><p>最后一步重要操作是通过<code>ibatis</code>的注解<code>@Select</code>操作数据库查询数据，<code>mybatis</code>是它后来改的名字，也就是说必须先引入了<code>mybatis</code>的依赖，才能使用<code>@Select</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from test_spring.user;"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsersByCondition</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于<code>Dao层</code>来说，使用<code>Spring框架</code>的注解<code>@Repository</code>告诉容器我是<code>Spring的一个Bean</code></p><img src="/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/3.gif" class="" title="This is an image"><p>上述的两个注解可以帮助开发人员在<code>Bean类</code>与容器入口类之间直接进行跳转。</p><p><code>@Select</code>注解后面的就是<code>sql语句</code>，<code>@Select("select * from test_spring.user;")</code>, 查询<code>test_spring库的user表</code>完成查询数据库的操作。</p><img src="/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/4.png" class="" title="This is an image"><h3 id="使用mapper的方式完成模糊查询"><a href="#使用mapper的方式完成模糊查询" class="headerlink" title="使用mapper的方式完成模糊查询"></a>使用<code>mapper</code>的方式完成模糊查询</h3><p>要想使用<code>mapper</code>方式：</p><ol><li>首先需要在配置文件<code>application.yml</code>中写入<code>mapper</code>的扫描路径</li></ol><pre class=" language-yml"><code class="language-yml"># 上面的基础配置mybatis:  mapper-locations: classpath:mapper/*.xml</code></pre><ol start="2"><li>在<code>resources/mapper</code>目录下建立对应的<code>user-mapper.xml</code>，一张表一个<code>mapper</code></li></ol><pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.wushao.springbootdemo.dao.UserDao"&gt;        &lt;select id="findUsersByCondition" resultType="com.wushao.springbootdemo.entity.User" parameterType="com.wushao.springbootdemo.entity.User"&gt;--            SELECT * FROM test_spring.user WHERE name LIKE '%${name}%'               SELECT * FROM test_spring.user WHERE name LIKE "%"#{name}"%"        &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>上面的<code>xml</code>中</p><ul><li><code>mapper标签</code>的<code>namespace</code>是<code>dao层目录</code></li><li><code>select标签</code>表示这是查询数据库的操作，它的<code>id</code>是<code>dao层</code>的方法名字</li><li><code>resultType</code>是实体类的路径，也是返回结果类型</li><li><code>parameterType</code>的参数的类型，也是实体类。如果在<code>dao</code>使用下面的写法可以不用这个参数:</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    List&lt;User> findUsersByCondition(User user);</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsersByCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>对于具体的<code>sql语句</code>，有如下两种模糊查询的写法</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_spring<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%${name}%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_spring<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">"%"</span><span class="token comment" spellcheck="true">#{name}"%"</span></code></pre><img src="/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/5.gif" class="" title="This is an image"><h3 id="支持dao层和mapper之间的跳转工具"><a href="#支持dao层和mapper之间的跳转工具" class="headerlink" title="支持dao层和mapper之间的跳转工具"></a>支持<code>dao</code>层和<code>mapper</code>之间的跳转工具</h3><img src="/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/tool.png" class="" title="This is an image"><p>实现效果如下图所示：</p><img src="/2020/07/24/qian-duan-chu-xue-springboot-xi-lie-er-shi-yong-mybatis-wan-cheng-shu-ju-ku-de-cha-xun/last.gif" class="" title="This is an image"><h2 id="加下来继续完成数据的增-删-改的操作"><a href="#加下来继续完成数据的增-删-改的操作" class="headerlink" title="加下来继续完成数据的增 删 改的操作~"></a>加下来继续完成数据的增 删 改的操作<del>~</del></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初识mybatis&quot;&gt;&lt;a href=&quot;#初识mybatis&quot; class=&quot;headerlink&quot; title=&quot;初识mybatis&quot;&gt;&lt;/a&gt;初识&lt;code&gt;mybatis&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;在第一节中学习了如何初始化一个项目，并且写了一个最最最最😄简单的接口，但是项目中数据肯定是来自数据库，在传统&lt;code&gt;java&lt;/code&gt;中使用&lt;code&gt;JDBC&lt;/code&gt;来操作数据库，进入&lt;code&gt;web&lt;/code&gt;部分后，现在主要采用&lt;code&gt;mybatis持久层框架&lt;/code&gt;做SQL映射（把数据库内容映射成对象，Object Relational Mapping）来操作数据库，在&lt;code&gt;spring boot&lt;/code&gt;中集成到了&lt;code&gt;mybatis-spring-boot-starter&lt;/code&gt;中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端精进" scheme="https://codevvvv9.github.io/categories/%E5%89%8D%E7%AB%AF%E7%B2%BE%E8%BF%9B/"/>
    
    
      <category term="Java" scheme="https://codevvvv9.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>前端初学SpringBoot系列（一）初始化项目以及引入swagger2</title>
    <link href="https://codevvvv9.github.io/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/"/>
    <id>https://codevvvv9.github.io/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/</id>
    <published>2020-07-02T15:42:49.000Z</published>
    <updated>2020-07-06T15:39:20.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化SpringBoot项目"><a href="#初始化SpringBoot项目" class="headerlink" title="初始化SpringBoot项目"></a>初始化SpringBoot项目</h2><p>这是前端初学SpringBoot系列的第一节，学习如何初始化一个空项目进行后续开发。目前有两种方式进行初始化：</p><ol><li>去官网<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a>直接按照下图进行初始化，相关配置项具体内容可查看文档，SpringBoot只要不选择SNAPSHOT即可。<img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/init1.jpg" class="" title="This is an image"></li><li>直接通过<strong>IDEA</strong>进行初始化<img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/init.png" class="" title="This is an image"></li><li>初始化后的目录结构如下图所示：<img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/codeStructure.png" class="" title="This is an image"></li></ol><ul><li>核心java文件在<code>src/main/java</code>内部。<a id="more"></a></li><li>应用的配置资源以及后续的<code>mapper</code>目录在<code>src/main/resources</code>中。其中<code>application.yml</code>或者<code>application.properties</code>中是应用的配置项：<pre class=" language-yml"><code class="language-yml">#服务的端口号server.port=8082#服务的根目录server.servlet.context-path=/api</code></pre>至此，项目已经可以通过启动类<code>SpringbootDemoApplication</code>然后<code>run</code>，项目会通过内置的<code>tomcat</code>服务器起来，<code>spring</code>就是做的这么友好。<img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/projectStart.png" class="" title="This is an image">其中应用的启动类用了基础注解<code>@SpringBootApplication</code>，注解是SpringBoot项目中特别灵活好用的方式，使用了<code>java</code>的反射。</li></ul><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/SpringbootDemoApplication.png" class="" title="This is an image"><h3 id="编写基础接口测试"><a href="#编写基础接口测试" class="headerlink" title="编写基础接口测试"></a>编写基础接口测试</h3><p>对于前端来说还是喜欢在浏览器上看到直观的现象，目前只能在控制台看到不报错而已，并不是很形象，所以接下来编写一个最基础的接口来体会一下。</p><ul><li><p>写一个测试类做接口</p><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/testDemo.png" class="" title="This is an image"><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/testDemo1.png" class="" title="This is an image"><p>这是一个最简单的接口，通过使用两个注解<code>@RestController @RequestMapping</code>完成<code>Resultful</code>风格的接口。<br>其中<code>@RequestMapping</code>接收多个参数,常见的有以下四个参数：</p></li></ul><ol><li><code>value</code>代表请求的URL</li><li><code>method</code>代表请求的方法，具体内容详见上图的智能提示，如果不写的话，默认就是<code>GET</code></li><li><code>params</code>表示请求参数</li><li><code>heads</code>请求头的映射条件<br>以上注解可以<code>@GetMapping</code>替换<img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/GetMapping.png" class="" title="This is an image">此时访问浏览器的接口，会看到响应内容：</li></ol><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/hello.png" class="" title="This is an image"><p>以上是基础的接口编写过程，实际中场景比以上复杂多变，但是目前迅速的体验一个接口还是可以的。</p><h2 id="使用Swagger2展示接口"><a href="#使用Swagger2展示接口" class="headerlink" title="使用Swagger2展示接口"></a>使用Swagger2展示接口</h2><p>对于以<code>java</code>为服务端语言的<code>web项目</code>来说，前后端联调接口最常用的就是<code>Swagger</code>，接下来学习引入<code>Swagger2</code>，并展示接口内容。</p><h3 id="安装Swagger2依赖"><a href="#安装Swagger2依赖" class="headerlink" title="安装Swagger2依赖"></a>安装<code>Swagger2</code>依赖</h3><p>在<code>pom.xml</code>中为<code>&lt;dependecies&gt;&lt;/dependecies&gt;</code>增加子依赖，相关配置内容为</p><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/swagger2-01.png" class="" title="This is an image"><p>当增加新的配置后，选择<code>Enable Auto-Import</code>即可。</p><p>依赖安装完毕之后，书写<code>Swagger2的配置</code></p><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/swagger2Config.png" class="" title="This is an image"><h3 id="书写Swagger2配置"><a href="#书写Swagger2配置" class="headerlink" title="书写Swagger2配置"></a>书写<code>Swagger2</code>配置</h3><p>使用两个注解<code>@Configuration @Bean</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wushao<span class="token punctuation">.</span>springbootdemo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//各种import...</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2Config</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"api文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"测试Swagger2的api文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.wushao.springbootdemo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上就是<code>Swagger2</code>的基础配置项，最后关键一步是让启动类识别<code>Swagger</code></p><h3 id="启动类增加新注解-EnableSwagger2"><a href="#启动类增加新注解-EnableSwagger2" class="headerlink" title="启动类增加新注解@EnableSwagger2"></a>启动类增加新注解<code>@EnableSwagger2</code></h3><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/EnableSwagger2.png" class="" title="This is an image"><p>至此，基础的<code>Swagger2</code>完成，可以与前端进行基(hu)础(you)联(ni)调(nen)，😄</p><img src="/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/end.png" class="" title="This is an image"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始化SpringBoot项目&quot;&gt;&lt;a href=&quot;#初始化SpringBoot项目&quot; class=&quot;headerlink&quot; title=&quot;初始化SpringBoot项目&quot;&gt;&lt;/a&gt;初始化SpringBoot项目&lt;/h2&gt;&lt;p&gt;这是前端初学SpringBoot系列的第一节，学习如何初始化一个空项目进行后续开发。目前有两种方式进行初始化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去官网&lt;a href=&quot;https://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://start.spring.io/&lt;/a&gt;直接按照下图进行初始化，相关配置项具体内容可查看文档，SpringBoot只要不选择SNAPSHOT即可。&lt;img src=&quot;/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/init1.jpg&quot; class=&quot;&quot; title=&quot;This is an image&quot;&gt;&lt;/li&gt;
&lt;li&gt;直接通过&lt;strong&gt;IDEA&lt;/strong&gt;进行初始化&lt;img src=&quot;/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/init.png&quot; class=&quot;&quot; title=&quot;This is an image&quot;&gt;&lt;/li&gt;
&lt;li&gt;初始化后的目录结构如下图所示：&lt;img src=&quot;/2020/07/02/qian-duan-chu-xue-springboot-xi-lie-yi-chu-shi-hua-xiang-mu-yi-ji-yin-ru-swagger2/codeStructure.png&quot; class=&quot;&quot; title=&quot;This is an image&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;核心java文件在&lt;code&gt;src/main/java&lt;/code&gt;内部。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端精进" scheme="https://codevvvv9.github.io/categories/%E5%89%8D%E7%AB%AF%E7%B2%BE%E8%BF%9B/"/>
    
    
      <category term="Java" scheme="https://codevvvv9.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>函数声明和变量声明重名</title>
    <link href="https://codevvvv9.github.io/2020/04/16/han-shu-sheng-ming-he-bian-liang-sheng-ming-chong-ming/"/>
    <id>https://codevvvv9.github.io/2020/04/16/han-shu-sheng-ming-he-bian-liang-sheng-ming-chong-ming/</id>
    <published>2020-04-16T15:10:40.000Z</published>
    <updated>2020-04-22T13:26:40.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>这篇文章源于几道面试题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//demo 01</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  test <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">{</span>  test00 <span class="token operator">=</span> <span class="token number">123</span>  <span class="token keyword">function</span> <span class="token function">test00</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test00"</span><span class="token punctuation">,</span> test00<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// demo 02</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> test01 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test01"</span><span class="token punctuation">,</span> test01<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// demo 03</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> test02 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> test02 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test02"</span><span class="token punctuation">,</span> test02<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// demo 04</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  test03 <span class="token operator">=</span> <span class="token number">123</span>  <span class="token keyword">function</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test03"</span><span class="token punctuation">,</span> test03<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// demo 05</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  test04 <span class="token operator">=</span> <span class="token number">123</span>  <span class="token keyword">function</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  test04 <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test04"</span><span class="token punctuation">,</span> test04<span class="token punctuation">)</span></code></pre><a id="more"></a><p>以上是第一道面试题，打印的结果把我打印懵逼了都，虽然现实中没人这样写奇葩的代码，但是不好意思，最传统的极度灵活的js需要这种面试题😡</p><p>就此引进了函数声明和变量声明、独特的声明提升Hositing、块级作用域、默认变量（即没有用<code>let const var</code>等关键字就初始化的变量）。</p><h2 id="函数声明、变量声明、js作用域入门"><a href="#函数声明、变量声明、js作用域入门" class="headerlink" title="函数声明、变量声明、js作用域入门"></a>函数声明、变量声明、js作用域入门</h2><p>在<code>ES6之前</code>，变量声明有且只有两种方式，<code>var</code> 和 <code>function开头的函数声明</code>，而且没有块级作用域的概念，只有函数作用域和全局作用域。</p><p>作为一个严谨的程序员，我们应该秉持变量先声明再使用的顺序，但是早期<code>js</code>过于动态的特点导致了很多奇奇怪怪的面试题，我们既要去其糟粕，取其精华，也要追本溯源，了解那些黑暗的故事。</p><h3 id="不声明会怎样"><a href="#不声明会怎样" class="headerlink" title="不声明会怎样"></a>不声明会怎样</h3><p>先看最基础的变量声明：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a</span></code></pre><p>以上是最基本的测试，结果对于任何一个前端来说，闭着眼睛都能答对。</p><p>说明<code>js</code>变量可以声明提升</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//等价于</span><span class="token keyword">var</span> a console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p> 而且此时的<code>a</code>变量也被挂载到了顶级对象<code>window</code>中，也就是说此时的全局变量和顶级对象耦合很紧密。</p><p>我们看看函数声明和变量声明一起使用会发生什么：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>可以发现，函数声明有单独的作用域，里面的同名变量<code>a</code>只能在局部作用域中使用，函数声明之外的位置不能访问，函数体内的变量声明会被提升到当前局部作用域的顶部，但是只有声明提升，<strong>赋值语句保持原位置</strong></p><p>即：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  a <span class="token operator">=</span> <span class="token number">10</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>那么问题来了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>  a <span class="token operator">=</span> <span class="token number">10</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>以上函数体内没有变量声明，只有<code>a = 10</code>，打印时按照怎么个顺序去获得a的值呢，答案在<em>作用域链和默认变量</em></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>对于</p><h3 id="默认变量是什么"><a href="#默认变量是什么" class="headerlink" title="默认变量是什么"></a>默认变量是什么</h3><h3 id="作用域解析的四大金刚"><a href="#作用域解析的四大金刚" class="headerlink" title="作用域解析的四大金刚"></a>作用域解析的四大金刚</h3><h2 id="全新的块级作用域"><a href="#全新的块级作用域" class="headerlink" title="全新的块级作用域"></a>全新的块级作用域</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h3><h3 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h3><h3 id="块作用域能进行函数声明吗"><a href="#块作用域能进行函数声明吗" class="headerlink" title="块作用域能进行函数声明吗"></a>块作用域能进行函数声明吗</h3><h3 id="顶层对象与全局变量解耦"><a href="#顶层对象与全局变量解耦" class="headerlink" title="顶层对象与全局变量解耦"></a>顶层对象与全局变量解耦</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;这篇文章源于几道面试题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;//demo 01
{
  function test() {}
  test = 123
}
console.log(&quot;test&quot;, test)
{
  test00 = 123
  function test00() { }
}
console.log(&quot;test00&quot;, test00)
// demo 02
{
  function test01() {

  }
  var test01 = 123
}
console.log(&quot;test01&quot;, test01)

// demo 03
{
  var test02 = function () {}
  var test02 = 123
}
console.log(&quot;test02&quot;, test02)
// demo 04
{
  function test03() {}
  test03 = 123
  function test03() {}
}
console.log(&quot;test03&quot;, test03)
// demo 05
{
  function test04() {}
  test04 = 123
  function test04() {}
  test04 = 234
}
console.log(&quot;test04&quot;, test04)&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="我不知道的JS" scheme="https://codevvvv9.github.io/categories/%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS/"/>
    
    
      <category term="JavaScript" scheme="https://codevvvv9.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>灰度化图片小工具</title>
    <link href="https://codevvvv9.github.io/2020/04/04/hui-du-hua-tu-pian-xiao-gong-ju/"/>
    <id>https://codevvvv9.github.io/2020/04/04/hui-du-hua-tu-pian-xiao-gong-ju/</id>
    <published>2020-04-04T03:29:18.000Z</published>
    <updated>2020-04-07T11:43:46.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gray-image"><a href="#gray-image" class="headerlink" title="gray-image"></a>gray-image</h1><p>简易的灰度化图片的工具 <a id="more"></a></p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>今天对于全国同胞来说是个庄严肃穆的日子，是纪念在抗击新冠疫情牺牲的烈士与广大同胞的纪念日，也是中国的四大传统节日「清明节」。</p><p>自古以来，清明节就是我们用来纪念先人，缅怀祖先的，20 年这个不平静的年份又赋予了它更伟大的意义。</p><p>人类的情感需要寄托，烧纸、扫墓都是与故人交流的方式，国家层面今日降半旗缅怀英烈，对于互联网人员来说，将网页灰度化也是必备的致敬方式之一。</p><p>正好，编程群里面大家发了各种灰度化主页的方案，最简单的是采用<strong><em>css</em></strong></p><pre class=" language-css"><code class="language-css"><span class="token selector">body,html </span><span class="token punctuation">{</span>  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种方案统一的采用 css 方案，我受到其他一个<a href="http://daijiangtao.name/gray-image/?nsukey=UhKFqU8vcWFGYfhMxXkISdYsMzjq6S1HFvVLEQxs%2B%2F7iRNZpJY56vTEZDKZ91VSmJqWcXipmp0DBntQcwW5lSc1A1A27cxHXE1B792ZHPy7vy2nSqLiLxD4C5ltEFW5qb%2BHwnGKDKeTe%2BT9Uq7kI%2FkNNm6X8AMWAvyxVwEiVNCIvka2Vq%2FkJLGltfWTq4tHluN4FI%2BbbvqYjgajtmAgWiQ%3D%3D" target="_blank" rel="noopener">小伙伴</a>用<code>js</code>操作<code>canvas</code>的思路的启发，模仿着他的思路把 demo 又重新写了一遍，再次梳理一下这种方案的原理，代码都是基础代码，大同小异，就是很多细节平常不用<code>canvas</code>不会去注意这些细节，再次感谢这个小伙伴乐于分享它的demo，大家可以多关注他的<a href="http://daijiangtao.name" target="_blank" rel="noopener">博客</a>。</p><p>接下来我只是分享我从它的demo里面学到的知识，与一些自己的心得。</p><h2 id="具体的实现"><a href="#具体的实现" class="headerlink" title="具体的实现"></a>具体的实现</h2><p>主要采用<code>input</code>元素与<code>canvas</code>操作。</p><h3 id="input-type-file"><a href="#input-type-file" class="headerlink" title="input[type=file]"></a>input[type=file]</h3><p>主体<code>html</code>很简单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jpeg,.png,jpg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectImage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选择需要灰度化的图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>采用 button 的点击去调用 input 的点击事件</p><pre class=" language-javascript"><code class="language-javascript">selectImage<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  input<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当选择完要灰度化的图片之后，进入<code>callback</code>回调</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> input<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到图片项</span>  <span class="token keyword">const</span> imgName <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建file blob</span>  reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">*</span>_file<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>​    <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    image<span class="token punctuation">.</span>src <span class="token operator">=</span> _file<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>​    image<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>​      <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token function">gray</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最核心的算法，后续着重分析</span>​      a<span class="token punctuation">.</span>download <span class="token operator">=</span> imgName<span class="token punctuation">;</span>​      a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"downloadGrayImage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      <span class="token comment" spellcheck="true">// 防止重复添加</span>​      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"downloadGrayImage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>​        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>​      <span class="token punctuation">}</span>​      a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到此为止，都是基础的<code>js</code>操作本地文件上传，并用<code>a</code>标签模拟点击下载的功能。</p><p>接下来重点使用<code>canvas</code>操作以及基础的灰度算法。</p><h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas" target="_blank" rel="noopener">Canvas API</a>主要用来构建<code>2D</code>图像，基本属性只有<code>width</code> <code>height</code>,然后使用<code>HTMLCanvasElement.getContext()</code>获得上下文来进行绘制。</p><hr><p>使用<code>canvas</code>的主要目的是：可以来获得图像的<code>像素数据</code>以及最后处理成渲染图像<code>所必备的源</code>。</p><hr><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">gray</span><span class="token punctuation">(</span><span class="token operator">*</span>imgObj<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> width <span class="token operator">=</span> imgObj<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token keyword">const</span> height <span class="token operator">=</span> imgObj<span class="token punctuation">.</span>height<span class="token punctuation">;</span>  <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>​    <span class="token keyword">const</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>​    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>​    context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>imgObj<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//画一个图</span>​    <span class="token comment" spellcheck="true">// 获得隐含区域的像素数据, 返回ImageData 对象，其中的data属性包含了所需的数据</span>​    <span class="token keyword">const</span> imageData <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token keyword">let</span> pixelData <span class="token operator">=</span> imageData<span class="token punctuation">.</span>data<span class="token punctuation">;</span>​    <span class="token comment" spellcheck="true">//重点来了，逐行遍历上述的像素数组</span>​    <span class="token comment" spellcheck="true">//多行代码在下面核心代码分析...</span>​    <span class="token comment" spellcheck="true">// 将重新赋值的像素点重新归位到context中</span>​    context<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> imageData<span class="token punctuation">.</span>width<span class="token punctuation">,</span> imageData<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token comment" spellcheck="true">// 能变成图片的最重要的一步</span>​    <span class="token keyword">return</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把当前构造的canvas对象变成img可使用的uri</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>​    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"抱歉，你的浏览器不支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="平均像素值灰度化算法"><a href="#平均像素值灰度化算法" class="headerlink" title="平均像素值灰度化算法"></a>平均像素值灰度化算法</h3><p>这个是灰度化最简单、最易操作的算法。核心原理就是把每个像素的值取均值。</p><pre><code>//伪代码everyPixel = (pixelR + pixelG + pixelB) / 3</code></pre><p>对于像我一样的没有啥科班知识，并且图像学知识极度匮乏的人来说，先来补一补图像的入门知识。</p><ul><li>像素个数与宽高的关系</li></ul><p>对于一幅图像我们常说<code>720*480</code>的图像，说的是宽720个像素，高480个像素，每个像素有<strong><em>四个值</em></strong>构成，分别是<code>R G B A</code>,具体代表红 绿 蓝 三原色和透明度。</p><ul><li><p>像素数据从哪来就显得很关键了。上述的例子我们使用<code>context.getImageData(0, 0, width, height);</code>可以得到一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData" target="_blank" rel="noopener">ImageData</a>,这是一个极其重要的接口，它包含了图像的所有像素数据，只不过有了这个数据，到目前为止似乎与颜色仍然没有关系，我们仍然无法直接操作。</p></li><li><p>如何操作上述的像素呢？<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData/data" target="_blank" rel="noopener">ImageData.data</a>是一个只读属性，返回所有像素值转换成的第一步说的四个值后的一维<code>TypedArray</code>数组，按照像素点顺序铺开的数组，更具体的来说是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray" target="_blank" rel="noopener">Uint8ClampedArray</a>,不过不需要再深入了。</p></li></ul><p>至此，准备知识结束，对于一幅<code>720*480</code>的图像，我们最终会转换成一个<code>720*480*4=1382400</code>长度的数组，操作数组对于程序员来说就很容易了。</p><hr><p>我们完成了一幅具象的图像到抽象的数组的<code>转变</code>。</p><hr><ul><li>核心的算法</li></ul><p>最基础的写法其实就是双重遍历，外层循环先逐行从上至下按照高度遍历，内层循环再逐列从左至右按照宽度遍历。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//重点来了，逐行遍历上述的像素数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>​    <span class="token keyword">const</span> i <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> width <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得每个像素值的四个点位的值，最核心</span>​    <span class="token keyword">const</span> avgPixel <span class="token operator">=</span> <span class="token punctuation">(</span>pixelData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> pixelData<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> pixelData<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最简单的平均值算法</span>​    <span class="token comment" spellcheck="true">// 使用平均化的像素点去重新赋值RGB三个值</span>​    pixelData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> avgPixel<span class="token punctuation">;</span>​    pixelData<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> avgPixel<span class="token punctuation">;</span>​    pixelData<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> avgPixel<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的双层遍历很容易看懂，就是中间的那句<code>const i = h * 4 * width + w * 4;</code>让我思索了一会，我下面画个草图便于理解这句话。</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/4/17145d028bb2ca4d?w=1921&amp;h=886&amp;f=jpeg&amp;s=72766" alt="分析"></p><p>上面的示例图是一个4*4的图</p><ul><li><p>其中第一行的第一个像素点<code>0</code>由四个值构成{0, 1, 2, 3},第二个像素点由四个值构成{4, 5, 6, 7}，以此类推。上述的公式是首先要确定一个基准点，目前基准点选取的是左边开始的第一个值，也就是<code>R</code>值，也就是红色的值的<code>index</code></p></li><li><p>先看公式的第一部分<code>h * 4 * width</code>代表的是每一行的左起点的值的index，那么第几行就是h,走几列数据就是<code>4*width</code>。</p></li><li><p>公式的第二部分是本行的基准点每次移动的步长，很明显是<code>w*4</code>。</p></li><li><p>确定了起始点计算方法后，后续的<code>G</code> <code>B</code> 的<code>index</code>只需要依次累加即可。</p></li></ul><hr><p>至此，把一幅图像用最简单的平均值像素法灰度化的方案就完成了，大家可以手打一遍试试，挺好玩的，也就花费3-4个小时，做一个小demo，看似简单其实知识点也不少的。</p><p>关于其他的5种灰度算法可以参考<a href="https://github.com/aooy/blog/issues/4" target="_blank" rel="noopener">这篇博客</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;gray-image&quot;&gt;&lt;a href=&quot;#gray-image&quot; class=&quot;headerlink&quot; title=&quot;gray-image&quot;&gt;&lt;/a&gt;gray-image&lt;/h1&gt;&lt;p&gt;简易的灰度化图片的工具&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端精进" scheme="https://codevvvv9.github.io/categories/%E5%89%8D%E7%AB%AF%E7%B2%BE%E8%BF%9B/"/>
    
    
      <category term="JavaScript" scheme="https://codevvvv9.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>第一季度理财总结</title>
    <link href="https://codevvvv9.github.io/2020/03/26/di-yi-ji-du-li-cai-zong-jie/"/>
    <id>https://codevvvv9.github.io/2020/03/26/di-yi-ji-du-li-cai-zong-jie/</id>
    <published>2020-03-26T03:38:02.000Z</published>
    <updated>2020-03-26T03:46:46.876Z</updated>
    
    <content type="html"><![CDATA[<p>今天想就前段时间主要是20年第一季度的理财进行一下小总结，这一季度也是我自19年理财以来最大的损失，这种里程碑式事件极具教育意义，同样理财也可以看成人生某些特质的缩影，能让人变得更好或者更坏。</p><p>心理体验来说主要总结为以下三个方面: <a id="more"></a></p><h2 id="更加辩证的看待鸡蛋🙅放在同一个篮子的理论"><a href="#更加辩证的看待鸡蛋🙅放在同一个篮子的理论" class="headerlink" title="更加辩证的看待鸡蛋🙅放在同一个篮子的理论"></a>更加辩证的看待鸡蛋🙅放在同一个篮子的理论</h2><p>鸡蛋不放到同一个篮子的理论固然可靠，确实会分散风险，同样跌的情况，会稍微跌的没有那么狠，但是也加大了管理的难度，分配仓位变得很微妙，同样的当市场上涨时，过于分散的仓位对收益的拉升变得没有那么可观，挺考验心理素质的，在市场急转直下时易割肉减仓甚至清仓。</p><p>在进入风险大的混合和股票型时，权衡期望收益率和可承受的跌幅时，时间是最重要的因素了，包括进场时机、分批加仓时机、持有时长，当然最重要的是反人性的分批次的减仓时机。所有的操作核心都在分批的批上，应该几层几层的加，应该几层几层的减，还要修炼很久，平常操作指数还挺好，在大风险面前还是心态太浮躁，见利就忘😤。</p><h2 id="太低估贪婪的实力"><a href="#太低估贪婪的实力" class="headerlink" title="太低估贪婪的实力"></a>太低估贪婪的实力</h2><p>人性太难战胜了。只能提高心性，压制本性的弱点，能压制一点就能多赚一点，人生的修为也会提升一点，不是大能，只能如此。必须设置强制措施，进了赌场，没有人想空手离开，人人都想口袋鼓鼓的，资本市场，把人类贪婪的特性甚至说是潜力，发掘的无比深入，远远超出我们自己对自己控制欲望的能力，钱💰 这个东西，当变成了抽象的数字，极易上头，和游戏打怪升级蹦出的金币数一样。后期一定要修炼把满足感尽量延迟，可以贪婪，但要理性压制住感性，每一步操作给出自己理性的判断，即使错了，也可以复盘哪里能够改进，不能感性操作完了，后面赔了完全不知道当时做了什么，只是损失了金钱而没有任何技巧提升，无异于浪费时间，而且工作这些年越发觉得金钱市场的理解对于人生的境界的提高相当重要。市场运作，操纵现金流远比其他技术啥啥的看似实际的东西更为重要。男人的成熟一定要把控好对于金钱的利用，做一个屡败屡战的理性韭菜，终有一日会产生质变，不求对经济客观规律有多么高深的见解，在随波逐流的市场中，能稳住本心，这未来的日子就是收获。</p><h2 id="靡不有初鲜克有终"><a href="#靡不有初鲜克有终" class="headerlink" title="靡不有初鲜克有终"></a>靡不有初鲜克有终</h2><p>古人的这句话每次读都会有新的收获，很多场景我都遇到这个情况，开始的都很美丽，结束的又很狼狈，感情啊，求学生涯啊都是如此，幸好每次失败我都有所感悟，对于人生无常也有了很多自己的见地，在这奔着三十而立的路上，虽然风景不多，却也心中对于所求所爱渐渐明朗起来。回到投资理财这个话题上，这一个月来，赔的最狠的几次，现在翻看复盘记录，都是本来自己制定好了良好的计划，结果和别人聊天、看一些大牛的记录，草率的没有经过内在理解、消化就跟盘了，比如本应该轻仓1层观望后续，实际操作中看了大牛的分析，脑子一热，三层上去了，导致重仓的速度快了很多，后续操作空间完全锁死，除非干等或者挪用备用金，总之都是错过了其中一些合理、低风险的机会。</p><p>以后对于这种别人的分析，可以看，但是拿过来以后，一定要用自己的脑子剖析内在操作逻辑，可能会错、可能看不懂，但是多一分思考，脑子多一分活力，错有错的理由。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想就前段时间主要是20年第一季度的理财进行一下小总结，这一季度也是我自19年理财以来最大的损失，这种里程碑式事件极具教育意义，同样理财也可以看成人生某些特质的缩影，能让人变得更好或者更坏。&lt;/p&gt;
&lt;p&gt;心理体验来说主要总结为以下三个方面:&lt;/p&gt;
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="前端之外" scheme="https://codevvvv9.github.io/tags/%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>致优柔寡断的自己</title>
    <link href="https://codevvvv9.github.io/2020/03/24/zhi-you-rou-gua-duan-de-zi-ji/"/>
    <id>https://codevvvv9.github.io/2020/03/24/zhi-you-rou-gua-duan-de-zi-ji/</id>
    <published>2020-03-24T12:41:10.000Z</published>
    <updated>2020-07-25T14:59:44.419Z</updated>
    
    <content type="html"><![CDATA[<p>受疫情的影响，从2月9号回京以来，一直在家里进行远程办公，虽然也享受到了国外流行的远程办公的福利，但是时间久了却有渐渐发现一些问题，其中主要就是时间太充足了，利用率上明显不高。</p><p>在接近两个月的远程里，沟通成本极其的大，从19年12月接手500以来的细微的小情绪慢慢的爆发开来，3月初更是一度让我萌生了一些不好的想法。<a id="more"></a></p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>终于，今天我大学最铁的哥们老丨，要结婚了，我万万没想到他会是宿舍第二个结婚的，还挺快也挺突然的，加上上午工作也不多，我回头去看过往毕业的这些日子，毫无疑问，老丨是发展最好的，他在上海，我在北京。对于他的发展，我打心底里感到高兴，做了最擅长的工作，从事着前景远大的行业，谈吐、着装、为人处世都更上一层楼了。而我细细想来，却发现自15年我们本科毕业以来，似乎除了转行成功这一件事之外，其它关于人生、关于生活、关于很多很多，都没有质的变化，诚然，我也变了不少了，但是我向来以结果论来评判一些事情，今天一天我好好又复盘了一下来京的这些日子。</p><p>15年-18年7月，读研的这些就不谈了。我只想复盘一下，18年7月16入职以来，我的心理变化。</p><h2 id="跌跌撞撞"><a href="#跌跌撞撞" class="headerlink" title="跌跌撞撞"></a>跌跌撞撞</h2><p>作为一个27岁转行的大龄男青年，其实我本身是很焦虑的，碰了很多壁，学习过程中，太急躁，无经验+基础不牢固，让我丢失了很多本应得到的机会，“我本应该”，这几个字其中的各种心酸真的是无奈。</p><p>入职了这家公司后，大公司嘛，制度比较健全，知道我没经验，给我一个月学习<code>vue</code>，这一点我很感谢，之于这家公司，我对他的感情犹如初恋一般。</p><p>8月中旬开始慢慢进入项目，一开始一个页面对接口就要好久，现在回想起来，如果是互联网公司的话，怕是要加班加到12点才能行，所幸公司节奏属于中高速，并没有催得特别急，一步步的我都克服掉了新手的问题，步入了正轨。说实话，这段时间确实成长挺快的，自己本身闲暇之余也有很高的热情去研究新的技术，到了19年3月，事情变得有些微妙了，正如我一开始说的那样，我有大龄转行者共有的很深的焦虑感，半年间我在工作里，竟然没有一样拿得出手的漂亮的谈资，完成的都是些分内之事，没有闪光点。转眼间犹豫着、彷徨着就到了19年下半年了，如果说是一个刚毕业的小鲜肉，我觉得完全没问题可以接受，可毕竟我顶着研究生的名头来从事这个行业，是想做出点事情的，我自身肯定是有一种奇怪的弱点或者说缺点在严重制约着我。一年有余，环境因素固然有所影响，可时间对于每个人来说都是一样的，我取得的这样的成绩明显浪费了一些时间。</p><p>很高兴，20年3月24日的上午，老丨的结婚给我提了很大的醒，让我在奔三的道路上，又开始重新反思我过往的2年经历，古语有云，“三十而立”，我至今仍未找到这个“立”的点，我虽然知道应该立的是：独立的人格、坚守住自己的本心、明辨什么东西是该追逐的、真正的真善美，以上的边界点在哪，我仍在探寻。</p><p>我觉得老丨虽然也不一定完全找到，但是同龄的他明显在路途的前方，他的沪漂我觉得挺有价值的。</p><p>这一路北漂跌跌撞撞也就到而立之年了。</p><h2 id="灵魂拷问"><a href="#灵魂拷问" class="headerlink" title="灵魂拷问"></a>灵魂拷问</h2><p>分析了一通，那制约我的到底是什么呢，我自己分析和结合老丨曾经对我的评价，目前来说，较大的问题也可以说性格的弱点之一就是：优柔寡断。</p><p>它可以带来很多副作用，包括但不限于：关键时刻不自信（时常自我怀疑，错失大好机会）、拖延症（浪费时间的根源）。也可能是我天生的生性多疑、过度敏感导致的优柔寡断，总之这是一个恶性循环。</p><ol><li>因为想太多，会瞻前顾后，迟迟得不到行动，没有结果反馈，恐惧某种未知的结局导致自我否定，自信心受到打击，刺激自己不再果断的处理事情，伴随着不同程度的拖延症。</li><li>同时以上的恶性循环也会带来我性格的偏激性，有时会一意孤行，太固执，唯一的好处就是：硬着头皮转行成功了。</li></ol><p>通过我查阅资料，目前觉得有以下三种种解决方案比较具有可实施性。</p><h3 id="不要去想象没有发生的事情，不要用“万一…-会怎么怎么样”"><a href="#不要去想象没有发生的事情，不要用“万一…-会怎么怎么样”" class="headerlink" title="不要去想象没有发生的事情，不要用“万一…,会怎么怎么样”"></a>不要去想象没有发生的事情，不要用“万一…,会怎么怎么样”</h3><p>秉持着活在当下的生活态度，对于生活、职业，更重要的是对于感情。</p><ul><li>物来顺应。事情发生了，我们就去积极地去应对，相反的未发生的事情无须去多想。</li><li>未来不迎。不是不考虑未来的事情，要做到未雨绸缪，而不是杞人忧天，未来的事没必要过分焦虑。</li><li>当时不杂。把手头的事情专一的处理好，就行。</li><li>既过不恋。过去的事不要浪费时间再纠结。</li></ul><p>以上是曾国藩的方式，理解起来没有难度，需要设身处地的用心去感悟与体会其中的妙处。</p><h3 id="为什么会犹豫不决"><a href="#为什么会犹豫不决" class="headerlink" title="为什么会犹豫不决"></a>为什么会犹豫不决</h3><p>这个问题，深究来说，可能会与从小的原生家庭教育有关，就不展开讨论了，我仔细分析了一下，确实有关，母亲的过分严格的棍棒教育与挫折教育会潜移默化的影响孩子的，再在后天某些环境的发酵下，导致了做事不果断，瞻前顾后，犹豫不决。</p><p>网上说的比较好的有以下几个原因：</p><ol><li>信息不足不足以决策。我觉得合理，这种原因就要去积极地搜寻信息，改变条件不足的情况。</li><li>解题方法不对。合理，比如处理某个事情采取了一个错误的办法，必然南辕北辙。</li><li>纠结在与目标不想干的问题上。这个极为合理，通常发生在生活中，比如丢了什么东西一直懊悔、本来应该只买衣服，最后买了一堆其他东西。</li><li>存在解题障碍。合理，人是一种情感动物，会受到内心隐藏的情绪的影响。例如，会害怕丢脸而羞于问别人问题，导致迟迟获取不到及时解决问题的核心信息，为了避免尴尬不敢说出自己的想法不敢大声说话与演讲。</li></ol><h3 id="可以相信直觉"><a href="#可以相信直觉" class="headerlink" title="可以相信直觉"></a>可以相信直觉</h3><ol><li>明确作出的每个决定的合理预期。先问自己想要什么，会得到什么结果，就行了，其他的任其发展。</li><li>需要哪些依据能够支撑我做出决定。现有的知识与经验能帮到什么，如果目前的经验不够，迅速百科或者问人，靠外界力量，补充后迅速行动，继续前进，不能一直卡在某一步。</li><li>世界上没有完美的事，通过自己的努力解决了一些问题后，剩下的就交给直觉与时间去验证，成了就是成了，没成就总结经验教训，人生的每一步都不是浪费。</li></ol><p>还有最重要的一点，犹豫不决的不敢做一件事情可能是因为：自己没有强烈的想完成这件事的意愿。</p><blockquote><p>要想翻过一面墙，可以先把帽子扔过墙</p></blockquote><p>2020.0324 夜，晚安~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;受疫情的影响，从2月9号回京以来，一直在家里进行远程办公，虽然也享受到了国外流行的远程办公的福利，但是时间久了却有渐渐发现一些问题，其中主要就是时间太充足了，利用率上明显不高。&lt;/p&gt;
&lt;p&gt;在接近两个月的远程里，沟通成本极其的大，从19年12月接手500以来的细微的小情绪慢慢的爆发开来，3月初更是一度让我萌生了一些不好的想法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="think" scheme="https://codevvvv9.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>go变量和数据类型</title>
    <link href="https://codevvvv9.github.io/2019/07/28/go-bian-liang-he-shu-ju-lei-xing/"/>
    <id>https://codevvvv9.github.io/2019/07/28/go-bian-liang-he-shu-ju-lei-xing/</id>
    <published>2019-07-28T11:06:53.000Z</published>
    <updated>2020-03-26T03:48:09.638Z</updated>
    
    <content type="html"><![CDATA[<p>这部分学习go的基础语法，变量的使用以及基本数据类型</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>三部曲</p><ol><li>声明变量</li><li>赋值</li><li>使用该变量<a id="more"></a></li></ol><h3 id="go中声明变量的三种基本形式"><a href="#go中声明变量的三种基本形式" class="headerlink" title="go中声明变量的三种基本形式"></a>go中声明变量的三种基本形式</h3><ul><li>单变量的写法</li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//1、基本声明方式</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 声明一个变量i,数据类型为int，默认值会被赋值为0</span><span class="token comment" spellcheck="true">//2、声明与赋值写到一起，会通过类型推导</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// i的数据类型会被动态判断出来是int</span><span class="token comment" spellcheck="true">//3、go独特的写法, 省略var,采用冒号的写法</span>i <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">//这种写法等同于 var i int </span><span class="token comment" spellcheck="true">//i=10</span></code></pre><ul><li>多变量的写法</li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 1、三个相同数据类型的变量</span><span class="token keyword">var</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3 <span class="token builtin">int</span> <span class="token comment" spellcheck="true">//2、多个不同数据类型的变量</span><span class="token keyword">var</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token number">10.2</span> <span class="token comment" spellcheck="true">//类型推导</span><span class="token comment" spellcheck="true">//3、同样使用冒号写法</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3 <span class="token operator">:=</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span></code></pre><p><strong>注意：一旦省略了var，采用了类型推导，必须赋值，不能使用默认值了</strong></p><ul><li>全局变量 的写法</li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 在函数之外的变量被称为全局变量</span><span class="token keyword">var</span> <span class="token punctuation">(</span>  n1 <span class="token operator">=</span> <span class="token string">"string"</span>  n2 <span class="token operator">=</span> <span class="token number">10</span>  n3 <span class="token operator">=</span> <span class="token number">10.2</span><span class="token punctuation">)</span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>同大多数语言一样，分为基本数据类型和复杂数据类型(也叫派生数据类型)</p><ul><li>基本数据类型：<code>bool</code> <code>string</code> <code>int</code> <code>rune</code> <code>byte</code> <code>float32</code> <code>float64</code> <code>complex64</code> <code>complex128</code>。<code>byte</code>也可以认为是<code>uint8</code>,<code>rune</code>等同于<code>int32</code></li><li>复杂数据类型： <code>function</code>  <code>map</code> <code>array</code> <code>Pointer</code> 等多种 </li></ul><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>go的数值类型还是比较多的，比<code>js</code>复杂多了，而且要注意不同<strong>数值类型精度的问题</strong>。</p><ol><li><code>int</code>类型在不同位数电脑上范围不同，32位电脑是8字节，64位电脑是16字节。有符号。还有<code>int8 int16 int32 int64</code></li><li><code>unit</code>无符号，还包括<code>uint8 uint16 uint32 uint64</code></li><li>有时候判断某个变量到底是什么数据类型不能直接判断出，例如<code>var n = 10</code>，<code>n</code>到底是什么类型，看不出来，可以采取以下的办法：<code>fmt.Println("n is %T", n)</code>，就是打印一下<code>n</code>的type</li><li>有时候需要判断一下某个变量占用的字节数，可以使用<code>fmt.Println("n is %d", unsafe.Sizeof(n))</code></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分学习go的基础语法，变量的使用以及基本数据类型&lt;/p&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;三部曲&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明变量&lt;/li&gt;
&lt;li&gt;赋值&lt;/li&gt;
&lt;li&gt;使用该变量&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://codevvvv9.github.io/categories/golang/"/>
    
    
      <category term="go" scheme="https://codevvvv9.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go入门</title>
    <link href="https://codevvvv9.github.io/2019/07/27/go-ru-men/"/>
    <id>https://codevvvv9.github.io/2019/07/27/go-ru-men/</id>
    <published>2019-07-27T15:16:52.000Z</published>
    <updated>2020-03-26T03:48:07.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go的几个特点"><a href="#go的几个特点" class="headerlink" title="go的几个特点"></a>go的几个特点</h2><p>可以粗略的认为go = c + python</p><ol><li>从C语言中继承了很多理念，尤其是指针的运用</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testPtr</span><span class="token punctuation">(</span>num <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>引入包的概念，用于组织程序结构。单独的go文件必须存在于package中</p></li><li><p>垃圾回收制度，内存自动回收。</p></li><li><p>语言层面天然支持高并发<br>使用了<code>goroutine</code>的语法，轻量级线程，高效利用多核</p></li><li><p>吸收了管道通信机制，有管道的写法，<code>channel</code>的写法，通过管道实现不同goroute之间的相互通信。</p></li><li><p>支持一些新的语法，例如切片（slice）和 延迟请求defer</p></li><li><p>函数支持多个返回值 <a id="more"></a></p></li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">:=</span> num1 <span class="token operator">+</span> num2  sub <span class="token operator">:=</span> num1 <span class="token operator">+</span> num2  <span class="token keyword">return</span> sum<span class="token punctuation">,</span> sub<span class="token punctuation">}</span></code></pre><h2 id="常见的go命令"><a href="#常见的go命令" class="headerlink" title="常见的go命令"></a>常见的go命令</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> run test<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token comment" spellcheck="true">// 执行go文件，相当于 先编译生成可执行文件后接着执行它</span><span class="token keyword">go</span> build test<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token comment" spellcheck="true">//编译生成可执行文件</span><span class="token comment" spellcheck="true">//注意：windows平台生成exe,但是mac就是一个test,无后缀，使用方式./test即可</span></code></pre><p>两者的三个主要区别：</p><ol><li>go bulid编译后生成的可执行文件，可以直接拿到同平台下但是没有go开发环境的机器下运行。</li><li>go run不会编译生成可执行文件，不能在没有go开发环境下的其它机器上运行。</li><li>.go的源文件虽然很小，但是编译后会将源代码所依赖的库文件编译进来，导致生成的可执行文件很大。</li></ol><p>关于编译的几个参数：</p><ol><li>编译时可以改变生成的可执行文件的名字<br><code>go build -o hello-new hello.go</code> 可执行文件就会叫hello-new</li></ol><h2 id="在VSCode下搭建开发环境"><a href="#在VSCode下搭建开发环境" class="headerlink" title="在VSCode下搭建开发环境"></a>在<code>VSCode</code>下搭建开发环境</h2><ol><li>毫无疑问，第一步去官网下载 <code>GO</code>的安装包，Q内需要使用<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">镜像</a>.</li><li>配置<code>path</code>，即GOROOT变量的位置，代表的是安装go的路径。</li></ol><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 在.bash_profile中配置</span>export PATH<span class="token operator">=</span>$PATH<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>bin<span class="token comment" spellcheck="true">//新版本的go只需要配置这一个就行，GOPATH会有默认值 </span><span class="token comment" spellcheck="true">// go env可以查看所有的开发变量的配置</span></code></pre><ol start="3"><li>在<code>VSCode</code>中安装相关插件，创建.go文件后，会提示你安装<code>Go</code>基础插件，但是其他<code>go</code>依赖的官方包由于Q内网络环境需要单独下载，详见第四步。</li><li>在<code>GOPATH</code>目录的src下（一般默认是/Users/yourMacName/go/src）</li></ol><pre class=" language-go"><code class="language-go">cd <span class="token operator">/</span>Users<span class="token operator">/</span>yourMacName<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>srcmkdir golang<span class="token punctuation">.</span>orgcd golang<span class="token punctuation">.</span>orgmkdir xcd xgit clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>tools<span class="token punctuation">.</span>git toolsgit clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>lint<span class="token punctuation">.</span>git</code></pre><p>然后通过在Vscode中<code>command+shift+p</code></p><p><img src="http://ww1.sinaimg.cn/large/006wk7J2ly1g5fdpulf9tj312k0bmq4g.jpg" alt="输入go:install"></p><p>接下来会提示有17个可以安装的依赖包(不同版本数量可能不一样，不一定你的也是17个)，全部勾选，点击<code>OK</code></p><p><img src="http://ww1.sinaimg.cn/large/006wk7J2ly1g5fdux3t36j31ek0z6470.jpg" alt="17个依赖包"></p><p>在<code>VScode</code>的output会发现正在安装(当然上述的过程可能也会失败几次，不一定17个依赖全部一次性<code>Succeed</code>但是只要golang.org/x里面的安装安装对了，这一部就是看网络了，总会安装成功，运气不好的话多安装几次)</p><p><img src="http://ww1.sinaimg.cn/large/006wk7J2ly1g5fdwzjigtj315m0r6tdr.jpg" alt="安装所有的依赖包"></p><p>👌，You’re readey to GO :）.</p><h2 id="go的注意事项"><a href="#go的注意事项" class="headerlink" title="go的注意事项"></a>go的注意事项</h2><ol><li>毫无疑问，后缀只能是go，入口文件必须是main()，严格区分大小写。</li><li>凡是定义过的变量、引入的包必须在原文件中被使用，否则编译不通过。</li><li>逐行写代码，不要两行写到一块，因为编译器会自动在末尾加分号。</li><li>左大括号禁止换行。</li><li>main函数必须存在package main中，而且不能重复定义，也就是一个package中只能有一个main函数。</li><li>go的转义符(escape char)，<code>\r</code>回车的意思是，替换掉本行开头的字符，例如 小明出去吃饭了\r小刚，最终打印结果是： 小刚出去吃饭了</li><li>如果一行字符实在太长了，可以使用<code>,</code>来进行换行，效果等同于<code>+</code></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;go的几个特点&quot;&gt;&lt;a href=&quot;#go的几个特点&quot; class=&quot;headerlink&quot; title=&quot;go的几个特点&quot;&gt;&lt;/a&gt;go的几个特点&lt;/h2&gt;&lt;p&gt;可以粗略的认为go = c + python&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从C语言中继承了很多理念，尤其是指针的运用&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;func testPtr(num *int) {
  *num = 20
}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;引入包的概念，用于组织程序结构。单独的go文件必须存在于package中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垃圾回收制度，内存自动回收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语言层面天然支持高并发&lt;br&gt;使用了&lt;code&gt;goroutine&lt;/code&gt;的语法，轻量级线程，高效利用多核&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;吸收了管道通信机制，有管道的写法，&lt;code&gt;channel&lt;/code&gt;的写法，通过管道实现不同goroute之间的相互通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持一些新的语法，例如切片（slice）和 延迟请求defer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数支持多个返回值&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://codevvvv9.github.io/categories/golang/"/>
    
    
      <category term="go" scheme="https://codevvvv9.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>工作小结-2</title>
    <link href="https://codevvvv9.github.io/2019/07/22/gong-zuo-xiao-jie-2/"/>
    <id>https://codevvvv9.github.io/2019/07/22/gong-zuo-xiao-jie-2/</id>
    <published>2019-07-22T13:35:00.000Z</published>
    <updated>2019-07-22T15:31:28.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="promise兼容IE11"><a href="#promise兼容IE11" class="headerlink" title="promise兼容IE11"></a>promise兼容IE11</h3><p>最近我开发的公司的竞赛网站被发现在IE11下排行榜无数据，但是在其他浏览器没问题，我然后打开控制台一看，发现了如下错误：</p><p><img src="http://ww1.sinaimg.cn/large/006wk7J2ly1g58ycfeu0uj311x091q37.jpg" alt="Promise未定义"></p><p>真是醉了，然后发现有三个可行的方案：<a id="more"></a></p><ul><li>直接采用<code>polyfill</code></li></ul><pre class=" language-javascript"><code class="language-javascript">在index<span class="token punctuation">.</span>html中<span class="token operator">&lt;</span>script src <span class="token operator">=</span> <span class="token string">"https://cdn.polyfill.io/v2/polyfill.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> 或 <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src <span class="token operator">=</span><span class="token string">"https://cdn.polyfill.io/v2/polyfill.min.js?features=es6"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>手写<code>js</code>脚本判断一下</li></ul><pre><code>&lt;script type="text/javascript"&gt;        function isIE() {                if (!!window.ActiveXObject || "ActiveXObject" in window) {                    return true;            } else {                return false;        }    }if (isIE()) {    var script = document.createElement('script');    script.type = 'text/javaScript';     script.src = 'js/bluebird.min.js';  // bluebird 文件地址     // http://cdn.jsdelivr.net/bluebird/3.5.0/bluebird.min.js    document.getElementsByTagName('head')[0].appendChild(script);}&lt;/script&gt;</code></pre><ul><li>安装新的依赖</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span>、npm install <span class="token operator">--</span>save babel<span class="token operator">-</span>polyfill<span class="token number">2</span>、在main<span class="token punctuation">.</span>js文件的顶部引入 <span class="token keyword">import</span> <span class="token string">"babel-polyfill"</span><span class="token number">3</span>、在build目录下webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js文件设置入口改为如下（如果你的项目用的是脚手架，在在build目录下webpack<span class="token punctuation">.</span>base<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js文件更改入口）model<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>entry<span class="token punctuation">:</span><span class="token punctuation">{</span>                app： <span class="token punctuation">[</span><span class="token string">"babel-polyfill"</span><span class="token punctuation">,</span><span class="token string">'./src/main.js'</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span></code></pre><h3 id="Vue提倡的单项数据流"><a href="#Vue提倡的单项数据流" class="headerlink" title="Vue提倡的单项数据流"></a><code>Vue</code>提倡的单项数据流</h3><p>在写<code>vue</code>组件的过程中，经常会遇到这样的情形：子组件需要的参数以<code>props</code>属性里面的<code>prop</code>来获得，父组件通过具名的<code>prop</code>来把子组件需要的内容传递给子组件，而且<code>Vue</code>提倡数据流的方向只能由父组件流向子组件。当父组件的数据发生变化时去通知子组件更改相应的属性，而不能反过来，子组件的变化影响到父组件，这种行为是被禁止的，因为这样会导致数据混乱不易于定位错误。</p><p>虽然经常写着写着子组件就想图省事，子组件直接去改变父组件的状态了，但是会报错如下：</p><p><img src="http://ws1.sinaimg.cn/large/006wk7J2ly1g58yf2sba8j31gg08ddg8.jpg" alt="Props只允许父组件传递给子组件"></p><p>那么，子组件为了更改父组件的状态，<code>Vue</code>提供了两种常见的解决办法：</p><ul><li>通过<code>data</code>中的变量将需要的<code>prop</code>初始化</li></ul><pre class=" language-vue"><code class="language-vue">props: ['initialCounter'],data: function () {  return {    counter: this.initialCounter  }}</code></pre><ul><li>使用需要处理的<code>prop</code>来定义一个计算属性<code>computed</code></li></ul><pre class=" language-vue"><code class="language-vue">props: ['size'],computed: {  normalizedSize: function () {    return this.size.trim().toLowerCase()  }}</code></pre><p>当然子组件要想和父组件去进行通信，也可以简单的采用如下方式</p><ul><li><code>$emit</code>触发事件，父组件接受子组件发布的事件，然后就顺理成章的在父组件里面修改自身的变量了。</li></ul><h3 id="关于node中的module-exports、exports和ES6中的-export、export-default"><a href="#关于node中的module-exports、exports和ES6中的-export、export-default" class="headerlink" title="关于node中的module.exports、exports和ES6中的 export、export default"></a>关于node中的<code>module.exports</code>、<code>exports</code>和ES6中的 <code>export</code>、<code>export default</code></h3><p><code>node</code>中，每个文件都被视为一个独立的模块，对外只暴露一个接口(其实就是一个对象)：<code>module.exports</code></p><p><code>module</code>代表当前模块，它的<code>exports</code>属性负责与外界进行交流，加载一个外来的模块就是加载该模块的<code>module.exports</code>属性的内容。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// add.js</span><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> addNumber <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>temp <span class="token operator">=</span> temp<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>addNumber <span class="token operator">=</span> addNumber<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 另一个js文件引用了add.js</span><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./add.js'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'add is'</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// add is { temp: 1, addNumber: [Function: addNumber] }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>temp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">addNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>通常为了方便，每个<code>node</code>模块头部有默认的一句话：<code>var exports = module.exports</code></p><p>为了方便可以直接在<code>exports</code>对象上加方法，也可以实现对外的改变，但是不可以将<code>exports</code>变量指向其它变量，一旦这样做了会切断<code>exports</code>和<code>module.exports</code>之间的联系。</p><p>但是，<code>node</code>采用了<code>CommonJs</code>规范，<code>ES6</code>采用新规范<code>import</code>和<code>export</code> (对应于<code>require</code>和<code>exports</code>)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ES6 example.js</span><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token string">'temp'</span><span class="token keyword">export</span> <span class="token punctuation">{</span>temp<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//同样的，export出来的只是一个接口，必须有大括号，除非使用下面介绍的export default</span><span class="token comment" spellcheck="true">//export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。通俗来讲，不能使固定的值，应该是一个变量或者一个函数</span><span class="token comment" spellcheck="true">// use example</span><span class="token keyword">import</span> <span class="token punctuation">{</span>example<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./example.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>temp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'temp'</span><span class="token comment" spellcheck="true">// 同样的，ES6也有默认的export写法</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token string">'new'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;promise兼容IE11&quot;&gt;&lt;a href=&quot;#promise兼容IE11&quot; class=&quot;headerlink&quot; title=&quot;promise兼容IE11&quot;&gt;&lt;/a&gt;promise兼容IE11&lt;/h3&gt;&lt;p&gt;最近我开发的公司的竞赛网站被发现在IE11下排行榜无数据，但是在其他浏览器没问题，我然后打开控制台一看，发现了如下错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006wk7J2ly1g58ycfeu0uj311x091q37.jpg&quot; alt=&quot;Promise未定义&quot;&gt;&lt;/p&gt;
&lt;p&gt;真是醉了，然后发现有三个可行的方案：&lt;/p&gt;
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="think" scheme="https://codevvvv9.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>移动端-响应式布局初涉</title>
    <link href="https://codevvvv9.github.io/2019/06/08/yi-dong-duan-xiang-ying-shi-bu-ju-chu-she/"/>
    <id>https://codevvvv9.github.io/2019/06/08/yi-dong-duan-xiang-ying-shi-bu-ju-chu-she/</id>
    <published>2019-06-08T07:39:12.000Z</published>
    <updated>2020-07-25T15:00:39.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="响应式布局五个基本点"><a href="#响应式布局五个基本点" class="headerlink" title="响应式布局五个基本点"></a>响应式布局五个基本点</h2><ol><li>媒体查询</li><li>移动端对应的设计图</li><li>隐藏某些在PC端需要的元素</li><li>添加<code>meta</code>标签</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="5"><li>交互方式与PC端不同，没有<code>hover</code>、滑动效果、滚动条、resize。替代的是<code>touch</code>和使用两点坐标来模拟滑动效果。<a id="more"></a></li></ol><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>通常响应式布局有几个尺寸，320px（small）、375px（medium）、425px(large)、768px、1024px、1440px、2560px</p><h3 id="使用style标签进行查询"><a href="#使用style标签进行查询" class="headerlink" title="使用style标签进行查询"></a>使用style标签进行查询</h3><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">body </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 321px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">body </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 376px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 425px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">body </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 426px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">body </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 769px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">body </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h3 id="使用link标签加载所需的尺寸的css"><a href="#使用link标签加载所需的尺寸的css" class="headerlink" title="使用link标签加载所需的尺寸的css"></a>使用<code>link</code>标签加载所需的尺寸的<code>css</code></h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./medium.css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 321px) and (max-width: 375px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>上述标签的意思就是：只有在屏幕尺寸在321px-375px之间的时候<code>medium.css</code>才会生效</p><h3 id="移动端单独的设计图"><a href="#移动端单独的设计图" class="headerlink" title="移动端单独的设计图"></a>移动端单独的设计图</h3><p>要想做移动端的适配，设计图必须单独给一份。</p><h3 id="隐藏某些元素"><a href="#隐藏某些元素" class="headerlink" title="隐藏某些元素"></a>隐藏某些元素</h3><p>手机的屏幕较PC端小，所以容纳的可视区域必然小，例如导航栏在PC端时可以完全显示，但是移动端只能显示一个按钮，不能完整的显示。</p><h3 id="手机端不同于PC端的操作"><a href="#手机端不同于PC端的操作" class="headerlink" title="手机端不同于PC端的操作"></a>手机端不同于PC端的操作</h3><p>手机端明显没有<code>hover</code>效果，采用<code>click</code>来模拟</p><pre class=" language-html"><code class="language-html">// html部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>导航1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>导航2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>导航3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>导航4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>导航5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>// css部分.nav {display: none}.nav.active {display: block}//js部分menu.onclick = function() {    nav.classList.toggle('active')}</code></pre><p>上述代码中<code>classList</code>具有<code>toggle</code>方法，如果有某个类名就去掉，没有这个类名就加上。</p><p><code>js</code>代码不应该去控制样式，应该只改变状态而已，样式改变交给<code>css</code>去控制。</p><h3 id="viewport的作用"><a href="#viewport的作用" class="headerlink" title="viewport的作用"></a><code>viewport</code>的作用</h3><p>传统的移动端开发时会进行缩放，以国内主流的尺寸<code>980px</code>来进行缩放，如果不加<code>viewport</code>标签，可以通过以下方式来查看屏幕的宽度。</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">clientWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 980px</span></code></pre><h3 id="一些经常忘的小知识"><a href="#一些经常忘的小知识" class="headerlink" title="一些经常忘的小知识"></a>一些经常忘的小知识</h3><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>// 某个元素绝对定位了，位置是相对于它的某个<span class="token property">position</span><span class="token punctuation">:</span> relative的父元素</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;响应式布局五个基本点&quot;&gt;&lt;a href=&quot;#响应式布局五个基本点&quot; class=&quot;headerlink&quot; title=&quot;响应式布局五个基本点&quot;&gt;&lt;/a&gt;响应式布局五个基本点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;媒体查询&lt;/li&gt;
&lt;li&gt;移动端对应的设计图&lt;/li&gt;
&lt;li&gt;隐藏某些在PC端需要的元素&lt;/li&gt;
&lt;li&gt;添加&lt;code&gt;meta&lt;/code&gt;标签&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;交互方式与PC端不同，没有&lt;code&gt;hover&lt;/code&gt;、滑动效果、滚动条、resize。替代的是&lt;code&gt;touch&lt;/code&gt;和使用两点坐标来模拟滑动效果。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Web基础" scheme="https://codevvvv9.github.io/categories/Web%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="CSS" scheme="https://codevvvv9.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>编程思想杂谈</title>
    <link href="https://codevvvv9.github.io/2019/01/09/bian-cheng-si-xiang-za-tan/"/>
    <id>https://codevvvv9.github.io/2019/01/09/bian-cheng-si-xiang-za-tan/</id>
    <published>2019-01-09T15:53:35.000Z</published>
    <updated>2019-04-04T15:50:05.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>面向对象是老生常谈的一个话题了。</li><li>可以自定义数据类型，工具类、实体类、将代码细节进行封装，易于编程。</li></ul><h2 id="用函数来编程"><a href="#用函数来编程" class="headerlink" title="用函数来编程"></a>用函数来编程</h2><ul><li>首先参数一定要验证</li><li>把逻辑实现，并拆分代码</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>单例</li><li>适配器</li><li>IOC</li><li>工程模式</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;面向对象是老生常谈的一个话题了。&lt;/li&gt;
&lt;li&gt;可以自定义数据类型，工具类、实体类、将代码细节进行封装，易于
      
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="前端之外" scheme="https://codevvvv9.github.io/tags/%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>一个理想主义者的独白</title>
    <link href="https://codevvvv9.github.io/2018/12/31/yi-ge-li-xiang-zhu-yi-zhe-de-du-bai/"/>
    <id>https://codevvvv9.github.io/2018/12/31/yi-ge-li-xiang-zhu-yi-zhe-de-du-bai/</id>
    <published>2018-12-31T12:28:44.000Z</published>
    <updated>2020-03-26T03:49:06.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是最好的时代，也是最差的时代。</p></blockquote><h2 id="为什么是2018"><a href="#为什么是2018" class="headerlink" title="为什么是2018"></a>为什么是2018</h2><p>从来没写过年终总结，好像还挺遗憾的，活的不明不白的，一年就没了。</p><p>正如<code>鸡汤文化</code>宣扬的那样，这可是8120年了啊，10年前已经不是1998，而是2008年了。人们总是过分的相信自己的记忆，忽略了时间的力量，<code>事如春梦了无痕，苟不记之笔墨，未免有辜彼苍之厚</code>。</p><p>那么，这种仪式感的东西就从<strong>2018年12月31日</strong>开始吧。</p><p>暂且从以下几个方面给2018一个交代吧：</p><ul><li>毕业</li><li>就业</li><li>健身</li><li>不安分的思想</li><li>2019年展望 <a id="more"></a></li></ul><h2 id="终于毕业了"><a href="#终于毕业了" class="headerlink" title="终于毕业了"></a>终于毕业了</h2><p>读研后，发现论文真难写，读了一些交通论文后，彷徨过很多个夜晚，有些事情适合闭上眼睛慢慢咀嚼，那是不可与别人言说的经历。</p><p>慢慢的我开始明白确实不是写论文的料，条条框框的有束缚性的文章真是看着就痛苦，早早断了写论文这条道路。开始摸索自己到底该干啥，适合做什么这些都是小插曲了，每个人都应该有过这种类似的迷惘的经历，只不过大家都选择了同一个方式去面对——默默承受，表面看起来都是平静如水，内心早已汹涌澎湃，每天仍然看似没心没肺的玩乐，转变的阵痛就这么一点点过去了。</p><p>2018年关乎毕业论文，好担心过不了盲审，论文进展特别慢。开年的那几个月可以用一句话来总结——做尽此生荒唐事。</p><p>那几个月就是憋了一篇毕业论文，担惊受怕中也算是蓝袍加身了。</p><p>这一部分经历最值得我回忆的是有几个好舍友，做的饭很好吃，可以发发牢骚，而他又很会安慰人的那种；自诩智能交通实验室的师弟师妹们，晚上集体翘了老张去看<code>头号玩家</code>，回来恶补<code>闪灵</code>，看<code>昆池岩</code>，一起吹牛、吐槽……</p><p>我所焦虑的事本身没有任何价值，反而会阻碍迈向未来的脚步，能够让我走向未来的，是坚定的信心、直面现实的勇气和直面未来的行动。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul><li>我是谁</li><li>我从哪里来</li><li>我要到哪去</li></ul><p>经典的哲学三问，我倒是能回答相近的问题——我到底该干啥，3-5年内，不谈时间期限的人都是耍流氓。</p><p>关于我为什么选了现在这条路，那就是另一个故事了。故事很曲折，不过结果是好的。</p><ul><li>找工作通用的模板是：<ol><li>我喜欢，不需要理由。</li><li>我不喜欢，但是钱给的多。</li><li>我不喜欢，钱也给的不多，但是真的轻松。</li></ol></li></ul><p>通常情况会走第二条，但是我推荐第四条路，曲径通幽——行业外试错，去尝试，去尝试，还是去尝试。</p><blockquote><p>没有一条通往远方的路，不充满误解与委屈。</p><p>​                                                                                          —— 致敬拉钩招聘</p></blockquote><p>知道什么是自己想要的，知道该用什么方式实现梦想，我曾经焦虑的问题也有了答案。我不知道命运会把我带到何方，但是我一直会用坚持去呵护好不容易找到的东西。</p><p>这个时代一直在贩卖焦虑，幸好我是个理想主义者。</p><ul><li>找到了珍贵的东西，宁愿像个傻逼一样去守护。</li></ul><h3 id="进京"><a href="#进京" class="headerlink" title="进京"></a>进京</h3><p>确定要做<code>程序员</code>之后，从北京、上海、杭州、南京四个城市中我选择了帝都作为职业生涯的第一站，是一炮而红还是折戟沉沙，都已经没有退路，因为我豪赌了7年光阴，愿赌不服输。</p><blockquote><p>如果你有梦想，就要去捍卫它。那些一事无成的人想告诉你你也成不了大器。</p></blockquote><p>人生啊，它有时像一个孩子，我慢慢学会哄他，让他开心，让他知道世界不是只有黑白，也有赤橙黄绿青蓝紫，也有由我定义的乱七八糟的颜色，经历过一些事情才会成长，那些经历一定会包括好的坏的，遇到坏的时候，或许会收获更多，很多事情在一帆风顺的时候，永远发觉不了。</p><ul><li>这半年，<code>ofo</code>黄了，锤子被打回锤子的原型。吸了比以前多的雾霾、挤了比以前人多的地铁。认识了几个工作、生活中的朋友，让北漂这个词变得有点温暖。</li><li>学到了很多以前没见到的知识，知道有些工作是要那么做的，代码是要那么写的。<ul><li>每天总有新的收获，工作里没有遇到五彩斑斓的黑、也没有遇到根据手机壳改变主题颜色的需求，团队氛围极好，提升了很多东西，我知道这些气质会潜移默化的影响我，现在更多的是退居到幕后。</li><li>原来现在前后台的交互是只通过接口来交流，原来还有叫<code>restful</code>的思想支配着<code>web</code>开发。</li><li>编程的思想很重要。框架会过时、语言会被时代淘汰，但是思想永存，不断的敲代码是要慢慢体会背后的思想，要做平凡的思考者，停下来思考。</li><li>不再执着于系统化学习的思维方式。我一直接受的教育是从0-1，系统的掌握来龙去脉，入门的、基础的、进阶的、高级的，但是对于高度抽象的计算机科学来说，这种思维方式有时会耽误很长时间，这个抽象的概念没搞明白，却又引入了另一个抽象概念来解释，最后都忘记了自己想研究哪个知识了。先把工作快速完成，有时间再去研究，但是该补的基础一点不能省，选择了这个未知的领域，探索的痛苦必须自己去承受。</li><li>正在使用的技术必须精通，要做目前承担工作的专家，也要发现缺陷和不足！</li><li>抽时间去学习那些未来主流、逐渐被市场认可的技术。</li><li>不要停止学习新知识。保持视野的开阔，不能闭门造车，了解之后多思考，哪怕有一点点的感悟。</li></ul></li><li>事情不是二元的，不是非对即错的。我以前虽然知道，但不承认，经历过一些事情之后，体会越发的强烈。包容比固执已见更合适而已。</li></ul><h2 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h2><p>上了岁数，熬夜多了越发的体会到了身体的重要性，作为家庭的支撑，不好好对自己的身体负责，有再多的价值也体现不出来，此处应该有<code>鸡汤</code></p><blockquote><p>世界上最大的不公平是每个的起点不同，但是最大的公平是每个人的终点也不同。</p></blockquote><p>很喜欢<code>keep</code>的广告词，<em>如果没有信仰，就将运动当做信仰</em>。</p><p>对于运动来说，坚持显得尤为重要。以前我也觉得要抽时间锻炼身体好难啊，终于有一天腰酸背痛、屁股疼，我开始郑重的对待这个话题，让运动融进生活。</p><ul><li>每天哪怕再晚，只要抽出10分钟做一组<code>keep</code>就好，时间不用太多，免得让我产生花太多时间给健身的负罪感。</li><li>一周不用每天都练。不要强度太大，让自己产生压力，反而成了一种负担。一周4-7练即可，找个本子记下来最好了。</li><li>找到一种运动，它可以给你自信，让你思考，让你乐观。这件事如果用心去做，效果奇佳，其实不论什么事情，用心去做，结果都不会太差，而对于我来说，这个运动就是<strong>跑步</strong></li></ul><h3 id="关于跑步"><a href="#关于跑步" class="headerlink" title="关于跑步"></a>关于跑步</h3><p>跑步这项运动，是一项古老的运动，奔跑是人类的本能。</p><p>感谢第二次搬家，让我在北京可以愉快的跑步，最开始我是在门口的清河边跑步，直到那个仿佛宿命般的那个夜晚，我突破了我自己。</p><p>那个夜晚正如朱自清先生描述的的<code>月光如流水一般，静静的泻在这一片叶子与花上。薄薄的清雾浮起在荷塘里面。</code>，我定下了每周至少长跑10公里的计划，后来长跑便去了奥森公园开启了长跑之旅，短跑仍在门前的清河边，还是很喜欢那条河，像极了<code>荷塘月色</code>，<code>塘中的月色并不均匀，但光与影有着和谐的旋律，如梵婀玲上奏着的名曲</code>，夜晚静静的听着河水缓缓的流动，感觉棒极了。</p><p>长跑时间很长，这也给了我思考的时间，慢慢的改造了我的一些思维。</p><ul><li>不要急于求成。这个毛病是我一直以来的问题，包括我在寻找就业方向的失败经历，都是惨痛的。循序渐进的提高跑量，不要长时间没有跑了，一下子就上强度，很容易受伤不说，还让我产生一种这运动很累，没有任何美感。于是我改进了以前的跑步策略，在慢慢的跑步，跑到心情通畅时、身体状态完美时开始提速，去享受长跑，享受带来的乐趣，缓解一天的劳累。</li><li>保持自己的节奏。其实这条和上一条本质差不多，但是这一条带有一点<code>宠辱不惊</code>的色彩，我跑步时被后来者超过，总是不服的，急于把它超过，打乱自己的节奏，会变得很累，而如果保持自己的节奏，状态极好时主动地取决调节节奏，再去超越。</li><li>坚持跑步。不坚持的理由有很多很多，但是坚持的理由就只有一个，<code>喂，你喜欢跑步吗，去跑步吧</code>。坚持做点什么，平凡的生活，可能会不一样吧。</li><li>跑步的提高很多时候并不来源于跑步自身。我停留在6公里处好久，跑多了膝盖会酸，我知道继续单纯的跑步会伤害。这个时候跑步跑步这件事情本身已经不能再提高我的里程了。我查阅资料，开始强化核心力量，核心改造，突破了10公里，可以稳固的在这区间跑步。我联想到其他方面，当这件事情本身已经不能提高的时候，或许是其他方面的突破才能刺激这件事情。<code>它山之石可以攻玉</code>。</li></ul><p>要做自由的风，快乐的奔跑～</p><h2 id="不安分的思想"><a href="#不安分的思想" class="headerlink" title="不安分的思想"></a>不安分的思想</h2><p>这一年又把之前看的小说刷了几遍，依然热血澎湃，引人遐想，会情不自禁的笑，也会回想起以前自己稚嫩的小说。</p><p>不管怎么样吧，这些奇思妙想我还是想让他们活下去，让灵感留住，给2019年留下一个巨大的任务～</p><h2 id="2019的展望"><a href="#2019的展望" class="headerlink" title="2019的展望"></a>2019的展望</h2><ul><li>工作继续精益求精。深入自己涉及的领域，实践未来流行的主流技术。</li><li>跑步每周10公里，争取年度突破400公里。参加1-2场半马。</li></ul><p><em>至于什么是理想主义者，在这个安静或不安静的夜晚，打开笔记本，于是一切都有了答案</em>。</p><p>生命不息，奋斗不止，2018，再见～</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是最好的时代，也是最差的时代。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么是2018&quot;&gt;&lt;a href=&quot;#为什么是2018&quot; class=&quot;headerlink&quot; title=&quot;为什么是2018&quot;&gt;&lt;/a&gt;为什么是2018&lt;/h2&gt;&lt;p&gt;从来没写过年终总结，好像还挺遗憾的，活的不明不白的，一年就没了。&lt;/p&gt;
&lt;p&gt;正如&lt;code&gt;鸡汤文化&lt;/code&gt;宣扬的那样，这可是8120年了啊，10年前已经不是1998，而是2008年了。人们总是过分的相信自己的记忆，忽略了时间的力量，&lt;code&gt;事如春梦了无痕，苟不记之笔墨，未免有辜彼苍之厚&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么，这种仪式感的东西就从&lt;strong&gt;2018年12月31日&lt;/strong&gt;开始吧。&lt;/p&gt;
&lt;p&gt;暂且从以下几个方面给2018一个交代吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;毕业&lt;/li&gt;
&lt;li&gt;就业&lt;/li&gt;
&lt;li&gt;健身&lt;/li&gt;
&lt;li&gt;不安分的思想&lt;/li&gt;
&lt;li&gt;2019年展望&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="2018总结" scheme="https://codevvvv9.github.io/tags/2018%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Deepin配置Java环境</title>
    <link href="https://codevvvv9.github.io/2018/12/29/deepin-pei-zhi-java-huan-jing/"/>
    <id>https://codevvvv9.github.io/2018/12/29/deepin-pei-zhi-java-huan-jing/</id>
    <published>2018-12-29T13:56:32.000Z</published>
    <updated>2020-07-25T14:54:56.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载JavaSe开发包"><a href="#下载JavaSe开发包" class="headerlink" title="下载JavaSe开发包"></a>下载<code>JavaSe</code>开发包</h2><ul><li><code>Oracle官网下载</code>，<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">地址</a> <a id="more"></a></li></ul><p><img src="https://i.loli.net/2018/12/29/5c277f76ae39e.png" alt=""></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li>下载完之后，解压，记住目录</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在你的.bashrc 或者 .zshrc，以及 /etc/profile添加如下代码</span>export JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>wsl<span class="token operator">/</span>Documents<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_191export JRE_HOME<span class="token operator">=</span>$<span class="token punctuation">{</span>JAVA_HOME<span class="token punctuation">}</span><span class="token operator">/</span>jreexport CLASSPATH<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>JAVA_HOME<span class="token punctuation">}</span><span class="token operator">/</span>lib<span class="token operator">:</span>$<span class="token punctuation">{</span>JRE_HOME<span class="token punctuation">}</span><span class="token operator">/</span>libexport PATH<span class="token operator">=</span>$<span class="token punctuation">{</span>JAVA_HOME<span class="token punctuation">}</span><span class="token operator">/</span>bin<span class="token operator">:</span>$PATH<span class="token comment" spellcheck="true">// etc要想生效还要source</span>sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>profilesource <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><code>deepin</code>有内置的<code>openJDK</code>，会影响<code>Oracle</code>的<code>JDK</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查看版本多了一个_JAVA_OPTIONS</span>java <span class="token operator">-</span>versionPicked up _JAVA_OPTIONS<span class="token operator">:</span>   <span class="token operator">-</span>Dawt<span class="token punctuation">.</span>useSystemAAFontSettings<span class="token operator">=</span>gaspjava version <span class="token string">"1.8.0_05"</span><span class="token function">Java</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime <span class="token function">Environment</span> <span class="token punctuation">(</span>build <span class="token number">1.8</span><span class="token punctuation">.</span>0_05<span class="token operator">-</span>b13<span class="token punctuation">)</span>Java <span class="token function">HotSpot</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span>Bit Server <span class="token function">VM</span> <span class="token punctuation">(</span>build <span class="token number">25.5</span><span class="token operator">-</span>b02<span class="token punctuation">,</span> mixed mode<span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2018/12/29/5c27810304718.png" alt=""></p><ul><li>多余文件的文本内容</li></ul><p><img src="https://i.loli.net/2018/12/29/5c2781b63bd6c.png" alt=""></p><ul><li>终极解决方案</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在上面配置的环境变量前面添加</span>unset _JAVA_OPTIONS</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载JavaSe开发包&quot;&gt;&lt;a href=&quot;#下载JavaSe开发包&quot; class=&quot;headerlink&quot; title=&quot;下载JavaSe开发包&quot;&gt;&lt;/a&gt;下载&lt;code&gt;JavaSe&lt;/code&gt;开发包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Oracle官网下载&lt;/code&gt;，&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端之外" scheme="https://codevvvv9.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="Java" scheme="https://codevvvv9.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>记录用户状态</title>
    <link href="https://codevvvv9.github.io/2018/10/21/ji-lu-yong-hu-zhuang-tai/"/>
    <id>https://codevvvv9.github.io/2018/10/21/ji-lu-yong-hu-zhuang-tai/</id>
    <published>2018-10-21T14:56:12.000Z</published>
    <updated>2018-11-18T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天主要记录本周开发中遇到的一个问题——记录用户状态。</p><h3 id="问题的来源"><a href="#问题的来源" class="headerlink" title="问题的来源"></a>问题的来源</h3><p>我们做的产品是某款安检产品的数据集中管理，主要是为了处理AI所需的样本，我们通过web进行标注任务、数据传输任务、设备型号、设备类型、存储源、传输协议等等的管理与分配，以上各种东东的管理（各种简单的复杂的增删改查）是我负责。<a id="more"></a></p><p>那是一个风和日不丽的周一，<code>leader</code>说客户（其实就是某个人脸识别的兄弟部门）需要一项训练集的管理web，毫无疑问的，这个任务是我的。AI嘛，说白了就是不断训练数据，获得模型，再训练，再通过新的数据进行测试，根据结果再通过新数据训练，再得到算法模型，再测试，周而复始的调参。所以训练集必须要好好管理啊。</p><p>那么，当我创建一个新的训练集的时候，训练集本身包含5个自有属性，还要通过一个数据包的查询接口来获得的数据包，以上的5个自有属性+这个数据包（不知道有多少，反正是通过另外三个查询条件获得数据包内容）组成一条数据集。</p><p>这条训练集数据可以被编辑、被删除、被导出。</p><p>编辑的业务场景是：点击编辑时首先通过获得当前项训练集的<code>id</code>的接口来回显数据库中存储的数据，而训练集只有那五个自有属性可以被修改，数据包的内容以及创建时的三个查询条件（也就是创建时的查询状态）不可修改。</p><p>基于上面的业务场景，我添加一条新的训练集的时候，该训练集的五个自有属性+数据包+<strong>查询状态</strong>都应该存储到数据库中。</p><p>而一开始与我对接的java后台的数据库中表没有对应字段去存储查询状态，我与之进行第一轮交涉，经过思考，他觉得这样太复杂，因为这个查询条件没有单独的<code>id</code>去存储，需要再建新的数据库表，希望前台来处理这个状态，因为通过数据包的查询接口获得了表征查询获得的所有数据包的一串标识码和数据包总数，他认为我可以通过一个对象记住，然后编辑时再把它关联回去。既然后台要建表，还要建新的实体类，比较复杂，那我前台看看处理下。</p><p>可是，我一思考，这个查询条件要与该条训练集绑定才能保证编辑该条训练集的时候回显正常 的数据，也就是说要把查询状态与该训练集的<code>id</code>关联起来， 那么问题来了，添加的时候，并没有<code>id</code>，此<code>id</code>是往数据库存储时后台自动生成的，前台也没法拿到这个<code>id</code>，那么我也没法通过一个对象把查询状态+<code>创建该训练集的id</code>存储起来，好像前台也没法处理。</p><p>可是这个任务必须要做啊，我和后台的小伙伴两个萌新大眼瞪小眼。</p><h3 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h3><p>没办法了，去跟<code>leader</code>商量了，结果人家云淡风轻的说：</p><ol><li>后台在表里面建个<code>searchCondition</code>字段，给它个长点的字符串格式。</li><li>前台创建时把查询条件包装成一个大字符串，数据库就存这个大字符串就行了。</li><li>编辑时前台拿到那个长字符串，再解析，分别把数据回填到查询状态的<code>form</code>里面就行了。</li></ol><p>听完之后我俩回来后，讨论了一下就开始干了，有了明确的方向干活就是快啊。</p><h4 id="改造添加时的方法"><a href="#改造添加时的方法" class="headerlink" title="改造添加时的方法"></a>改造添加时的方法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">"add"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> searchCondition <span class="token operator">=</span> <span class="token punctuation">{</span>        businessType<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>businessType<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//时间戳处理，原始处理是new Date().getTime(),应使用其他方法去处理时间戳的问题</span>        uploadTime<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>uploadTime<span class="token punctuation">,</span>        plotTask<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>plotTask    <span class="token punctuation">}</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>base_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/trainSet/...`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//其他代码</span>      searchCondition<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">strinify</span><span class="token punctuation">(</span>searchCondition<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//代码...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="编辑时的方法"><a href="#编辑时的方法" class="headerlink" title="编辑时的方法"></a>编辑时的方法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">showFormData</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>id<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>base_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/trainSet/getTrainSetById?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data          <span class="token keyword">let</span> searchConditionJSON <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>searchCondition<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>businessType <span class="token operator">=</span> searchConditionJSON<span class="token punctuation">.</span>businessType          <span class="token comment" spellcheck="true">//...</span>          <span class="token comment" spellcheck="true">//或者直接用解构，通过查询条件再调一遍查询的接口即可获得所有的数据包以及总数目</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>具体问题还是没法深入到代码层面去分析，对于数据库的知识比较匮乏，不知道如何去抽象业务场景。</p><p>原来<code>JSON</code>的基本玩法这么玩。</p><p>多思考，多请教，多记录。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天主要记录本周开发中遇到的一个问题——记录用户状态。&lt;/p&gt;
&lt;h3 id=&quot;问题的来源&quot;&gt;&lt;a href=&quot;#问题的来源&quot; class=&quot;headerlink&quot; title=&quot;问题的来源&quot;&gt;&lt;/a&gt;问题的来源&lt;/h3&gt;&lt;p&gt;我们做的产品是某款安检产品的数据集中管理，主要是为了处理AI所需的样本，我们通过web进行标注任务、数据传输任务、设备型号、设备类型、存储源、传输协议等等的管理与分配，以上各种东东的管理（各种简单的复杂的增删改查）是我负责。&lt;/p&gt;
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="think" scheme="https://codevvvv9.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>虚拟DOM</title>
    <link href="https://codevvvv9.github.io/2018/09/19/xu-ni-dom/"/>
    <id>https://codevvvv9.github.io/2018/09/19/xu-ni-dom/</id>
    <published>2018-09-19T15:46:07.000Z</published>
    <updated>2018-11-18T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习底层的虚拟DOM原理</p></blockquote><p>二话不说，直接上代码</p><h3 id="基本的代码如下："><a href="#基本的代码如下：" class="headerlink" title="基本的代码如下："></a>基本的代码如下：<a id="more"></a></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> nodeData <span class="token operator">=</span> <span class="token punctuation">{</span>  tag<span class="token punctuation">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      tag<span class="token punctuation">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        tag<span class="token punctuation">:</span> <span class="token string">'span'</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          tag<span class="token punctuation">:</span> <span class="token string">'#text'</span><span class="token punctuation">,</span>          text<span class="token punctuation">:</span> <span class="token string">'wushao.xyz'</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      tag<span class="token punctuation">:</span> <span class="token string">'span'</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        tag<span class="token punctuation">:</span> <span class="token string">'#text'</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">'wushao.com'</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于这段html代码&lt;div>  &lt;p>    &lt;span>wushao.xyz&lt;/span>  &lt;/p>  &lt;span>wushao.com&lt;/span>&lt;/div> */</span><span class="token comment" spellcheck="true">/** * ES6的写法 */</span><span class="token keyword">class</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'#text'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>vChild <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>vChild<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> el  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 创建虚拟dom节点的简便函数 * @param {标签名} tag  * @param {子标签} children  * @param {文本值} text  */</span><span class="token keyword">function</span> <span class="token function">v</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果没有tag,第二个参数是字符串的话</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> children <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    text <span class="token operator">=</span> children    children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * ES5的写法 * @param {*} tag  * @param {*} children  * @param {*} text  */</span><span class="token keyword">function</span> <span class="token function">vNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children  <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">}</span>vNode<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'#text'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>vChild <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>vChild<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> el<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//举例说明</span><span class="token keyword">let</span> vNode1 <span class="token operator">=</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">,</span> <span class="token string">'wushao.xyz'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">,</span> <span class="token string">'wushao.com'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把虚拟的dom映射进了真实的dom结构里面</span><span class="token keyword">let</span> vNode2 <span class="token operator">=</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">,</span> <span class="token string">'wushao.xyz'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">,</span> <span class="token string">'wushao.com'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">v</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">,</span> <span class="token string">'wushao'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#change'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  root<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>  root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 比较前后两个节点 * @param {要比较的DOM结构} parent  * @param {旧的节点} newVNode  * @param {*新的节点 oldNode  * @param {索引} index  */</span><span class="token keyword">function</span> <span class="token function">patchElement</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> oldNode<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//新增元素</span>    parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>tag <span class="token operator">!==</span> oldNode<span class="token punctuation">.</span>tag <span class="token operator">||</span> newVNode<span class="token punctuation">.</span>text <span class="token operator">!=</span> oldNode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>    parent<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">||</span> i <span class="token operator">&lt;</span> oldNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">patchElement</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> oldNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="可以在HTML中直接测试"><a href="#可以在HTML中直接测试" class="headerlink" title="可以在HTML中直接测试"></a>可以在<code>HTML</code>中直接测试</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>虚拟DOM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./v-dom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习底层的虚拟DOM原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二话不说，直接上代码&lt;/p&gt;
&lt;h3 id=&quot;基本的代码如下：&quot;&gt;&lt;a href=&quot;#基本的代码如下：&quot; class=&quot;headerlink&quot; title=&quot;基本的代码如下：&quot;&gt;&lt;/a&gt;基本的代码如下：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Vue的学习" scheme="https://codevvvv9.github.io/categories/Vue%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://codevvvv9.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SEO不完全指北</title>
    <link href="https://codevvvv9.github.io/2018/09/02/seo-bu-wan-quan-zhi-bei/"/>
    <id>https://codevvvv9.github.io/2018/09/02/seo-bu-wan-quan-zhi-bei/</id>
    <published>2018-09-02T13:49:34.000Z</published>
    <updated>2018-11-18T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个周末学习了一下关于把个人站点进行SEO的初级操作，觉得很有意思，以此文记录一下，如果你也使用<code>HEXO</code>那将会有帮助。</p><blockquote><p><code>SEO</code>指 <code>Search Engine Optimization</code>，意指搜索引擎优化的意思，通过必要的网站结构的设计让<code>spider</code>机器人爬取有用的数据，提高网站在搜索时的排名与在相关领域的权重。</p></blockquote><h3 id="百度站长"><a href="#百度站长" class="headerlink" title="百度站长"></a>百度站长</h3><p>国内的话，首推<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长</a>，前提是你要有自已 的域名了。<a id="more"></a></p><h4 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h4><p>按照下图操作</p><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-9-2/21158660.jpg" alt="百度添加网站"></p><p>前面两部基本没问题，注意一下第三步的操作：</p><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-9-2/71723786.jpg" alt="第三步验证操作"></p><ul><li>通常选择文件验证和CNAME验证，我选择的是文件验证，这里要把百度的验证文件放到你的域名的根目录下，具体的在这里指：<code>source</code>目录下，要注意如果是html文件要使用如下代码处理，防止后续部署时把html文件给处理了。</li></ul><pre class=" language-html"><code class="language-html">layout: false---FZKjy3o3f6 //你的验证文件的内容，显然百度分配给每个人都不一样</code></pre><h4 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h4><ol><li>首先安装两个插件</li></ol><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>sitemap <span class="token operator">--</span>save     npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>baidu<span class="token operator">-</span>sitemap <span class="token operator">--</span>save</code></pre><ol start="2"><li>修改项目根目录下的<code>_config.yml</code> 的URL</li></ol><pre class=" language-javascript"><code class="language-javascript"># URLurl<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>wushao<span class="token punctuation">.</span>xyz <span class="token comment" spellcheck="true">//你的个人站点的名字</span>root<span class="token punctuation">:</span> <span class="token operator">/</span>permalink<span class="token punctuation">:</span> <span class="token punctuation">:</span>year<span class="token operator">/</span><span class="token punctuation">:</span>month<span class="token operator">/</span><span class="token punctuation">:</span>day<span class="token operator">/</span><span class="token punctuation">:</span>title<span class="token operator">/</span> <span class="token comment" spellcheck="true">//这里将会在后续的URL持久化章中优化</span></code></pre><ol start="3"><li>进行如下代码的部署，在根目录下的<code>public</code>目录生成<code>sitemap.xml</code> 和 <code>baidusitemap.xml</code></li></ol><pre class=" language-javascript"><code class="language-javascript">hexo g <span class="token operator">-</span>d <span class="token comment" spellcheck="true">//相当于hexo generate 然后 hexo deploy</span></code></pre><ol start="4"><li>把上面生成的<code>sitemap.xml</code>提交给百度，按照第一章的做法把站点添加到百度后，按照下图的方式提交</li></ol><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-9-2/81973081.jpg" alt="链接提交"></p><p> 这里有两种方式提交，很明显选择自动提交——主动推送的方式，注意这里的<code>token</code>，很重要</p><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-9-2/21550135.jpg" alt="主动提交方式"></p><p>使用如下代码完成主动推送</p><pre class=" language-yaml"><code class="language-yaml">//1.先安装插件npm install hexo<span class="token punctuation">-</span>baidu<span class="token punctuation">-</span>url<span class="token punctuation">-</span>submit <span class="token punctuation">-</span><span class="token punctuation">-</span>save//2.在根目录下的_config.yml 添加baidu_url_submit属性<span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">100 </span><span class="token comment" spellcheck="true"># 提交最新的一个链接,最新的100个链接，想写几个写几个</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> wushao.xyz <span class="token comment" spellcheck="true"># 在百度站长平台中注册的域名</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 请注意这是您的秘钥，就是上图模糊处理的那个所以请不要把博客源代码发布在公众仓库里!</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt <span class="token comment" spellcheck="true"># 文本文档的地址， 新链接会保存在public目录下</span>//3.修改根目录下的_config.yml 的deploy属性<span class="token punctuation">,</span>注意有两个deploy时的格式！！！<span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span>        <span class="token key atrule">github</span><span class="token punctuation">:</span> 你的github        <span class="token key atrule">coding</span><span class="token punctuation">:</span> 你的coding<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter</code></pre><p>下面介绍几个优化爬取的方法</p><hr><h4 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加<code>robots.txt</code></h4><p>这里是为了告诉搜索引擎哪些可以爬取哪些不可以爬取，在<code>source</code>目录下添加<code>robots.txt</code>，文本内容如下</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">User-agent</span><span class="token punctuation">:</span> *<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /archives/<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /categories/<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /tags/<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /posts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /vendors/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /js/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /css/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /fonts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /vendors/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /fancybox/<span class="token key atrule">Sitemap</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//你的站点/sitemap.xml //<span class="token key atrule">Sitemap</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//你的站点/baidusitemap.xml</code></pre><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-9-2/8846523.jpg" alt="robots.txt内容"></p><h4 id="Url持久化"><a href="#Url持久化" class="headerlink" title="Url持久化"></a><code>Url</code>持久化</h4><p>还记的<code>_config.yml</code>里面关于<code>url</code>的描述嘛。<code>permalink</code>属性中的<code>/</code>决定了你的<code>url</code>有几级，通常引擎只会爬取三层，而且对于汉字的处理不完美，可是你的文章名字难免会有汉字，所以这里要进行必要的转化。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># # URL</span><span class="token comment" spellcheck="true"># ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> 你的站点名字<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title/ //优化处</code></pre><ul><li>借助<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a>插件，感谢大神的插件</li></ul><pre class=" language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>abbrlink <span class="token punctuation">-</span><span class="token punctuation">-</span>save// Modify permalink in config.yml file<span class="token punctuation">:</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink/<span class="token comment" spellcheck="true"># abbrlink config</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32  <span class="token comment" spellcheck="true">#support crc16(default) and crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex    <span class="token comment" spellcheck="true">#support dec(default) and hex</span>//部署完之后所有的url如下所示http<span class="token punctuation">:</span>//wushao.xyz/posts/6ed52419.html //6ed52419这个就代表你原来的名字http<span class="token punctuation">:</span>//wushao.xyz/posts/7a43570f.htmlhttp<span class="token punctuation">:</span>//wushao.xyz/posts/7b3b172b.htmlhttp<span class="token punctuation">:</span>//wushao.xyz/posts/77ac3545.html</code></pre><ul><li>此时你会发现你以前的的文章标题会有变化</li></ul><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-9-2/83087096.jpg" alt=""></p><h3 id="Google站长"><a href="#Google站长" class="headerlink" title="Google站长"></a><code>Google</code>站长</h3><p><code>Google</code>的方便多了，直接<a href="https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">google站长</a>，然后进<code>Search console</code>,添加属性就是添加个人站点的意思，后续步骤和上面一样，但是收录的速度快多了。</p><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-9-2/53903614.jpg" alt="Search console"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个周末学习了一下关于把个人站点进行SEO的初级操作，觉得很有意思，以此文记录一下，如果你也使用&lt;code&gt;HEXO&lt;/code&gt;那将会有帮助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SEO&lt;/code&gt;指 &lt;code&gt;Search Engine Optimization&lt;/code&gt;，意指搜索引擎优化的意思，通过必要的网站结构的设计让&lt;code&gt;spider&lt;/code&gt;机器人爬取有用的数据，提高网站在搜索时的排名与在相关领域的权重。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;百度站长&quot;&gt;&lt;a href=&quot;#百度站长&quot; class=&quot;headerlink&quot; title=&quot;百度站长&quot;&gt;&lt;/a&gt;百度站长&lt;/h3&gt;&lt;p&gt;国内的话，首推&lt;a href=&quot;https://ziyuan.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度站长&lt;/a&gt;，前提是你要有自已 的域名了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端之外" scheme="https://codevvvv9.github.io/categories/%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="SEO" scheme="https://codevvvv9.github.io/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>最强的团队</title>
    <link href="https://codevvvv9.github.io/2018/08/31/zui-qiang-de-tuan-dui/"/>
    <id>https://codevvvv9.github.io/2018/08/31/zui-qiang-de-tuan-dui/</id>
    <published>2018-08-31T13:33:32.000Z</published>
    <updated>2018-11-18T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="所在的团队"><a href="#所在的团队" class="headerlink" title="所在的团队"></a>所在的团队</h3><p>入职已经有一个半月了，目前的团队氛围对于我这个新人来说，就一句话<strong>如鱼得水</strong>，感谢机缘，能让我在转行的第一份工作中遇见这个团队，而我也会为了这个团队努力工作，让前端的大旗迎风飞扬。<a id="more"></a></p><p>团队组成由4个java后端、1个Python后端、3个前端、1个架构师。</p><ul><li>java四人组构成：3个主力web服务，使用sprintboot等先进技术， 1个使用各种大数据技术的java小头目。Python后端主要负责系统的基础架构，比较高深。</li><li>Python大牛是南京土著，开车贼梦，公认的飙车王，宽高比几乎相同，哈哈，当然了，很nice的队友，给我普及了很多南京的知识，同时多线支持南京的机器学习计算平台的开发，强！！！</li><li>接下来重点介绍前端阵容，前端项目毫无疑问使用Vue全家桶技术，由两位女生和我组成，两位女生和我年纪一样，但是我读研期间人家已经夯实好了前端技术，她俩人都超级好，总是结伴讨论问题，对我的vue提升帮助很大，尤其是小leader——玥之魔法师，她炒鸡耐心，总结：炒鸡nice的小组织。</li><li>架构师是从业10多年的大牛，虽然不懂前端，所以就由玥之魔法师组织，但是他的宏观把握力、带队能力、沟通写作、各个部门协调资源、做人做事的风格，让我叹为观止，原来程序员也可以这么风趣幽默，给团队成员极大的自由空间，后面我将重点讲讲大佬的故事。</li></ul><p>说实话，以我目前的能力来说，遇到这么一个团队，对于刚转行过来的人来说，有幸也有不幸。幸的是：有充足的时间去丰富自己的js技能，打磨我的vue技能，极大的空间去发掘潜力，不幸的是：没有紧迫的互联网急速迭代的产品，客户都是固定的。不过后来也想通了，当下选择的就是最棒的，坦然接受这个角色，做好自己，很怕自己又折在好高骛远的毛病上。18年的上半年，浪费了很多时间，导致自己在算法数据结构、计算机网络的学习上欠缺了相当多，这是后期要与js一起恶补的方向。</p><p>这段时间的总结和未来正如我的slogan一样，道阻且长，以梦为马，不忘初心。👊</p><h3 id="学会解放生产力"><a href="#学会解放生产力" class="headerlink" title="学会解放生产力"></a>学会解放生产力</h3><p>还记得我前面说的大佬吗，他在工作两年时就已经带领一个8人团队做出一番大事了，他也鼓励我们在工作到2-3年时要刻意的去培养管理的技能与意识，而不仅仅是敲代码。</p><h4 id="善假于物也"><a href="#善假于物也" class="headerlink" title="善假于物也"></a>善假于物也</h4><ol><li>使用<strong>jira</strong>。大佬鼓励我们使用jira进行项目的各个任务的分解，同时进行任务流的分解，不同的任务流分配不同的时间比如3w，2h，1d，让整个团队看到各自的时间分配与做的东西，这不就是各大畅销书提倡的时间管理技巧嘛，例如西红柿时间管理法、四象限时间管理法，从来没有想到在程序员生涯中会用到这些，我以为就是坐那敲代码，调bug而已。可能其他大厂也都用的各种管理技巧，可能比我们的很高级，但是我的体会是：入行以后就要专业，你要体现出你是专业的，不是学校、或者二流程序员做事的风格，你要有一个专业的做事风格，告诉别人，我是一流的技术人员，所以团队的第一天就这么要求，真的对我的职业生涯有很大的帮助与启发。</li><li>及时提出帮助。大佬每日早晨给我们开会，他使用邮件做了一个定时发送，他起的名字是 “每日站会”，每天早晨傍晚都会收到它。这个定时事件流或者会议的功能，早就有了，但是从来没用过的团队大有人在，工具就摆在那里，不会用或者不擅于利用，这真是极大的浪费啊。我们站会的精髓是：“昨天做了什么，今天做什么，需要什么帮助”，我最大的体会是第三点——需要什么帮助。人，都有一个毛病，觉得自己很牛，多花点时间总会搞出来，后来人类总结了一个成语叫自以为是，尤其在技术人员中，这一点尤甚，工作几年后，技术有了进步，就一头扎进代码，出不来了，明明可以请教一下就解决了，非要自己研究，导致莫名的加班，假如此时，你及时向上级请求这个帮助，提高了处理效率，还能节省时间研究其他的东西，真实的代码产出率也会上升。当然上述的问题是指浅层次的疑难问题，像复杂的业务逻辑、源码分析，还是要自己深入理解，花很大气力的，至于上述的及时提出帮助具体指什么，聪明人读到这里应该已经懂了。所以如果没有懂，具体场景具体分析也应该作为一项必备技能。大佬的这个要求每天都会让我反思，我是否可以借别人的帮助，一起解决问题，提高协作能力。</li></ol><p>上述的两点可以简单的归纳为一句：善假于物也，古人的大智慧历久弥新啊。</p><blockquote><p>君子生非异也，善假于物也。</p></blockquote><h4 id="集腋成裘"><a href="#集腋成裘" class="headerlink" title="集腋成裘"></a>集腋成裘</h4><p>提早规避错误，每日提交代码，使用git管理代码，这就引出了持续集成——<strong>CI</strong>的概念，我们前端每日凌晨4点自动bulid,通过后才会打包一个包，如果当前节点有问题，及时修改，不至于到了后期，一整合，发现错误时已经尾大不掉，无法及时有效定位错误了，即使能定位，也会花费大量时间在测试上，以上我对持续集成的简单理解。</p><p>具体执行起来使用<strong><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a></strong>。这又是一个大话题了，后期会继续深入。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;所在的团队&quot;&gt;&lt;a href=&quot;#所在的团队&quot; class=&quot;headerlink&quot; title=&quot;所在的团队&quot;&gt;&lt;/a&gt;所在的团队&lt;/h3&gt;&lt;p&gt;入职已经有一个半月了，目前的团队氛围对于我这个新人来说，就一句话&lt;strong&gt;如鱼得水&lt;/strong&gt;，感谢机缘，能让我在转行的第一份工作中遇见这个团队，而我也会为了这个团队努力工作，让前端的大旗迎风飞扬。&lt;/p&gt;
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="think" scheme="https://codevvvv9.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>工作小结-1</title>
    <link href="https://codevvvv9.github.io/2018/08/28/gong-zuo-xiao-jie-1/"/>
    <id>https://codevvvv9.github.io/2018/08/28/gong-zuo-xiao-jie-1/</id>
    <published>2018-08-28T15:22:20.000Z</published>
    <updated>2018-11-18T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scrollTop的兼容性问题"><a href="#scrollTop的兼容性问题" class="headerlink" title="scrollTop的兼容性问题"></a>scrollTop的兼容性问题</h2><p>在做移动端布局时，监控touchmove事件经常会使用<strong>scrollTop</strong>来模拟页面的滑动距离，但是</p><ul><li>仅仅使用document.body.scrollTop来进行滑动距离的判断，会失效 <a id="more"></a></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'滑动距离大于100像素'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'滑动距离小于100像素'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-8-28/24266651.jpg" alt=""></p><p>此时应该考虑兼容性，不应该去监听body的滚动距离，而应该去监听html元素的滚动距离</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'滑动距离大于100像素'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'滑动距离小于100像素'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p><img src="http://p3tha6q4v.bkt.clouddn.com/18-8-28/43484629.jpg" alt=""></p><p>上图才是正确的结果，当滚动距离大于100像素时，出现回到顶部的按钮。</p><h3 id="事件戳的转化问题"><a href="#事件戳的转化问题" class="headerlink" title="事件戳的转化问题"></a>事件戳的转化问题</h3><h3 id="URL里的token分析"><a href="#URL里的token分析" class="headerlink" title="URL里的token分析"></a>URL里的token分析</h3><p>为了web安全考虑一般在路径里面后端会传入一个token来标识用户，防止反复攻击，例如<strong><a href="http://10.20.20.109/?nuctoken=111#/" target="_blank" rel="noopener">http://10.20.20.109/?nuctoken=111#/</a></strong>，只有带有nuctoken才会访问到正确的页面，如果没有就会显示errorpage</p><h3 id="i18n在vue中的使用"><a href="#i18n在vue中的使用" class="headerlink" title="i18n在vue中的使用"></a>i18n在vue中的使用</h3><p>为了扩展字符的国际化语言，使用i18n，在vue中单独把汉字字端放到一个cn.js文件中，相当于一个字典。</p><p>使用</p><pre class=" language-JavaScript"><code class="language-JavaScript">$t('字典中某个字段的名字')</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;scrollTop的兼容性问题&quot;&gt;&lt;a href=&quot;#scrollTop的兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;scrollTop的兼容性问题&quot;&gt;&lt;/a&gt;scrollTop的兼容性问题&lt;/h2&gt;&lt;p&gt;在做移动端布局时，监控touchmove事件经常会使用&lt;strong&gt;scrollTop&lt;/strong&gt;来模拟页面的滑动距离，但是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅仅使用document.body.scrollTop来进行滑动距离的判断，会失效&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="三省吾身" scheme="https://codevvvv9.github.io/categories/%E4%B8%89%E7%9C%81%E5%90%BE%E8%BA%AB/"/>
    
    
      <category term="think" scheme="https://codevvvv9.github.io/tags/think/"/>
    
  </entry>
  
</feed>
