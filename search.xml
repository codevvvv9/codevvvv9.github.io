[{"title":"记录用户状态","url":"https://codevvvv9.github.io/2018/10/21/记录用户状态/","content":"<p>今天主要记录本周开发中遇到的一个问题——记录用户状态。</p>\n<h3 id=\"问题的来源\"><a href=\"#问题的来源\" class=\"headerlink\" title=\"问题的来源\"></a>问题的来源</h3><p>我们做的产品是某款安检产品的数据集中管理，主要是为了处理AI所需的样本，我们通过web进行标注任务、数据传输任务、设备型号、设备类型、存储源、传输协议等等的管理与分配，以上各种东东的管理（各种简单的复杂的增删改查）是我负责。<a id=\"more\"></a></p>\n<p>那是一个风和日不丽的周一，<code>leader</code>说客户（其实就是某个人脸识别的兄弟部门）需要一项训练集的管理web，毫无疑问的，这个任务是我的。AI嘛，说白了就是不断训练数据，获得模型，再训练，再通过新的数据进行测试，根据结果再通过新数据训练，再得到算法模型，再测试，周而复始的调参。所以训练集必须要好好管理啊。</p>\n<p>那么，当我创建一个新的训练集的时候，训练集本身包含5个自有属性，还要通过一个数据包的查询接口来获得的数据包，以上的5个自有属性+这个数据包（不知道有多少，反正是通过另外三个查询条件获得数据包内容）组成一条数据集。</p>\n<p>这条训练集数据可以被编辑、被删除、被导出。</p>\n<p>编辑的业务场景是：点击编辑时首先通过获得当前项训练集的<code>id</code>的接口来回显数据库中存储的数据，而训练集只有那五个自有属性可以被修改，数据包的内容以及创建时的三个查询条件（也就是创建时的查询状态）不可修改。</p>\n<p>基于上面的业务场景，我添加一条新的训练集的时候，该训练集的五个自有属性+数据包+<strong>查询状态</strong>都应该存储到数据库中。</p>\n<p>而一开始与我对接的java后台的数据库中表没有对应字段去存储查询状态，我与之进行第一轮交涉，经过思考，他觉得这样太复杂，因为这个查询条件没有单独的<code>id</code>去存储，需要再建新的数据库表，希望前台来处理这个状态，因为通过数据包的查询接口获得了表征查询获得的所有数据包的一串标识码和数据包总数，他认为我可以通过一个对象记住，然后编辑时再把它关联回去。既然后台要建表，还要建新的实体类，比较复杂，那我前台看看处理下。</p>\n<p>可是，我一思考，这个查询条件要与该条训练集绑定才能保证编辑该条训练集的时候回显正常 的数据，也就是说要把查询状态与该训练集的<code>id</code>关联起来， 那么问题来了，添加的时候，并没有<code>id</code>，此<code>id</code>是往数据库存储时后台自动生成的，前台也没法拿到这个<code>id</code>，那么我也没法通过一个对象把查询状态+<code>创建该训练集的id</code>存储起来，好像前台也没法处理。</p>\n<p>可是这个任务必须要做啊，我和后台的小伙伴两个萌新大眼瞪小眼。</p>\n<h3 id=\"问题的解决\"><a href=\"#问题的解决\" class=\"headerlink\" title=\"问题的解决\"></a>问题的解决</h3><p>没办法了，去跟<code>leader</code>商量了，结果人家云淡风轻的说：</p>\n<ol>\n<li>后台在表里面建个<code>searchCondition</code>字段，给它个长点的字符串格式。</li>\n<li>前台创建时把查询条件包装成一个大字符串，数据库就存这个大字符串就行了。</li>\n<li>编辑时前台拿到那个长字符串，再解析，分别把数据回填到查询状态的<code>form</code>里面就行了。</li>\n</ol>\n<p>听完之后我俩回来后，讨论了一下就开始干了，有了明确的方向干活就是快啊。</p>\n<h4 id=\"改造添加时的方法\"><a href=\"#改造添加时的方法\" class=\"headerlink\" title=\"改造添加时的方法\"></a>改造添加时的方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (action === <span class=\"string\">\"add\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> searchCondition = &#123;</span><br><span class=\"line\">        businessType: <span class=\"keyword\">this</span>.form.businessType,</span><br><span class=\"line\">        <span class=\"comment\">//时间戳处理，原始处理是new Date().getTime(),应使用其他方法去处理时间戳的问题</span></span><br><span class=\"line\">        uploadTime: <span class=\"keyword\">this</span>.form.uploadTime,</span><br><span class=\"line\">        plotTask: <span class=\"keyword\">this</span>.form.plotTask</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    axios.post(<span class=\"string\">`<span class=\"subst\">$&#123;base_url&#125;</span>/trainSet/...`</span>, &#123;</span><br><span class=\"line\">      <span class=\"comment\">//其他代码</span></span><br><span class=\"line\">      searchCondition: <span class=\"built_in\">JSON</span>.strinify(searchCondition)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码...</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑时的方法\"><a href=\"#编辑时的方法\" class=\"headerlink\" title=\"编辑时的方法\"></a>编辑时的方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showFormData(id) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = &#123;</span><br><span class=\"line\">        id = <span class=\"keyword\">this</span>.form.id,</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    axios.get(<span class=\"string\">`<span class=\"subst\">$&#123;base_url&#125;</span>/trainSet/getTrainSetById?id=<span class=\"subst\">$&#123;val.id&#125;</span>`</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> data = res.data.data</span><br><span class=\"line\">          <span class=\"keyword\">let</span> searchConditionJSON = <span class=\"built_in\">JSON</span>.parse(data.searchCondition)</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.form.businessType = searchConditionJSON.businessType</span><br><span class=\"line\">          <span class=\"comment\">//...</span></span><br><span class=\"line\">          <span class=\"comment\">//或者直接用解构，通过查询条件再调一遍查询的接口即可获得所有的数据包以及总数目</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"感悟\"><a href=\"#感悟\" class=\"headerlink\" title=\"感悟\"></a>感悟</h3><p>具体问题还是没法深入到代码层面去分析，对于数据库的知识比较匮乏，不知道如何去抽象业务场景。</p>\n<p>原来<code>JSON</code>的基本玩法这么玩。</p>\n<p>多思考，多请教，多记录。</p>\n","categories":["三省吾身"],"tags":["think"]},{"title":"虚拟DOM","url":"https://codevvvv9.github.io/2018/09/19/虚拟DOM/","content":"<blockquote>\n<p>学习底层的虚拟DOM原理</p>\n</blockquote>\n<p>二话不说，直接上代码</p>\n<h3 id=\"基本的代码如下：\"><a href=\"#基本的代码如下：\" class=\"headerlink\" title=\"基本的代码如下：\"></a>基本的代码如下：<a id=\"more\"></a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nodeData = &#123;</span><br><span class=\"line\">  tag: <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  children: [&#123;</span><br><span class=\"line\">      tag: <span class=\"string\">'p'</span>,</span><br><span class=\"line\">      children: [&#123;</span><br><span class=\"line\">        tag: <span class=\"string\">'span'</span>,</span><br><span class=\"line\">        children: [&#123;</span><br><span class=\"line\">          tag: <span class=\"string\">'#text'</span>,</span><br><span class=\"line\">          text: <span class=\"string\">'wushao.xyz'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">'span'</span>,</span><br><span class=\"line\">      children: [&#123;</span><br><span class=\"line\">        tag: <span class=\"string\">'#text'</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'wushao.com'</span></span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">等同于这段html代码</span></span><br><span class=\"line\"><span class=\"comment\">&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;span&gt;wushao.xyz&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;span&gt;wushao.com&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/div&gt; </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ES6的写法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(tag, children, text) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tag = tag</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = children</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.text = text</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tag === <span class=\"string\">'#text'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createTextNode(<span class=\"keyword\">this</span>.text)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"keyword\">this</span>.tag)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children.forEach(<span class=\"function\"><span class=\"params\">vChild</span> =&gt;</span> &#123;</span><br><span class=\"line\">      el.appendChild(vChild.render())</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> el</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建虚拟dom节点的简便函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;标签名&#125; tag </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;子标签&#125; children </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;文本值&#125; text </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">v</span>(<span class=\"params\">tag, children, text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//如果没有tag,第二个参数是字符串的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> children === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">    text = children</span><br><span class=\"line\">    children = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> VNode(tag, children, text)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ES5的写法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*&#125; tag </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*&#125; children </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*&#125; text </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vNode</span>(<span class=\"params\">tag, children, text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tag = tag</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = children</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.text = text</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vNode.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tag === <span class=\"string\">'#text'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createTextNode(<span class=\"keyword\">this</span>.text)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"keyword\">this</span>.tag)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children.forEach(<span class=\"function\"><span class=\"params\">vChild</span> =&gt;</span> &#123;</span><br><span class=\"line\">    el.appendChild(vChild.render())</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> el</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//举例说明</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> vNode1 = v(<span class=\"string\">'div'</span>, [</span><br><span class=\"line\">  v(<span class=\"string\">'p'</span>, [</span><br><span class=\"line\">    v(<span class=\"string\">'span'</span>, [v(<span class=\"string\">'#text'</span>, <span class=\"string\">'wushao.xyz'</span>)])</span><br><span class=\"line\">  ]),</span><br><span class=\"line\">  v(<span class=\"string\">'span'</span>, [</span><br><span class=\"line\">    v(<span class=\"string\">'#text'</span>, <span class=\"string\">'wushao.com'</span>)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vNode1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#root'</span>)</span><br><span class=\"line\">root.appendChild(vNode1.render()) <span class=\"comment\">//把虚拟的dom映射进了真实的dom结构里面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vNode2 = v(<span class=\"string\">'div'</span>, [</span><br><span class=\"line\">  v(<span class=\"string\">'p'</span>, [</span><br><span class=\"line\">    v(<span class=\"string\">'span'</span>, [v(<span class=\"string\">'#text'</span>, <span class=\"string\">'wushao.xyz'</span>)])</span><br><span class=\"line\">  ]),</span><br><span class=\"line\">  v(<span class=\"string\">'span'</span>, [</span><br><span class=\"line\">    v(<span class=\"string\">'#text'</span>, <span class=\"string\">'wushao.com'</span>)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\">  v(<span class=\"string\">'span'</span>, [</span><br><span class=\"line\">    v(<span class=\"string\">'#text'</span>, <span class=\"string\">'wushao'</span>)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#change'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  root.innerHTML = <span class=\"string\">''</span></span><br><span class=\"line\">  root.appendChild(vNode2.render())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较前后两个节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;要比较的DOM结构&#125; parent </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;旧的节点&#125; newVNode </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*新的节点 oldNode </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;索引&#125; index </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">patchElement</span>(<span class=\"params\">parent, newVNode, oldNode, index = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!oldNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//新增元素</span></span><br><span class=\"line\">    parent.appendChild(newVNode.render())</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!newVNode) &#123;</span><br><span class=\"line\">    parent.removeChild(parent.childNodes[index])</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newVNode.tag !== oldNode.tag || newVNode.text != oldNode.text)&#123;</span><br><span class=\"line\">    parent.replaceChild(newVNode.render(), parent.childNodes[index])</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; newVNode.children.length || i &lt; oldNode.children.length; i++) &#123;</span><br><span class=\"line\">      patchElement(parent.childNodes[index], newVNode.children[i], oldNode.children[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可以在HTML中直接测试\"><a href=\"#可以在HTML中直接测试\" class=\"headerlink\" title=\"可以在HTML中直接测试\"></a>可以在<code>HTML</code>中直接测试</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>虚拟DOM<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"change\"</span>&gt;</span>change<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./v-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["Vue的学习"],"tags":["Vue"]},{"title":"SEO不完全指北","url":"https://codevvvv9.github.io/2018/09/02/SEO不完全指北/","content":"<p>这个周末学习了一下关于把个人站点进行SEO的初级操作，觉得很有意思，以此文记录一下，如果你也使用<code>HEXO</code>那将会有帮助。</p>\n<blockquote>\n<p><code>SEO</code>指 <code>Search Engine Optimization</code>，意指搜索引擎优化的意思，通过必要的网站结构的设计让<code>spider</code>机器人爬取有用的数据，提高网站在搜索时的排名与在相关领域的权重。</p>\n</blockquote>\n<h3 id=\"百度站长\"><a href=\"#百度站长\" class=\"headerlink\" title=\"百度站长\"></a>百度站长</h3><p>国内的话，首推<a href=\"https://ziyuan.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度站长</a>，前提是你要有自已 的域名了。<a id=\"more\"></a></p>\n<h4 id=\"添加站点\"><a href=\"#添加站点\" class=\"headerlink\" title=\"添加站点\"></a>添加站点</h4><p>按照下图操作</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-9-2/21158660.jpg\" alt=\"百度添加网站\"></p>\n<p>前面两部基本没问题，注意一下第三步的操作：</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-9-2/71723786.jpg\" alt=\"第三步验证操作\"></p>\n<ul>\n<li>通常选择文件验证和CNAME验证，我选择的是文件验证，这里要把百度的验证文件放到你的域名的根目录下，具体的在这里指：<code>source</code>目录下，要注意如果是html文件要使用如下代码处理，防止后续部署时把html文件给处理了。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: false</span><br><span class=\"line\">---</span><br><span class=\"line\">FZKjy3o3f6 //你的验证文件的内容，显然百度分配给每个人都不一样</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加站点地图\"><a href=\"#添加站点地图\" class=\"headerlink\" title=\"添加站点地图\"></a>添加站点地图</h4><ol>\n<li>首先安装两个插件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save     </span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改项目根目录下的<code>_config.yml</code> 的URL</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">url: http:<span class=\"comment\">//wushao.xyz //你的个人站点的名字</span></span><br><span class=\"line\">root: <span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">permalink: :year/</span>:month/:day/:title/ <span class=\"comment\">//这里将会在后续的URL持久化章中优化</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>进行如下代码的部署，在根目录下的<code>public</code>目录生成<code>sitemap.xml</code> 和 <code>baidusitemap.xml</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d <span class=\"comment\">//相当于hexo generate 然后 hexo deploy</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>把上面生成的<code>sitemap.xml</code>提交给百度，按照第一章的做法把站点添加到百度后，按照下图的方式提交</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-9-2/81973081.jpg\" alt=\"链接提交\"></p>\n<p> 这里有两种方式提交，很明显选择自动提交——主动推送的方式，注意这里的<code>token</code>，很重要</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-9-2/21550135.jpg\" alt=\"主动提交方式\"></p>\n<p>使用如下代码完成主动推送</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//1.先安装插件</span></span><br><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-baidu-url-submit</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"><span class=\"string\">//2.在根目录下的_config.yml</span> <span class=\"string\">添加baidu_url_submit属性</span></span><br><span class=\"line\"><span class=\"attr\">baidu_url_submit:</span></span><br><span class=\"line\"><span class=\"attr\">  count:</span> <span class=\"number\">100</span> <span class=\"comment\"># 提交最新的一个链接,最新的100个链接，想写几个写几个</span></span><br><span class=\"line\"><span class=\"attr\">  host:</span> <span class=\"string\">wushao.xyz</span> <span class=\"comment\"># 在百度站长平台中注册的域名</span></span><br><span class=\"line\"><span class=\"attr\">  token:</span>  <span class=\"comment\"># 请注意这是您的秘钥，就是上图模糊处理的那个所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">baidu_urls.txt</span> <span class=\"comment\"># 文本文档的地址， 新链接会保存在public目录下</span></span><br><span class=\"line\"><span class=\"string\">//3.修改根目录下的_config.yml</span> <span class=\"string\">的deploy属性,注意有两个deploy时的格式！！！</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span></span><br><span class=\"line\"><span class=\"attr\">        github:</span> <span class=\"string\">你的github</span></span><br><span class=\"line\"><span class=\"attr\">        coding:</span> <span class=\"string\">你的coding</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>\n<p>下面介绍几个优化爬取的方法</p>\n<hr>\n<h4 id=\"添加robots-txt\"><a href=\"#添加robots-txt\" class=\"headerlink\" title=\"添加robots.txt\"></a>添加<code>robots.txt</code></h4><p>这里是为了告诉搜索引擎哪些可以爬取哪些不可以爬取，在<code>source</code>目录下添加<code>robots.txt</code>，文本内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">User-agent:</span> <span class=\"string\">*</span></span><br><span class=\"line\"><span class=\"attr\">Allow:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">Allow:</span> <span class=\"string\">/archives/</span></span><br><span class=\"line\"><span class=\"attr\">Allow:</span> <span class=\"string\">/categories/</span></span><br><span class=\"line\"><span class=\"attr\">Allow:</span> <span class=\"string\">/tags/</span></span><br><span class=\"line\"><span class=\"attr\">Allow:</span> <span class=\"string\">/posts/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Disallow:</span> <span class=\"string\">/vendors/</span></span><br><span class=\"line\"><span class=\"attr\">Disallow:</span> <span class=\"string\">/js/</span></span><br><span class=\"line\"><span class=\"attr\">Disallow:</span> <span class=\"string\">/css/</span></span><br><span class=\"line\"><span class=\"attr\">Disallow:</span> <span class=\"string\">/fonts/</span></span><br><span class=\"line\"><span class=\"attr\">Disallow:</span> <span class=\"string\">/vendors/</span></span><br><span class=\"line\"><span class=\"attr\">Disallow:</span> <span class=\"string\">/fancybox/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Sitemap:</span> <span class=\"attr\">https://你的站点/sitemap.xml</span> <span class=\"string\">//</span></span><br><span class=\"line\"><span class=\"attr\">Sitemap:</span> <span class=\"attr\">https://你的站点/baidusitemap.xml</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-9-2/8846523.jpg\" alt=\"robots.txt内容\"></p>\n<h4 id=\"Url持久化\"><a href=\"#Url持久化\" class=\"headerlink\" title=\"Url持久化\"></a><code>Url</code>持久化</h4><p>还记的<code>_config.yml</code>里面关于<code>url</code>的描述嘛。<code>permalink</code>属性中的<code>/</code>决定了你的<code>url</code>有几级，通常引擎只会爬取三层，而且对于汉字的处理不完美，可是你的文章名字难免会有汉字，所以这里要进行必要的转化。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># # URL</span></span><br><span class=\"line\"><span class=\"comment\"># ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">你的站点名字</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span> <span class=\"string\">//优化处</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>借助<a href=\"https://github.com/rozbo/hexo-abbrlink\" target=\"_blank\" rel=\"noopener\">hexo-abbrlink</a>插件，感谢大神的插件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-abbrlink</span> <span class=\"bullet\">--save</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">Modify</span> <span class=\"string\">permalink</span> <span class=\"string\">in</span> <span class=\"string\">config.yml</span> <span class=\"attr\">file:</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:abbrlink/</span></span><br><span class=\"line\"><span class=\"comment\"># abbrlink config</span></span><br><span class=\"line\"><span class=\"attr\">abbrlink:</span></span><br><span class=\"line\"><span class=\"attr\">  alg:</span> <span class=\"string\">crc32</span>  <span class=\"comment\">#support crc16(default) and crc32</span></span><br><span class=\"line\"><span class=\"attr\">  rep:</span> <span class=\"string\">hex</span>    <span class=\"comment\">#support dec(default) and hex</span></span><br><span class=\"line\"><span class=\"string\">//部署完之后所有的url如下所示</span></span><br><span class=\"line\"><span class=\"attr\">http:</span><span class=\"string\">//wushao.xyz/posts/6ed52419.html</span> <span class=\"string\">//6ed52419这个就代表你原来的名字</span></span><br><span class=\"line\"><span class=\"attr\">http:</span><span class=\"string\">//wushao.xyz/posts/7a43570f.html</span></span><br><span class=\"line\"><span class=\"attr\">http:</span><span class=\"string\">//wushao.xyz/posts/7b3b172b.html</span></span><br><span class=\"line\"><span class=\"attr\">http:</span><span class=\"string\">//wushao.xyz/posts/77ac3545.html</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>此时你会发现你以前的的文章标题会有变化</li>\n</ul>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-9-2/83087096.jpg\" alt=\"\"></p>\n<h3 id=\"Google站长\"><a href=\"#Google站长\" class=\"headerlink\" title=\"Google站长\"></a><code>Google</code>站长</h3><p><code>Google</code>的方便多了，直接<a href=\"https://www.google.com/webmasters/#?modal_active=none\" target=\"_blank\" rel=\"noopener\">google站长</a>，然后进<code>Search console</code>,添加属性就是添加个人站点的意思，后续步骤和上面一样，但是收录的速度快多了。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-9-2/53903614.jpg\" alt=\"Search console\"></p>\n","categories":["前端之外"],"tags":["SEO"]},{"title":"最强的团队","url":"https://codevvvv9.github.io/2018/08/31/最强的团队/","content":"<h3 id=\"所在的团队\"><a href=\"#所在的团队\" class=\"headerlink\" title=\"所在的团队\"></a>所在的团队</h3><p>入职已经有一个半月了，目前的团队氛围对于我这个新人来说，就一句话<strong>如鱼得水</strong>，感谢机缘，能让我在转行的第一份工作中遇见这个团队，而我也会为了这个团队努力工作，让前端的大旗迎风飞扬。<a id=\"more\"></a></p>\n<p>团队组成由4个java后端、1个Python后端、3个前端、1个架构师。</p>\n<ul>\n<li>java四人组构成：3个主力web服务，使用sprintboot等先进技术， 1个使用各种大数据技术的java小头目。Python后端主要负责系统的基础架构，比较高深。</li>\n<li>Python大牛是南京土著，开车贼梦，公认的飙车王，宽高比几乎相同，哈哈，当然了，很nice的队友，给我普及了很多南京的知识，同时多线支持南京的机器学习计算平台的开发，强！！！</li>\n<li>接下来重点介绍前端阵容，前端项目毫无疑问使用Vue全家桶技术，由两位女生和我组成，两位女生和我年纪一样，但是我读研期间人家已经夯实好了前端技术，她俩人都超级好，总是结伴讨论问题，对我的vue提升帮助很大，尤其是小leader——玥之魔法师，她炒鸡耐心，总结：炒鸡nice的小组织。</li>\n<li>架构师是从业10多年的大牛，虽然不懂前端，所以就由玥之魔法师组织，但是他的宏观把握力、带队能力、沟通写作、各个部门协调资源、做人做事的风格，让我叹为观止，原来程序员也可以这么风趣幽默，给团队成员极大的自由空间，后面我将重点讲讲大佬的故事。</li>\n</ul>\n<p>说实话，以我目前的能力来说，遇到这么一个团队，对于刚转行过来的人来说，有幸也有不幸。幸的是：有充足的时间去丰富自己的js技能，打磨我的vue技能，极大的空间去发掘潜力，不幸的是：没有紧迫的互联网急速迭代的产品，客户都是固定的。不过后来也想通了，当下选择的就是最棒的，坦然接受这个角色，做好自己，很怕自己又折在好高骛远的毛病上。18年的上半年，浪费了很多时间，导致自己在算法数据结构、计算机网络的学习上欠缺了相当多，这是后期要与js一起恶补的方向。</p>\n<p>这段时间的总结和未来正如我的slogan一样，道阻且长，以梦为马，不忘初心。👊</p>\n<h3 id=\"学会解放生产力\"><a href=\"#学会解放生产力\" class=\"headerlink\" title=\"学会解放生产力\"></a>学会解放生产力</h3><p>还记得我前面说的大佬吗，他在工作两年时就已经带领一个8人团队做出一番大事了，他也鼓励我们在工作到2-3年时要刻意的去培养管理的技能与意识，而不仅仅是敲代码。</p>\n<h4 id=\"善假于物也\"><a href=\"#善假于物也\" class=\"headerlink\" title=\"善假于物也\"></a>善假于物也</h4><ol>\n<li>使用<strong>jira</strong>。大佬鼓励我们使用jira进行项目的各个任务的分解，同时进行任务流的分解，不同的任务流分配不同的时间比如3w，2h，1d，让整个团队看到各自的时间分配与做的东西，这不就是各大畅销书提倡的时间管理技巧嘛，例如西红柿时间管理法、四象限时间管理法，从来没有想到在程序员生涯中会用到这些，我以为就是坐那敲代码，调bug而已。可能其他大厂也都用的各种管理技巧，可能比我们的很高级，但是我的体会是：入行以后就要专业，你要体现出你是专业的，不是学校、或者二流程序员做事的风格，你要有一个专业的做事风格，告诉别人，我是一流的技术人员，所以团队的第一天就这么要求，真的对我的职业生涯有很大的帮助与启发。</li>\n<li>及时提出帮助。大佬每日早晨给我们开会，他使用邮件做了一个定时发送，他起的名字是 “每日站会”，每天早晨傍晚都会收到它。这个定时事件流或者会议的功能，早就有了，但是从来没用过的团队大有人在，工具就摆在那里，不会用或者不擅于利用，这真是极大的浪费啊。我们站会的精髓是：“昨天做了什么，今天做什么，需要什么帮助”，我最大的体会是第三点——需要什么帮助。人，都有一个毛病，觉得自己很牛，多花点时间总会搞出来，后来人类总结了一个成语叫自以为是，尤其在技术人员中，这一点尤甚，工作几年后，技术有了进步，就一头扎进代码，出不来了，明明可以请教一下就解决了，非要自己研究，导致莫名的加班，假如此时，你及时向上级请求这个帮助，提高了处理效率，还能节省时间研究其他的东西，真实的代码产出率也会上升。当然上述的问题是指浅层次的疑难问题，像复杂的业务逻辑、源码分析，还是要自己深入理解，花很大气力的，至于上述的及时提出帮助具体指什么，聪明人读到这里应该已经懂了。所以如果没有懂，具体场景具体分析也应该作为一项必备技能。大佬的这个要求每天都会让我反思，我是否可以借别人的帮助，一起解决问题，提高协作能力。</li>\n</ol>\n<p>上述的两点可以简单的归纳为一句：善假于物也，古人的大智慧历久弥新啊。</p>\n<blockquote>\n<p>君子生非异也，善假于物也。</p>\n</blockquote>\n<h4 id=\"集腋成裘\"><a href=\"#集腋成裘\" class=\"headerlink\" title=\"集腋成裘\"></a>集腋成裘</h4><p>提早规避错误，每日提交代码，使用git管理代码，这就引出了持续集成——<strong>CI</strong>的概念，我们前端每日凌晨4点自动bulid,通过后才会打包一个包，如果当前节点有问题，及时修改，不至于到了后期，一整合，发现错误时已经尾大不掉，无法及时有效定位错误了，即使能定位，也会花费大量时间在测试上，以上我对持续集成的简单理解。</p>\n<p>具体执行起来使用<strong><a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"noopener\">Jenkins</a></strong>。这又是一个大话题了，后期会继续深入。</p>\n","categories":["三省吾身"],"tags":["think"]},{"title":"工作小结-1","url":"https://codevvvv9.github.io/2018/08/28/工作小结-1/","content":"<h2 id=\"scrollTop的兼容性问题\"><a href=\"#scrollTop的兼容性问题\" class=\"headerlink\" title=\"scrollTop的兼容性问题\"></a>scrollTop的兼容性问题</h2><p>在做移动端布局时，监控touchmove事件经常会使用<strong>scrollTop</strong>来模拟页面的滑动距离，但是</p>\n<ul>\n<li>仅仅使用document.body.scrollTop来进行滑动距离的判断，会失效 <a id=\"more\"></a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.body.scrollTop &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'滑动距离大于100像素'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isShow = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'滑动距离小于100像素'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isShow = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-8-28/24266651.jpg\" alt=\"\"></p>\n<p>此时应该考虑兼容性，不应该去监听body的滚动距离，而应该去监听html元素的滚动距离</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> scrollTop = <span class=\"built_in\">document</span>.body.scrollTop || <span class=\"built_in\">document</span>.documentElement.scrollTop</span><br><span class=\"line\"><span class=\"keyword\">if</span> (scrollTop &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'滑动距离大于100像素'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isShow = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'滑动距离小于100像素'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isShow = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-8-28/43484629.jpg\" alt=\"\"></p>\n<p>上图才是正确的结果，当滚动距离大于100像素时，出现回到顶部的按钮。</p>\n<h3 id=\"事件戳的转化问题\"><a href=\"#事件戳的转化问题\" class=\"headerlink\" title=\"事件戳的转化问题\"></a>事件戳的转化问题</h3><h3 id=\"URL里的token分析\"><a href=\"#URL里的token分析\" class=\"headerlink\" title=\"URL里的token分析\"></a>URL里的token分析</h3><p>为了web安全考虑一般在路径里面后端会传入一个token来标识用户，防止反复攻击，例如<strong><a href=\"http://10.20.20.109/?nuctoken=111#/\" target=\"_blank\" rel=\"noopener\">http://10.20.20.109/?nuctoken=111#/</a></strong>，只有带有nuctoken才会访问到正确的页面，如果没有就会显示errorpage</p>\n<h3 id=\"i18n在vue中的使用\"><a href=\"#i18n在vue中的使用\" class=\"headerlink\" title=\"i18n在vue中的使用\"></a>i18n在vue中的使用</h3><p>为了扩展字符的国际化语言，使用i18n，在vue中单独把汉字字端放到一个cn.js文件中，相当于一个字典。</p>\n<p>使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$t(<span class=\"string\">'字典中某个字段的名字'</span>)</span><br></pre></td></tr></table></figure>\n","categories":["三省吾身"],"tags":["think"]},{"title":"Vue的组件间通信","url":"https://codevvvv9.github.io/2018/05/07/Vue的组件间通信/","content":"<p>组件是插槽式的，例如某个页面有两个组件，其中搜索作为其中一个组件，当它作为组件的时候，它作为子组件的时候需要把参数通过属性的方式传递进来，通知父组件的时候通过触发事件来进行通信。</p>\n<p>以上是组件化的简单描述，与模块化的组要区别在于组件化课深度定制不同的属性，借助父组件的参数值。</p>\n<p>那么问题来了，组件间如何进行通信呢？<a id=\"more\"></a></p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><p>最经典的通信方式就是：父组件与子组件之间进行通信。</p>\n<h3 id=\"组件的基本写法\"><a href=\"#组件的基本写法\" class=\"headerlink\" title=\"组件的基本写法\"></a>组件的基本写法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'shareLink'</span>, &#123;</span><br><span class=\"line\">  data() &#123;&#125;,</span><br><span class=\"line\">  props: [<span class=\"string\">'shareLink'</span>],</span><br><span class=\"line\">  methods: &#123;&#125;,</span><br><span class=\"line\">  template: <span class=\"string\">``</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上述的代码就创建了一个名为<code>shareLink</code>的组件，并且可传递一个名为<code>shareLink</code>的参数值。</p>\n<p>但是注意：</p>\n<ul>\n<li>HTML的规范规定，标签名与属性名都必须是小写字母，所以上述的组件在HTML代码里面默认写成<code>share-link</code></li>\n<li>组件里面的<code>data</code>必须是函数，而不是app.js中的对象写法。</li>\n</ul>\n<p>具体一点的写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'share'</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'shareLink'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"share\" v-cloak&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        请将下面链接分享给面试官</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;textarea readonly&gt;&#123;&#123;shareLink&#125;&#125;&lt;/textarea&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中<code>props</code>中是参数的名字，接受别的组件传递的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;share v-bind:share-link=<span class=\"string\">\"shareLink\"</span> v-show=<span class=\"string\">\"shareVisible\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">share</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//在html的页面中这样写</span></span><br></pre></td></tr></table></figure>\n<p><code>v-bind</code>将参数的名字绑定上，值是通过app.js获得的shareLink</p>\n<h3 id=\"简单的对应规则\"><a href=\"#简单的对应规则\" class=\"headerlink\" title=\"简单的对应规则\"></a>简单的对应规则</h3><table>\n<thead>\n<tr>\n<th>v-bind</th>\n<th>:share-link</th>\n<th>= “shareLink”</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>对应的</td>\n<td>props: [‘shareLink’]</td>\n<td>app.js中{shareLink: ‘ ‘}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h3><ol>\n<li>子组件想改父组件的<code>data</code>。例如登录后的关闭按钮无用的例子。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">login</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loginVisible\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span> </span><br><span class=\"line\">//这是父组件的写法，loginVisible是父组件的变量,很明显儿子无法修改爸爸的数据啊</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>但是儿子特别像修改爸爸的数据</li>\n<li>那么唯一的解决方案就是叫爸爸去修改</li>\n</ol>\n<p>解决方案：</p>\n<ol>\n<li>子组件通过事件告诉爸爸，我需要你做一些改变。</li>\n</ol>\n<p><code>@click=&quot;$emit(&#39;close&#39;)&quot;</code></p>\n<ul>\n<li>注意：在<code>methods</code>中需要使用<code>this.$emit(&#39;&#39;)</code>，但是在<code>@click</code>中不需要用<code>this</code></li>\n</ul>\n<ol start=\"2\">\n<li>那么爸爸根据儿子的需要做出如下改变</li>\n</ol>\n<p><code>&lt;login v-show=&quot;loginVisible&quot; @close=&quot;loginVisible = false&quot;&gt;</code></p>\n<p><code>@close</code>等同于<code>v-on:close</code></p>\n<p>父子组件通信的demo<a href=\"http://jsbin.com/logoyoqema/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-5-7/17176263.jpg\" alt=\"父子组件通信图示\"></p>\n<h2 id=\"爷孙组件间的通信\"><a href=\"#爷孙组件间的通信\" class=\"headerlink\" title=\"爷孙组件间的通信\"></a>爷孙组件间的通信</h2><h3 id=\"需求分析-1\"><a href=\"#需求分析-1\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h3><ol>\n<li>爷爷看不到孙子在哪里</li>\n<li>但是呢，爷爷就是想控制孙子</li>\n<li>所以呢，借助爸爸来间接的去控制孙子就好啦</li>\n</ol>\n<p>本质上Vue只有父子间通信，<strong>爷孙间通信需要使用两次父子间通信</strong>。</p>\n<h3 id=\"爷爷只控制孙子\"><a href=\"#爷爷只控制孙子\" class=\"headerlink\" title=\"爷爷只控制孙子\"></a>爷爷只控制孙子</h3><p>该版本中爷爷只能控制孙子的显示，但是目前孙子无法反向操作爷爷。</p>\n<p>demo的<a href=\"http://jsbin.com/xiyoyubita/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h3 id=\"孙子逐级冒泡通知爷爷\"><a href=\"#孙子逐级冒泡通知爷爷\" class=\"headerlink\" title=\"孙子逐级冒泡通知爷爷\"></a>孙子逐级冒泡通知爷爷</h3><p>孙子先冒泡到爸爸那里，使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'visible'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      我是儿子</span></span><br><span class=\"line\"><span class=\"string\">      &lt;grand-child v-show=\"visible\" @close=\"$emit('close')\"&gt;&lt;/grand-child&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.component(<span class=\"string\">'grandChild'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      我是孙子</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button @click=\"$emit('close')\"&gt;关闭&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>爷爷那里就可以监听到孙子的动作了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;button @click=\"xxx = true\"&gt;打开&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;child :visible=<span class=\"string\">\"xxx\"</span> @close=<span class=\"string\">\"log\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt; </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://jsbin.com/xiyoyubita/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo的链接</a></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-5-7/87537231.jpg\" alt=\"爷孙间的通信图示\"></p>\n","categories":["Vue的学习"],"tags":["Vue"]},{"title":"初级前端打怪升级之路","url":"https://codevvvv9.github.io/2018/03/30/初级前端打怪升级之路/","content":"<p>如何自学前端，以及应该学习的顺序……自己想了下，总结一下</p>\n<p><strong>仅代表初级前端能找到一份养家糊口的工作，至少需要一年多的理解，如果有过其他编程基础，可能需要8个月吧。</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"零基础的学习计划\"><a href=\"#零基础的学习计划\" class=\"headerlink\" title=\"零基础的学习计划\"></a>零基础的学习计划</h3><ol>\n<li>安装vscode 先学 html 5，用MDN文档去学，废弃的属性不需要去看，大跨步的前进，xhtml的那些东西不需要去学了，记住MDN文档里面写的那些新属性，这些是以后面试时经常问的问题。学习是着重注意html 5语义化的含义，体会下。</li>\n<li>接着学习 CSS 3，对于新的属性格外注意，各种特殊情况包括各种居中怎们做，花点时间，记住吧，这个css要多敲代码，看的再多也没用。css是区分优秀前端和其他兼职前端的分界线。</li>\n<li>此时模仿你喜欢的网站做点静态页面。</li>\n<li>继续学习ES 5，这是javascript基础知识，此时进入前端的瓶颈了，多花点时间理解吧，例如函数、闭包、this、作用域、原型链重点理解。</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-3-30/68367727.jpg\" alt=\"img\"></p>\n<h3 id=\"精进的计划\"><a href=\"#精进的计划\" class=\"headerlink\" title=\"精进的计划\"></a>精进的计划</h3><ol>\n<li>学点MVC思想与面向对象的基础知识，方便后面的jq的理解。</li>\n<li>学习ajax，引出跨域的概念，以及破解跨域的另一个解决方案JSONP，学习主流的数据交换格式JSON。</li>\n<li>进军jquery与bootstrap。jq是第一个你需要接触的框架，减少很多代码量，提升自信心。bootstrap的思想值得细细品味。</li>\n<li>此时有了前端基础和框架，做一个一个完整的项目吧。学会前端工程化的目录结构。</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-3-30/73671415.jpg\" alt=\"img\"></p>\n<hr>\n<p>以上算是前端的小小入门。接下来是升华阶段。</p>\n<h3 id=\"升华阶段\"><a href=\"#升华阶段\" class=\"headerlink\" title=\"升华阶段\"></a>升华阶段</h3><ol>\n<li>补充http的知识，cookie、session、localstorage、sessionstorage。学习缓存机制以及持久化化存储。</li>\n<li>学习从MVC到MVVM的转换，目前主流的都是MVVM。学习axios库替换jq去操作ajax。</li>\n<li>学习ES 6,这是现在主流框架以及工作要用到的js规范。</li>\n<li>学习前端自动打包器-webpack不用学其他的了，其他的都淘汰了！！！！</li>\n<li>安装webstorm，学习Vue，以及它的全家桶系列。不要学angular，初学者千万不要学它，也不用先学typescript。</li>\n<li>做一个基于Vue全家桶的项目。</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-3-30/82209459.jpg\" alt=\"img\"></p>\n<p>以上是现代化前端必备的知识体系！！！</p>\n<hr>\n<p>注：锦上添花的是学会react以及小程序开发～，这一步不是必备的</p>\n<p>未来一年努力夯实基础知识，争取早日到达中级前端！！！！！！！！！</p>\n","categories":["前端之外"],"tags":["Dev"]},{"title":"前端必备网站","url":"https://codevvvv9.github.io/2018/03/29/前端必备网站/","content":"<p>弃一些花里胡哨的没个卵用的网站，关注下面的网站，绝对不会让你们失望了，坚持使用3个月以上，学不好前端，你们来砍我~</p>\n<p>在自学前端的道路上，关注下面的网站，绝对不会让你们失望了，坚持使用3个月以上，学不好前端，你们来砍我~</p>\n<p>配上<strong>英语</strong>，学的更好哦~</p>\n<a id=\"more\"></a>\n<h3 id=\"必备的文档类的网站\"><a href=\"#必备的文档类的网站\" class=\"headerlink\" title=\"必备的文档类的网站\"></a>必备的文档类的网站</h3><ul>\n<li><strong>MDN web文档</strong></li>\n</ul>\n<p>很权威的文档。有各种详细的使用说明，包括前端但不止于前端，http、ajax都有很深的涉及，示例代码都是各界权威们写的demo，代码清晰、易用；新的标准、废弃的标准、推荐你应该学习的特性，各种官方spec的链接，绝对不会歪曲理解概念；你还可以修改中文的翻译，提出贡献，翻译的的好，可能会有人邀请你工作。当然最好是还是看英文原版的。</p>\n<ul>\n<li>国外的w3scools，看清楚了 链接是这个 <a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener\">https://www.w3schools.com/</a></li>\n</ul>\n<p>错误很少，文档很简洁，还能学习英语，就像科学、音乐不分国界一样，代码同样不分国界，都能看得懂。</p>\n<ul>\n<li>所有的你要用的库、框架的<strong>官方文档</strong> 比如webpack、less、jquery、node-sass、Vue、react、BootStrap等</li>\n</ul>\n<h3 id=\"处理常见的报错和学习新技术经常去的网站\"><a href=\"#处理常见的报错和学习新技术经常去的网站\" class=\"headerlink\" title=\"处理常见的报错和学习新技术经常去的网站\"></a>处理常见的报错和学习新技术经常去的网站</h3><ul>\n<li>Github 与Stack Overflow</li>\n</ul>\n<p>学习各种流行库、框架的时候，会报很多错，可以去github上看对应的issue，一般都有解决方案；去Stack Overflow上搜索也能搜索出来。</p>\n<ul>\n<li>国内的segmentfault 以及 掘金</li>\n</ul>\n<p>segmentfault是立志成为国内的Stack Overflow的，也可以解决一部分问题，挺好用的，掘金上面以技术为主的文章很多，还有面试分享，程序员必须的网站。</p>\n<hr>\n<h3 id=\"专业性的技术网站\"><a href=\"#专业性的技术网站\" class=\"headerlink\" title=\"专业性的技术网站\"></a>专业性的技术网站</h3><ul>\n<li>阮一峰的JS入门教程 <a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/</a> 以及 他的ES6入门 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a></li>\n</ul>\n<p>阮一峰大神是经济学博士，现在在支付宝团队，他学习就是很理智的故事，关注他的博客吧，最前沿的知识都能学到，他也做出了相应的demo。</p>\n<ul>\n<li>廖雪峰的个人网站</li>\n</ul>\n<p>廖雪峰的js教程以及<strong>git教程</strong>很好。</p>\n<ul>\n<li><strong>学习CSS 3</strong>的三个好网站</li>\n</ul>\n<p><strong>css-tricks</strong> <a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/</a> 从CSS3入门到深爱</p>\n<p><strong>codrops </strong><a href=\"https://tympanus.net/codrops/\" target=\"_blank\" rel=\"noopener\">https://tympanus.net/codrops/</a> 颠覆你对CSS3的认识</p>\n<p><strong>codepen</strong> <a href=\"https://codepen.io/\" target=\"_blank\" rel=\"noopener\">https://codepen.io/</a> 各种提升你CSS3内力的demo</p>\n<ul>\n<li>国内CSS第一人<strong>张鑫旭</strong>的博客</li>\n<li><strong>一丝</strong>的博客</li>\n</ul>\n<p>他的关于为什么要清除浮动以及如何清除浮动的文章，完美解释了面试要问的所有问题。</p>\n<ul>\n<li>高逼格的的v2EX</li>\n</ul>\n<hr>\n<h3 id=\"国内的专业前端团队\"><a href=\"#国内的专业前端团队\" class=\"headerlink\" title=\"国内的专业前端团队\"></a>国内的专业前端团队</h3><ul>\n<li><p>淘宝前端 <a href=\"http://taobaofed.org/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/</a></p>\n</li>\n<li><p>腾讯前端团队 <a href=\"http://www.alloyteam.com/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/</a></p>\n</li>\n<li><p>360前端技术团队 <a href=\"https://www.75team.com/\" target=\"_blank\" rel=\"noopener\">https://www.75team.com/</a></p>\n</li>\n<li><p><strong>其他的</strong>前端团队也很猛，可以多去了解</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"通过前端技术大拿的博客-开拓眼界\"><a href=\"#通过前端技术大拿的博客-开拓眼界\" class=\"headerlink\" title=\"通过前端技术大拿的博客 开拓眼界\"></a>通过前端技术大拿的博客 开拓眼界</h3><ul>\n<li>Twitter、weibo上的前端大神啊</li>\n<li>Vue的作者<strong>尤雨溪</strong>、蚂蚁金服<strong>玉伯</strong>、阿里<strong> winte</strong>r、i5ting(<strong>狼叔</strong>，nodejs布道者)、CNode负责人<strong>alsotang</strong>、<strong>寸志</strong>、<strong>大漠</strong>、<strong>死月、小芋头君</strong>等等大神的言论，注意甄别，以上排名不分前后，都是碾压一切的boss,如果大家记得其他的大佬，我忘了的话，欢迎关注我的<a href=\"https://github.com/codevvvv9\" target=\"_blank\" rel=\"noopener\">github</a>，然后怼我……</li>\n</ul>\n","categories":["前端之外"],"tags":["Dev"]},{"title":"云音乐-2","url":"https://codevvvv9.github.io/2018/02/25/云音乐-2/","content":"<h2 id=\"获取歌曲的外链\"><a href=\"#获取歌曲的外链\" class=\"headerlink\" title=\"获取歌曲的外链\"></a>获取歌曲的外链</h2><p>通过七牛的文档说明，先去<a href=\"https://developer.qiniu.com/kodo/sdk/1283/javascript#1\" target=\"_blank\" rel=\"noopener\">js官方文档</a>，然后通过里面的<a href=\"https://github.com/qiniu/js-sdk\" target=\"_blank\" rel=\"noopener\">js源码地址</a>，选择1.0的版本，进入之后，选择<a href=\"http://jssdk.demo.qiniu.io/\" target=\"_blank\" rel=\"noopener\">示例网站</a>，在获得代码里面，可以发现下面代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">'FileUploaded'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">up, file, info</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 每个文件上传成功后,处理相关的事情</span></span><br><span class=\"line\">   <span class=\"comment\">// 其中 info.response 是文件上传成功后，服务端返回的json，形式如</span></span><br><span class=\"line\">   <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//    \"hash\": \"Fh8xVqod2MQ1mocfI4S4KpRL6D98\",</span></span><br><span class=\"line\">   <span class=\"comment\">//    \"key\": \"gogopher.jpg\"</span></span><br><span class=\"line\">   <span class=\"comment\">//  &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">// 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// var domain = up.getOption('domain');</span></span><br><span class=\"line\"> <span class=\"comment\">// var res = parseJSON(info.response);</span></span><br><span class=\"line\"> <span class=\"comment\">// var sourceLink = domain + res.key; 获取上传成功后的文件的Url</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>很明显最后三行与我的目的有关，打开注释，改造成我所需要的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> domain = up.getOption(<span class=\"string\">'domain'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> response = <span class=\"built_in\">JSON</span>.parse(info.response);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourceLink = <span class=\"string\">'http://'</span> + domain + <span class=\"string\">'/'</span> + <span class=\"built_in\">encodeURIComponent</span>(response.key);</span><br></pre></td></tr></table></figure>\n<h3 id=\"几点要注意的\"><a href=\"#几点要注意的\" class=\"headerlink\" title=\"几点要注意的\"></a>几点要注意的</h3><ol>\n<li>response的key就是我拖曳或者上传的歌曲</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-25/25479977.jpg\" alt=\"response.key是啥\"></p>\n<ol start=\"2\">\n<li>为什么要用<code>encodeURIComponent</code></li>\n</ol>\n<p>因为你上传的时候必然会有中文吧，浏览器和服务器端都不会懂你问的这些中文是什么鬼，我们要用URL编码处理一下这个response.key（也就是歌曲的名字），之所以不用<code>encodeURI</code>，是因为它会把一个东西当做一个整体的，如果含有&amp;，还是会把&amp;传给你，而这个很有可能会有歧义。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-25/18569683.jpg\" alt=\"使用了encodeURIComponent\"></p>\n<p>如果我想把带有&amp;的一串东西放到查询参数里面，需要使用encodeURIComponent。</p>\n<h2 id=\"CSS布局以及HTML结构划分\"><a href=\"#CSS布局以及HTML结构划分\" class=\"headerlink\" title=\"CSS布局以及HTML结构划分\"></a>CSS布局以及HTML结构划分</h2><p>初步规划是左边第一栏是new-song，中间是song-list,底部是upload-song，右面是song-form部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;page&gt;</span><br><span class=\"line\">  &lt;aside <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"sidebar\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"newSong\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div id=\"songList-container\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"uploadArea\"</span>&gt;</span><br><span class=\"line\">      &lt;div id=<span class=\"string\">\"uploadContainer\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"draggable\"</span>&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"uploadButton\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"clickable\"</span>&gt;</span><br><span class=\"line\">          &lt;p&gt;点击或者拖曳文件&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;p&gt;文件大小不能超过 40MB&lt;/</span>p&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>aside&gt;</span><br><span class=\"line\">  &lt;main&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>page&gt;</span><br></pre></td></tr></table></figure>\n<p>page区域使用flex布局，是的aside和main区域左右分布，然后aside在使用flex布局并使用flex-direction=column。使之上下排列。</p>\n<h3 id=\"CSS的一些小技巧\"><a href=\"#CSS的一些小技巧\" class=\"headerlink\" title=\"CSS的一些小技巧\"></a>CSS的一些小技巧</h3><ol>\n<li>border: dashed是把阴影虚线化。</li>\n<li>git commit -v查看更改的内容是什么。</li>\n<li>属性选择器  <code>.form input[type=button]</code></li>\n<li>为了实现选中label激活里面的input可能会选择label包裹input的布局，可是存在风险。比如如果label的文字过多，你加了宽度是没有用的，只是会换行而已（显然不是我想看到的），因为label是inline元素，可是改成inline-block又会有bug（一道空隙）。所以只能选择不用label去包裹input了。</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-25/55783109.jpg\" alt=\"对不齐了\"></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-25/40562762.jpg\" alt=\"\"></p>\n<p>优化的代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.form &gt; .row &gt; label&#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: flex-end;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">  width: <span class=\"number\">4</span>em;</span><br><span class=\"line\">  margin-right: <span class=\"number\">5</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.form &gt; .row.actions&#123;</span><br><span class=\"line\">  margin-left: calc(<span class=\"number\">4</span>em + <span class=\"number\">5</span>px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>input的字体应该继承才行，不然字体大小不对。<code>input{font: inherit;}</code></li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-25/75319998.jpg\" alt=\"\"></p>\n<ol start=\"6\">\n<li>背景色是在border里面的，margin上没有背景色</li>\n</ol>\n<h2 id=\"模块化和MVC的设计\"><a href=\"#模块化和MVC的设计\" class=\"headerlink\" title=\"模块化和MVC的设计\"></a>模块化和MVC的设计</h2><p>如果一个模块变化了，如何通知另外的模块我变了呢，最简单的是使用一个全局的js，告诉其他的js，我变了。</p>\n<p>先写一个全局的app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.app = &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在要发起通信的js文件上写上下面的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.app.newSong.active()</span><br><span class=\"line\"><span class=\"built_in\">window</span>.app.songForm.reset()</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">window</span>.app.uploadSong = controller</span><br></pre></td></tr></table></figure>\n<p>也就是说其他的js模块只是往外暴露他们对应的js就可以了。但是这种方式的通信耦合度有点高，不利于后期更改。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-25/98205421.jpg\" alt=\"模块间通信\"></p>\n<p>因为假如3变了要去通知1和4的话，1和4还是知道3的存在，所以不应该让1和4知道3的存在。采取中间环节来转换，那就是发布订阅模式。</p>\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-25/88110527.jpg\" alt=\"发布订阅模式\"></p>\n<p>使用全局的eventHub模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.eventHub = &#123;</span><br><span class=\"line\">  events: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// '遗憾': [fn],</span></span><br><span class=\"line\">    <span class=\"comment\">// '追光者': [],</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 发布</span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;*事件名字&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;*数据&#125; data </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  emit(eventName, data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.events) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(key === eventName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> fnList = <span class=\"keyword\">this</span>.events[key]</span><br><span class=\"line\">        fnList.map(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          fn.call(<span class=\"literal\">undefined</span>, data)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;*订阅的事件名字&#125; eventName </span></span><br><span class=\"line\"><span class=\"comment\">   * @param &#123;*订阅事件之后执行的函数&#125; fn </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  on(eventName, fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events[eventName] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[eventName] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events[eventName].push(fn)    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他模块的js使用的时候就可以使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.eventHub.emit(<span class=\"string\">'upload'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">'url'</span>: sourceLink,</span><br><span class=\"line\">  <span class=\"string\">'name'</span>: response.key</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"几个注意要点\"><a href=\"#几个注意要点\" class=\"headerlink\" title=\"几个注意要点\"></a>几个注意要点</h3><ol>\n<li>ES6的一个特性</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(data = &#123;&#125;) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你传值的时候，没有传值或者传的值是undefined就给你一个空对象。</p>\n<ol start=\"2\">\n<li>省略一点代码</li>\n</ol>\n<p>在view里面写上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$el = $(<span class=\"keyword\">this</span>.el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Vue框架里面V-for出现的必要性</li>\n</ol>\n<p>如果直接用template的话</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"songList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>歌曲233333<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲52222222<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲9<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>歌曲1033<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>很显然这种template很难看，所以使用如下的代码改造。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> view = &#123;</span><br><span class=\"line\">   el: <span class=\"string\">'#songList-container'</span>,</span><br><span class=\"line\">   template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   &lt;ul class=\"songList\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">   &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">   `</span>,</span><br><span class=\"line\">   render(data) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> $el = $(<span class=\"keyword\">this</span>.el)</span><br><span class=\"line\">     $el.html(<span class=\"keyword\">this</span>.template)</span><br><span class=\"line\">     <span class=\"keyword\">let</span> &#123;songs&#125; = data</span><br><span class=\"line\">     <span class=\"keyword\">let</span> liList = songs.map(<span class=\"function\">(<span class=\"params\">song</span>) =&gt;</span> $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>).text(song.name))</span><br><span class=\"line\">     $el.find(<span class=\"string\">'ul'</span>).empty()</span><br><span class=\"line\">     liList.map(<span class=\"function\">(<span class=\"params\">domLi</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       $el.find(<span class=\"string\">'ul'</span>).append(domLi)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<p>而以上的仍然麻烦，所以Vue发明了V-for的语法，不过人家是使用了正则表达式去实现的。</p>\n<p>4.深拷贝与浅拷贝的阴影</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.model.data)</span><br><span class=\"line\"><span class=\"keyword\">let</span> object = <span class=\"built_in\">JSON</span>.parse(string)</span><br><span class=\"line\"><span class=\"comment\">// window.eventHub.emit('create', this.model.data) //一开始用的是这句代码，明显this.model.data会被多次篡改</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.eventHub.emit(<span class=\"string\">'create'</span>, object)</span><br></pre></td></tr></table></figure>\n","categories":["云音乐"],"tags":["jQuery"]},{"title":"云音乐-1","url":"https://codevvvv9.github.io/2018/02/21/云音乐-1/","content":"<blockquote>\n<p>本文是云音乐的需求分析以及基本环境的搭建，主要是LeanCloud和七牛的使用。</p>\n</blockquote>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>先根据<a href=\"https://music.163.com/m/\" target=\"_blank\" rel=\"noopener\">网易云音乐</a>移动端去分析需求，看看有哪些能做的</p>\n<h3 id=\"做啥\"><a href=\"#做啥\" class=\"headerlink\" title=\"做啥\"></a>做啥</h3><p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-20/82573501.jpg\" alt=\"用例图\"></p>\n<p>目前初步分析的需求如上图所示，主要针对两个角色（普通用户和管理员）。</p>\n<a id=\"more\"></a>\n<h3 id=\"用啥\"><a href=\"#用啥\" class=\"headerlink\" title=\"用啥\"></a>用啥</h3><p>在学习阶段主要是学会核心概念、流程、代码，能用原生JS做就用原生JS做，少用库去做事。</p>\n<p>可是到了做项目的时候项目（建立在已经学会了基本的概念与敲了足够的代码量之后），应该采取不同的策略去完成项目，例如选择合适的库、看文档、写demo、copy大神成功的代码。</p>\n<p>所以本项目采用了成熟的jQuery以及LeanCloud、七牛作为后台的数据库。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-20/69890088.jpg\" alt=\"架构图\"></p>\n<h2 id=\"LeanCloud\"><a href=\"#LeanCloud\" class=\"headerlink\" title=\"LeanCloud\"></a>LeanCloud</h2><p>一个简单的数据库(比MySQL都简单，主要是更加形象，能与项目迅速的结合并给我很多正反馈)。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接去看<a href=\"https://leancloud.cn/docs/sdk_setup-js.html#hash1620893804\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存储服务（包括推送和统计）</span></span><br><span class=\"line\">cd 项目目录</span><br><span class=\"line\">npm install leancloud-storage --save</span><br><span class=\"line\"><span class=\"comment\">// 2. 在html里引入av.min.js</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../node_modules/leancloud-storage/dist/av-min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化AV对象\"><a href=\"#初始化AV对象\" class=\"headerlink\" title=\"初始化AV对象\"></a>初始化AV对象</h3><p>我们使用LeanCloud主要是用的这个AV对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> APP_ID = <span class=\"string\">'0ISMRGDfPWtQcP8WktXGADsl-gzGzoHsz'</span>; <span class=\"comment\">//与项目相关</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> APP_KEY = <span class=\"string\">'FKV4IYQNPyB6C5jFBv8vJ7LT'</span>; <span class=\"comment\">//与项目相关</span></span><br><span class=\"line\"></span><br><span class=\"line\">AV.init(&#123;</span><br><span class=\"line\">  appId: APP_ID,</span><br><span class=\"line\">  appKey: APP_KEY</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>写完上述代码可以简单的测试一下是否成功，最简单的就是直接打印<code>console.log(window.AV)</code></p>\n<p>官方推荐如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> TestObject = AV.Object.extend(<span class=\"string\">'TestObject'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> testObject = <span class=\"keyword\">new</span> TestObject();</span><br><span class=\"line\">testObject.save(&#123;</span><br><span class=\"line\">  words: <span class=\"string\">'Hello World!'</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'LeanCloud Rocks!'</span>); <span class=\"comment\">//成功后将在屏幕上弹出这句话\t</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>此时会发现LeanCloud的项目应用下多一个表<code>TestObject</code>,表里面有一个字段是<code>words</code>，值是<code>Hello World!</code></p>\n<p>所以可以推测出这个就是LeanCloud提供给我们生成数据库表以及字段的代码，所以我实际中可以如下使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建数据库，只是本地而已</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> TestObject = AV.Object.extend(<span class=\"string\">'Playlist'</span>); </span><br><span class=\"line\"><span class=\"comment\">//创建一条记录</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> testObject = <span class=\"keyword\">new</span> TestObject(); </span><br><span class=\"line\"><span class=\"comment\">//保存记录，LeanCloud端</span></span><br><span class=\"line\">testObject.save(&#123; </span><br><span class=\"line\">  name: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">  cover: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">  creatorId: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">  description: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">  songs: [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>]</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object</span>) </span>&#123; </span><br><span class=\"line\">\talert(<span class=\"string\">'LeanCloud Rocks!'</span>); </span><br><span class=\"line\">&#125;, () =&gt; &#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>效果如下图所示</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-20/57467194.jpg\" alt=\"LeanCloud的变化\"></p>\n<p>通过上图可以简单的看出LeanCloud可以存储字符串以及数组。</p>\n<p><code>ACL</code>: Access Control Layer</p>\n<p>像MP3等文件只能借助下面的七牛去存储了</p>\n<h2 id=\"七牛\"><a href=\"#七牛\" class=\"headerlink\" title=\"七牛\"></a>七牛</h2><p>这是一个使用云存储的信赖度极高的工具。</p>\n<p>毫无疑问的，先要看<a href=\"https://developer.qiniu.com/kodo/sdk/1283/javascript\" target=\"_blank\" rel=\"noopener\">文档</a>安装</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>目前有1.X和2.X版本，可以预料到版本的问题有可能会产生bug.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install qiniu-js</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../node_modules/qiniu-js/dist/qiniu.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>通过sctipt标签引入该文件，会在全局生成名为 <code>qiniu</code> 的对象(2.X版本的)，而这个对象会为后面的上传文件埋下致命的bug。</p>\n<p>可以通过简单的<code>console.log(qiniu)</code>，验证是否成功。</p>\n<p>可以看一下，七牛的<a href=\"http://jssdk.demo.qiniu.io/\" target=\"_blank\" rel=\"noopener\">用例</a></p>\n<h3 id=\"一个小bug\"><a href=\"#一个小bug\" class=\"headerlink\" title=\"一个小bug\"></a>一个小bug</h3><p>在后面的plupload的时候会报错，很奇怪。后来看七牛的用例的源码，在人家的<code>qiniu.min.js</code>的里面发现的<code>Qiniu</code>,而我的没有，所以猜测七牛用例使用的是1.x版本，果断通过更改版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"leancloud-storage\"</span>: <span class=\"string\">\"^3.6.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qiniu-js\"</span>: <span class=\"string\">\"^1.0.2\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"comment\">//修改完package.json</span></span><br><span class=\"line\"> npm i</span><br></pre></td></tr></table></figure>\n<h3 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h3><p>在页面中引入qiniu.min.js后，初始化uploader，在这之前需要安装plupload,而安装这个有需要安装moxie。</p>\n<p>plupload直接通过npm就可以了，而这个moxie需要去github下载源码自己导入。</p>\n<hr>\n<h3 id=\"服务端准备\"><a href=\"#服务端准备\" class=\"headerlink\" title=\"服务端准备\"></a>服务端准备</h3><blockquote>\n<p>本 SDK 依赖服务端颁发的上传凭证，可以通过以下二种方式实现：</p>\n<ul>\n<li>利用七牛服务端 SDK 构建后端服务</li>\n<li>利用七牛底层 API 构建服务，详见七牛<a href=\"https://developer.qiniu.com/kodo/manual/put-policy\" target=\"_blank\" rel=\"noopener\">上传策略</a>和<a href=\"https://developer.qiniu.com/kodo/manual/upload-token\" target=\"_blank\" rel=\"noopener\">上传凭证</a></li>\n</ul>\n<p>后端服务应提供一个 URL 地址，供 SDK 初始化使用，前端通过 Ajax 请求该地址后获得 upToken。 Ajax 请求成功后，服务端应返回json</p>\n</blockquote>\n<p>如上是七牛为了安全性考虑的，必须获得一个token。所以我选择使用node做一个假的服务端，来获取token.</p>\n<h3 id=\"nodejsServer\"><a href=\"#nodejsServer\" class=\"headerlink\" title=\"nodejsServer\"></a>nodejsServer</h3><p>惯例使用七牛的<a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\" rel=\"noopener\">nodejs文档</a></p>\n<p>先安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install qiniu</span><br></pre></td></tr></table></figure>\n<p>在<code>server.js</code>里面简单的构建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (path === <span class=\"string\">'/uptoken'</span>) &#123;</span><br><span class=\"line\">    response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/json;charset=utf-8'</span>)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'*'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义好其中鉴权对象mac：</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> config = fs.readFileSync(<span class=\"string\">'./qiniu-key.json'</span>) <span class=\"comment\">//真正的accessKey, secretKey在这里</span></span><br><span class=\"line\">    config = <span class=\"built_in\">JSON</span>.parse(config)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;accessKey, secretKey&#125; = config</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mac = <span class=\"keyword\">new</span> qiniu.auth.digest.Mac(accessKey, secretKey);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//简单上传的凭证</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">      scope: <span class=\"string\">\"163-music-demo-1\"</span>, <span class=\"comment\">//应用的名字</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> putPolicy = <span class=\"keyword\">new</span> qiniu.rs.PutPolicy(options);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uploadToken=putPolicy.uploadToken(mac);</span><br><span class=\"line\">    response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      \"uptoken\": \"<span class=\"subst\">$&#123;uploadToken&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>做好这个工作之后，uploader可以工作了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uploader = Qiniu.uploader(&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tuptoken_url: <span class=\"string\">'http://localhost:8888/uptoken'</span>, </span><br><span class=\"line\">\t<span class=\"comment\">//只需要注意这一句，其他代码抄文档。以后每次先开一个node server.js 8888</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>至此所有的代码，可以看这个<a href=\"https://github.com/codevvvv9/163-music-demo-1/tree/d21fefc6ab09f50393df99de210b9a7ed3eddf58\" target=\"_blank\" rel=\"noopener\">版本</a></p>\n<p>既然支持拖曳上传和普通上传，需要做一些简单的css样式的修改以及html的改动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;&#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#container</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding: 50px 80px;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">border</span>: 2<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">dashed</span> <span class=\"selector-id\">#ddd</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  border-radius: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">  display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">  justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">  align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  flex-direction: column;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"> </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pickfiles\"</span>&gt;</span>点击或者拖曳文件<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文件大小不能超过 40MB<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploadStatus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uploader = Qiniu.uploader(&#123;</span><br><span class=\"line\">\tbrowse_button: <span class=\"string\">'pickfiles'</span>,       <span class=\"comment\">//上传选择的点选按钮，**必需**</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    container: <span class=\"string\">'container'</span>,           <span class=\"comment\">//上传区域DOM ID，默认是browser_button的父元素，</span></span><br><span class=\"line\">    max_file_size: <span class=\"string\">'40mb'</span>,           <span class=\"comment\">//最大文件体积限制</span></span><br><span class=\"line\">    dragdrop: <span class=\"literal\">true</span>,                   <span class=\"comment\">//开启可拖曳上传</span></span><br><span class=\"line\">    drop_element: <span class=\"string\">'container'</span>,        <span class=\"comment\">//拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传</span></span><br><span class=\"line\">    auto_start: <span class=\"literal\">true</span>,                 <span class=\"comment\">//选择文件后自动上传，若关闭需要自己绑定事件触发上传</span></span><br><span class=\"line\">    init: &#123;</span><br><span class=\"line\">      <span class=\"string\">'FilesAdded'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">up, files</span>) </span>&#123;</span><br><span class=\"line\">      plupload.each(files, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">file</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 文件添加进队列后,处理相关的事情</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'BeforeUpload'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">up, file</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每个文件上传前,处理相关的事情</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'UploadProgress'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">up, file</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每个文件上传时,处理相关的事情</span></span><br><span class=\"line\">        uploadStatus.textContent = <span class=\"string\">'上传中'</span> <span class=\"comment\">//提示用户上传进度的</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'FileUploaded'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">up, file, info</span>) </span>&#123;</span><br><span class=\"line\">        uploadStatus.textContent = <span class=\"string\">'上传完毕'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'Error'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">up, err, errTip</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//上传出错时,处理相关的事情</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'UploadComplete'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//队列文件处理完毕后,处理相关的事情</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>至此，简单的上传文件的效果做完了，全部的<a href=\"https://github.com/codevvvv9/163-music-demo-1\" target=\"_blank\" rel=\"noopener\">代码版本</a></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-20/72923380.jpg\" alt=\"\"></p>\n","categories":["云音乐"],"tags":["jQuery"]},{"title":"爱搞事情的webpack","url":"https://codevvvv9.github.io/2018/02/13/爱搞事情的webpack/","content":"<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/60817621.jpg\" alt=\"webpack\"></p>\n<p>当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p>\n<h2 id=\"基本安装\"><a href=\"#基本安装\" class=\"headerlink\" title=\"基本安装\"></a>基本安装</h2><ol>\n<li>局部安装,官方也是推荐安装到项目目录下</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir webpack-demo<span class=\"number\">-1</span></span><br><span class=\"line\">cd webpack-demo<span class=\"number\">-1</span></span><br><span class=\"line\">npm init -y <span class=\"comment\">//生成package.json,并且一路同意,如果没啥个性化的内容则省了你一路狂按enter</span></span><br><span class=\"line\">npm install --save-dev webpack <span class=\"comment\">//安装到开发环境里面(devDependicies)</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>webpack基本配置文件 <a id=\"more\"></a><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch webpack.config.js</span><br><span class=\"line\">vi webpack.config.js</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>配置文件内容如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>, <span class=\"comment\">// 这里应用程序开始执行,webpack 开始打包</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// webpack 如何输出结果的相关选项</span></span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,<span class=\"comment\">//输出资源块的名字(asset chunk)</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>) <span class=\"comment\">// 所有输出文件的目标路径,我的就是./dist/bundle.js</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-11/81006787.jpg\" alt=\"基本使用\"></p>\n<p>把当前目录的src下的index.js打包到了dist目录下，并且生成了(emmited)一个改头换面的<code>bundle.js</code>，里面的代码面目全非啊。</p>\n<h3 id=\"可以有多个入口-entry\"><a href=\"#可以有多个入口-entry\" class=\"headerlink\" title=\"可以有多个入口(entry)\"></a>可以有多个入口(entry)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    scss: <span class=\"string\">'./src/css/main.scss'</span>,  <span class=\"comment\">//对象的键名scss 就是输出文件的name</span></span><br><span class=\"line\">    bundle: <span class=\"string\">'./src/js/app.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">   </span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].js\"</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist/js'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// publicPath: \"/output/\"</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>多个入口最好写成对象的形式，官网说如果写成了数组，输出的内容会是数组的第一个。</p>\n<p>上述代码会在<code>dist/js</code>目录下生成<code>scss.js和bundle.js</code></p>\n<h3 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h3><p>其中，配置文件的第一行代码使用了Node的内置模块<code>path</code>,并且在它前面加上 <code>__dirname</code>这个全局变量(也就是第七行代码)。可以防止不同操作系统之间的文件路径问题，并且可以使相对路径按照预期工作。<br>即使你的index.js内容为空，bundle.js里面也有一些基本的打包代码。</p>\n<ol start=\"3\">\n<li>基本的使用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种方法，使用当前目录的node_modules里面的webpack</span></span><br><span class=\"line\">./node_modules/.bin/webpack </span><br><span class=\"line\"><span class=\"comment\">//第二种方法使用npm脚本</span></span><br><span class=\"line\"><span class=\"comment\">//首先在你的package.json里面添加下列代码</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//然后，使用下列代码即可</span></span><br><span class=\"line\">npm run bulid</span><br><span class=\"line\"><span class=\"comment\">//第三种方法，高版本的npm自带了npx</span></span><br><span class=\"line\">npx webpack <span class=\"comment\">//npx会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你安装！</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>所以说呢，我选择了第三种使用方法。</p>\n<h2 id=\"babel-loader\"><a href=\"#babel-loader\" class=\"headerlink\" title=\"babel-loader\"></a>babel-loader</h2><p>ES6或其他版本js转换成通用js代码，毫无疑问应该使用<code>babel</code>，不过在<code>webpack</code>的世界里面统一使用<code>loader</code>，所以我们<code>google webpack babel-loader</code>。<br>loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p>\n<h3 id=\"有个坑，很容易搞错的坑\"><a href=\"#有个坑，很容易搞错的坑\" class=\"headerlink\" title=\"有个坑，很容易搞错的坑\"></a>有个坑，很容易搞错的坑</h3><p><code>babel-loader</code>不同版本的安装脚本、配置文件是不同的……<br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-11/72818242.jpg\" alt=\"小心点\"><br>(<em>@ο@</em>) 哇～你搜出的最新的文档用这么小的文字告诉你，你用<code>webpack 3.x babel-loader 7.x | babel 6.x</code>的去这个<a href=\"https://github.com/babel/babel-loader/tree/7.x\" target=\"_blank\" rel=\"noopener\">链接</a>,<code>webpack 3.x | babel-loader 8.x | babel 7.x</code>的去<a href=\"https://github.com/babel/babel-loader\" target=\"_blank\" rel=\"noopener\">当前的这链接链接</a>。<br>好吧，我用上一版本的吧。<br>所以我的安装脚本是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-loader babel-core babel-preset-env webpack</span><br></pre></td></tr></table></figure></p>\n<p>配置文件是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//依然属于webpack.config.js配置的一部分，</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//这是关于模块的配置</span></span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    <span class=\"comment\">//模块规则（配置 loader、解析器等选项）</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>, <span class=\"comment\">//使用正则判断后缀是js的文件</span></span><br><span class=\"line\">      exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>, </span><br><span class=\"line\">      <span class=\"comment\">//除了这两目录下的node_modules|bower_components</span></span><br><span class=\"line\">      use: &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>, <span class=\"comment\">//用这个loader处理.js的文件</span></span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'env'</span>] <span class=\"comment\">//选项，还记得单独使用babel的时候建立的那个.babelrc嘛，就是那个作用。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>借此可以得到<code>loader</code>的两个作用：</p>\n<ol>\n<li>识别出应该被对应的 loader 进行转换的那些文件。(使用 test 属性)</li>\n<li>转换这些文件，从而使其能够被添加到依赖中（并且最终添加到 bundle 中）(use 属性)<br>在<code>./src/js/</code>有<code>module-1.js、module-2.js、app.js</code>三个文件，都是新的语法，用的模块化写法，有的浏览器不支持，所以需要转化。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module-1.js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fn</span><br><span class=\"line\"><span class=\"comment\">//module-2.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fn</span><br><span class=\"line\"><span class=\"comment\">//app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> x <span class=\"keyword\">from</span> <span class=\"string\">'./module-1.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> y <span class=\"keyword\">from</span> <span class=\"string\">'./module-2.js'</span></span><br><span class=\"line\">x()</span><br><span class=\"line\">y()</span><br></pre></td></tr></table></figure>\n<hr>\n<p><em>最终效果，打开的<a href=\"https://codevvvv9.github.io/webpack-demo-1/dist/index.html\">我的预览链接</a></em>,使用<code>ctrl+shift+J</code>，会看到打印出1和2</p>\n<hr>\n<h2 id=\"sass-loader\"><a href=\"#sass-loader\" class=\"headerlink\" title=\"sass-loader\"></a>sass-loader</h2><p>如果使用了预编译的scss语言，要把scss文件变成css并加入到html里面，思路同上，<code>google webpack scss</code><br>得到如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install sass-loader node-sass webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>模块配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: /\\.scss$/,</span><br><span class=\"line\">            use: [&#123;</span><br><span class=\"line\">                loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;css-loader&quot; // translates CSS into CommonJS</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这个官方的就比较给力了，很清楚地用法</p>\n<ul>\n<li>先用sass-loader把<code>./src/csa/main.scss</code>编译成main.css</li>\n<li>再用css-loader把main.css变成符合CommonJS规范的</li>\n<li>把main.css变成js字符串，并创建style节点，把它放进去，这样html就可以显示啦。</li>\n</ul>\n<p>不过坑爹依旧☺……用的时候报错喽～</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-11/2444698.jpg\" alt=\"缺俩文件\"></p>\n<p>第一次就说缺style-loader，好吧……自觉点把另一个一起安装了把。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-11/60086288.jpg\" alt=\"style标签\"></p>\n<hr>\n<p>所以，打开<a href=\"https://codevvvv9.github.io/webpack-demo-1/dist/index.html\">我的预览链接</a>，会看到我的预览的背景是灰色的。</p>\n<hr>\n<h3 id=\"此时的webpack-config-js最终代码\"><a href=\"#此时的webpack-config-js最终代码\" class=\"headerlink\" title=\"此时的webpack.config.js最终代码\"></a>此时的webpack.config.js最终代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &apos;./src/js/app.js&apos;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;dist/js/&apos;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: /\\.js$/,</span><br><span class=\"line\">      exclude: /(node_modules|bower_components)/,</span><br><span class=\"line\">      use: &#123;</span><br><span class=\"line\">        loader: &apos;babel-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          presets: [&apos;env&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t    test: /\\.scss$/,</span><br><span class=\"line\">\t    use: [&#123;</span><br><span class=\"line\">\t        loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">\t        loader: &quot;css-loader&quot; // translates CSS into CommonJS</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">\t        loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">\t    &#125;\t  </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>所以借助webpack强大的模块化，通过其构建的依赖关系图(dependency graph)把js、scss都搞到了bundle.js里面，真是牛～</p>\n<h2 id=\"html-loader\"><a href=\"#html-loader\" class=\"headerlink\" title=\"html-loader\"></a>html-loader</h2><p>本来搞了一个html-loader，优化html，把空格、注释都给压缩掉，提高性能，可是实际使用中也没有报错，也没啥效果，比较尴尬……自己埋个坑后面补一补。</p>\n<h2 id=\"Copy-Webpack-Plugin\"><a href=\"#Copy-Webpack-Plugin\" class=\"headerlink\" title=\"Copy Webpack Plugin\"></a>Copy Webpack Plugin</h2><p>目前呢，前面的loader用的都很爽。在src目录下修改完了代码，一个npx webpack，刷新就可以看到效果了，体验很棒。<br>但是今天坐在电脑前面，回想代码，以前在前端工程话的道路上，scss、js、html都是被监视着(wacth)，开四个命令行窗口，只要src下一有风吹草动，就会把修改后的代码更新过去。</p>\n<ul>\n<li>目前使用的webpack可以完全自动化<code>scss、js</code>了，可我如果修改了src/index.html，dist/也无法获知我的修改啊</li>\n<li>然后我google一一会，发现了这货<code>Copy Webpack Plugin</code> </li>\n</ul>\n<p>哎呀，是个<code>plugin</code>，终于webpack的四大基本概念都到齐了,前面搞了<code>entry output loder</code>，今天用一下<code>plugin</code>。</p>\n<blockquote>\n<p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。<br>基本安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D copy-webpack-plugin</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Copy Webpack Plugin配置文件(plugin的和loader的配置文件可不是一个套路。loader是在module.rules数组的每一个对象里面(即rules数组的每一个value)，而plugin是在module的plugins数组里面)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依然在webpack.config.js</span><br><span class=\"line\">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CopyWebpackPlugin([ ...patterns ], options)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin#to\" target=\"_blank\" rel=\"noopener\">Copy Webpack Plugin的github</a>给的代码，一开始把我搞蒙了，和webpack官网的代码不大一样啊。后来才发现原来用了<code>module.exports = config;</code><br>在我的小demo里使用的是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    new CopyWebpackPlugin([ &#123;</span><br><span class=\"line\">      //原来一个plugin就是一个对象啊，使用的时候实例化对象即可</span><br><span class=\"line\">      from: &apos;src/index.html&apos;, //从src/index.html目录下复制</span><br><span class=\"line\">      to: &apos;../index.html&apos;,  //到dist/index.html</span><br><span class=\"line\">      toType: &apos;file&apos; //复制类型是文件</span><br><span class=\"line\">    &#125;], &#123; copyUnmodified: true &#125;) //把未修改的部分也复制过去</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure></p>\n<p>这个插件可以实现很多功能，具体的细节看<a href=\"https://github.com/webpack-contrib/copy-webpack-plugin#to\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"关于目录的一个小问题\"><a href=\"#关于目录的一个小问题\" class=\"headerlink\" title=\"关于目录的一个小问题\"></a>关于目录的一个小问题</h3><p>上面代码为什么这么写呢<code>to: &#39;../index.html&#39;,</code> ，试了好几遍发现没有报错，就是没有结果，最后搞明白了是路径的问题……<br>还记得 四大基本概念的<code>output</code>里面的path吗，回头看一开始的<a href=\"#path\">path</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;dist/js/&apos;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>项目的path是<code>dist/js</code>下，所以应该复制到上一级目录下<code>../</code>也就是<code>dist/</code>目录下了。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/89134482.jpg\" alt=\"效果\"></p>\n<h3 id=\"可以看到预览链接里面的文字啦\"><a href=\"#可以看到预览链接里面的文字啦\" class=\"headerlink\" title=\"可以看到预览链接里面的文字啦\"></a>可以看到<a href=\"https://codevvvv9.github.io/webpack-demo-1/dist/index.html\">预览链接</a>里面的文字啦</h3><p>动态效果可以看下图<br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-12/50816812.jpg\" alt=\"动态效果\"></p>\n<h2 id=\"postcss-loader\"><a href=\"#postcss-loader\" class=\"headerlink\" title=\"postcss-loader\"></a>postcss-loader</h2><p>上述代码有个小问题使用了<code>display： flex</code>把<code>ul&gt;li</code>变成了横排，但是这玩意有兼容性。当初我的<a href=\"https://segmentfault.com/a/1190000013231817\" target=\"_blank\" rel=\"noopener\">一篇文章</a>唯一的一个评论就是这么说我的……</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/6879679.jpg\" alt=\"没有考虑兼容性\"></p>\n<p>检查兼容性(虽然这是严谨要求，我还是老忘)，可以去<a href=\"https://caniuse.com/#feat=flexbox\" target=\"_blank\" rel=\"noopener\">caniuse</a> 看一下,(<em>@ο@</em>) 哇～IE没有绿的哎，支持太差了。( ⊙ o ⊙ )！万一以后我项目搞大了，IE的用户、老安卓的用户想看我项目咋办呢，只能加一下前缀优化一下啦。<br>有个挺牛的<a href=\"https://autoprefixer.github.io/\" target=\"_blank\" rel=\"noopener\">在线的autoprefixer</a>，也可以去在线转换。<br>既然使用了webpack就<code>Google webpack autoprefixer</code>，遗憾的发现<code>autoprefixer</code>官方推荐使用<code>postcss-loader</code><br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-12/79391220.jpg\" alt=\"autoprefixer过期了\"></p>\n<h3 id=\"postcss-loader解决兼容性问题\"><a href=\"#postcss-loader解决兼容性问题\" class=\"headerlink\" title=\"postcss-loader解决兼容性问题\"></a>postcss-loader解决兼容性问题</h3><p>先吐槽一下，这货的文档也是稀烂……</p>\n<ol>\n<li>官方安装脚本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D postcss-loader</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>需要单独配置文件postcss.config.js，官方的写法是下面这个（最无语的就是这个……，<strong>下面的必错，写出来就是警告大家，官方的也不一定对</strong>）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  parser: &apos;sugarss&apos;, // 铪？？？？解析器是sugarss???</span><br><span class=\"line\">  plugins: &#123;</span><br><span class=\"line\">    &apos;postcss-import&apos;: &#123;&#125;,</span><br><span class=\"line\">    &apos;postcss-cssnext&apos;: &#123;&#125;,</span><br><span class=\"line\">    &apos;cssnano&apos;: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在webpack.config.js的添加时还要注意下面的几点</p>\n<blockquote>\n<p>After setting up your postcss.config.js, add postcss-loader to your webpack.config.js. You can use it standalone or in conjunction with css-loader (recommended). Use it after css-loader and style-loader, but before other preprocessor loaders like e.g sass|less|stylus-loader, if you use any.</p>\n</blockquote>\n<p>这段文档的要点就是让你注意<code>postcss-loader</code>应该在<code>css-loader style-loader</code>之后，但是一定要在其他的预处理器<code>preprocessor loaders</code>之前，例如<br><code>sass|less|stylus-loader</code>。</p>\n<ol start=\"3\">\n<li>官方给了一个推荐的配置代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依然是webpack.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &apos;style-loader&apos;,</span><br><span class=\"line\">          &#123; loader: &apos;css-loader&apos;, options: &#123; importLoaders: 1 &#125; &#125;,</span><br><span class=\"line\">          &apos;postcss-loader&apos;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本项目用的是<code>.src/css/main.scss</code>,只能尝试着将上述代码加到相应的位置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttest: /\\.scss$/,</span><br><span class=\"line\">\t\tuse: [&#123;</span><br><span class=\"line\">\t\t\tloader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class=\"line\">\t\t&#125;, &#123;</span><br><span class=\"line\">\t\t\tloader: &quot;css-loader&quot;, options: &#123; importLoaders: 1 &#125;// translates CSS into CommonJS</span><br><span class=\"line\">\t\t&#125;, &#123;</span><br><span class=\"line\">\t\t\tloader: &quot;postcss-loader&quot;</span><br><span class=\"line\">\t\t&#125;, &#123;</span><br><span class=\"line\">\t\t\tloader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">\t\t&#125;]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   ]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>下面的几点可都是官网文档没写的，只能自己踩一踩的坑……</p>\n<hr>\n<ol start=\"4\">\n<li>运行<code>npx webpack</code>,<em>连续报错</em>，不过是缺必备的module的错误,也就是缺postcss.config.js里面的<code>postcss-import postcss-cssnext cssnano sugarss</code> 。<br>没办法，先<code>npm i -D 上面的四个模块名字</code>，依然报错，这次是语法错误<br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-12/21058876.jpg\" alt=\"语法错误\"><br>(⊙v⊙)嗯？？？它说我不必要的大括号？？？我这标准的scss语法啊，又不是sass的语法(它省略了大括号和分号)，先Google一波这个错误。<br>终于在在postcss的<a href=\"https://github.com/postcss/postcss/issues/1062\" target=\"_blank\" rel=\"noopener\">issue</a>里面发现了蛛丝马迹,问题果然出在那个令我疑惑的<code>postcss.config.js</code>里面<h3 id=\"错误原因分析\"><a href=\"#错误原因分析\" class=\"headerlink\" title=\"错误原因分析\"></a>错误原因分析</h3></li>\n<li>错误的使用了<a href=\"https://github.com/postcss/sugarss\" target=\"_blank\" rel=\"noopener\">sugarss</a>的解析器(这货和sass类似，没有大括号，所以它说我大括号错了，它的特点是Indent-based CSS syntax for PostCSS.SugarSS MIME-type is text/x-sugarss with .sss file extension.)，而我写的是scss语法。</li>\n<li><code>postcss-loader</code>哪来的勇气确定大家都是用的<code>.sss</code>后缀的sugarss语法呢，还敢直接在文档的醒目位置推荐<code>稀烂的postcss.config.js</code>，O__O “…</li>\n<li>那么多的预编译的css语法，果然需要webpack打包工具啊，找到合适的loader去解析啊。</li>\n</ol>\n<p>注释掉<code>parser: &#39;sugarss&#39;,</code>这句代码，可以使用默认的解析器去解析了，正常运行了。<br>不过查看代码，发现好像转换后的css有点小<strong>丑</strong><br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-12/6839932.jpg\" alt=\"不好看\"></p>\n<h3 id=\"autoprefixer冗余\"><a href=\"#autoprefixer冗余\" class=\"headerlink\" title=\"autoprefixer冗余\"></a>autoprefixer冗余</h3><p>仔细观察命令行，发现有线索，一个警告<br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-12/77557219.jpg\" alt=\"警告\"><br>警告信息提示我说：postcss-cssnext发现有个冗余的<code>autoprefixer</code>插件在我的postcss插件里面，这个可能有不良影响，我应该移除它，因为它已经包括在了postcss-cssnext里面。</p>\n<p>webpack的警告说的很明白，postcss-cssnext是无辜的，而且我确定按照官网代码走的，没有安装<code>autoprefixer</code>插件，错误必然在剩下的两个插件里面了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改后的postcss.config.js只剩下这些了</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  plugins: &#123;</span><br><span class=\"line\">    &apos;postcss-import&apos;: &#123;&#125;, //1.它错了？</span><br><span class=\"line\">    &apos;postcss-cssnext&apos;: &#123;&#125;, //webpack告诉我它是清白的</span><br><span class=\"line\">    &apos;cssnano&apos;: &#123;&#125; //2.它错了？</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我选择了排除法：</p>\n<ol>\n<li>先注释<code>&#39;postcss-import&#39;: {},</code>，发现无法转换后的css代码不对，说明它是无辜的。</li>\n<li>那么问题必然是最后一个插件，注释掉<code>&#39;cssnano&#39;: {}</code>，终于完美了，而且代码很优美。<br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-12/85971803.jpg\" alt=\"消除警告\"></li>\n</ol>\n<p>本着打破砂锅问到底的精神，我搜了一下<code>cssnano</code>,在其<a href=\"http://cssnano.co/optimisations/autoprefixer/\" target=\"_blank\" rel=\"noopener\">官网</a>看到了真实的错误原因，webpack很明智啊，诚不欺我，果然冗余插件了。<br><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/83651219.jpg\" alt=\"警告的原因\"></p>\n<p>cssnano里面有<code>autoprefixer</code>导致了冗余。</p>\n<h2 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h2><p>webpack 把所有的资源都当成了一个模块, CSS、JS 文件 都是资源, 都可以打包到一个 bundle.js 文件中.<br>但是有时候需要把样式 单独的打包成一个文件需要抽离出css文件到单独的<code>css/</code>下。</p>\n<p>使用<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">extract-text-webpack-plugin插件</a>可以做到。</p>\n<ol>\n<li>安装脚本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install extract-text-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置webpack.config.js，官方推荐的配置如下，但是需要结合自己的项目修改一下……</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>); <span class=\"comment\">//插件的套路。都要require进来</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">\"style-loader\"</span>, <span class=\"comment\">//失败了就用它解析</span></span><br><span class=\"line\">          use: <span class=\"string\">\"css-loader\"</span> <span class=\"comment\">//是css文件，就用这个处理</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"styles.css\"</span>),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"目前的问题\"><a href=\"#目前的问题\" class=\"headerlink\" title=\"目前的问题\"></a>目前的问题</h3><p>我如果使用的是scss，就很尴尬了</p>\n<p>最开始由一个错误引起</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/63857480.jpg\" alt=\"window未定义\"></p>\n<p>Google一下，<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/503\" target=\"_blank\" rel=\"noopener\">解决掉error</a>，fallbak里面使用了style-loader，use里面不应该使用了，那么问题又来了</p>\n<ol>\n<li>问题一：无法使用style-loader把我的main.scss转化后的css代码插入到style标签里面。</li>\n</ol>\n<p>详见代码注释部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        test: /\\.scss$/,</span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          fallback: &apos;style-loader&apos;,</span><br><span class=\"line\">          //如果在use里面写上style-loader，就报错window未被定义，可是不写的话，我的bundle.js里面就无法把css放到style标签里面，只能手动把分离的css加到index.html，很无语。</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">              loader: &quot;css-loader&quot;, options: &#123; importLoaders: 1 &#125;// translates CSS into CommonJS</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">              loader: &quot;postcss-loader&quot;</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">              loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">          &#125;]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>问题2：可以提取出单独的css文件，但是没想到如何放到单独的<code>css/</code>下，很尴尬，代码未提交，还在摸索中。</li>\n</ol>\n<p>问题大约知道应该出现在下面这个函数里面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">     filename:  <span class=\"function\">(<span class=\"params\">getPath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> getPath(<span class=\"string\">'../main.css'</span>).replace(<span class=\"string\">'../js'</span>, <span class=\"string\">'../css'</span>); <span class=\"comment\">// 本意是生成在dist/css/main.css,结果只是在dist/main.css目录下，没有css/</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     allChunks: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>所有的代码都在我的<a href=\"https://github.com/codevvvv9/webpack-demo-1\" target=\"_blank\" rel=\"noopener\">demo</a>里面。</p>\n<h2 id=\"蛋疼的无力吐槽\"><a href=\"#蛋疼的无力吐槽\" class=\"headerlink\" title=\"蛋疼的无力吐槽\"></a>蛋疼的无力吐槽</h2><p>算……是……搞定了webpack的基本使用了……吧，最简单的符合我目前技术栈的各种loader,plugin都会安装了。<br>当然，还有无数的webpack的loader、plugin在前方等着我去探索……各种稀奇古怪的配置文件……痛并快乐着☺</p>\n<p>五花八门的配置文件挺让我糟心的……幸亏有了<strong>node爸爸</strong>帮我啊，webpack爸爸虽然也是比较严厉的，但是省了你用四个命令行窗口的啊，还是很感人的啊。</p>\n<p>工具这个东西嘛</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/72186058.jpg\" alt=\"怎么办\"></p>\n<ol>\n<li>配置出错了怎么办，默念三句</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/45389737.jpg\" alt=\"配置出错了怎么办\"></p>\n<ol start=\"2\">\n<li>如果真的搞蹦了怎么办。熊得，送你一句名言</li>\n</ol>\n<blockquote>\n<p>没有什么bug不是一遍webpack解决不了额，如果有的话，那就来三遍webpaack。总有一天让webpack叫你爸爸！！！</p>\n</blockquote>\n<h2 id=\"新的挑战者parcel\"><a href=\"#新的挑战者parcel\" class=\"headerlink\" title=\"新的挑战者parcel\"></a>新的挑战者parcel</h2><p>现在的吐槽大概是没有经历过以前更蛋疼的日子吧，幸好有了新的后起之秀—<a href=\"https://parceljs.org/\" target=\"_blank\" rel=\"noopener\">parcel</a>，它的官网老厉害了，智能提示我用了中文，真是贴心。</p>\n<p>回顾一下<code>webpack</code>的首页</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/60817621.jpg\" alt=\"webpack\"></p>\n<p>在对比一下<code>parcel</code>的首页</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/90577657.jpg\" alt=\"parcel\"></p>\n<p>两者的目的是一样的，不过parcel不需要插件，而且速度快。</p>\n<h3 id=\"快速开始是真的快\"><a href=\"#快速开始是真的快\" class=\"headerlink\" title=\"快速开始是真的快\"></a>快速开始是真的快</h3><p><a href=\"https://parceljs.org/getting_started.html\" target=\"_blank\" rel=\"noopener\">快速开始</a></p>\n<p>没有配置，最好以html或者js为入口，直接<code>npm init -y , parcel index.html</code>，可以实现index.js。</p>\n<p>它会自动帮你打包到dist目录下的一个js文件里面，并复制index.html过去，而这一切只需要上面的一行代码。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/25647271.jpg\" alt=\"自动\"></p>\n<ol>\n<li>一开始我的项目的目录结构</li>\n<li>执行<code>parcel index.html</code>的目录结构</li>\n</ol>\n<p>而我当时搞webpack的时候的快速开始至少需要安装webpack、webpack.config.js、修改配置内容、安装插件才能实现上述的功能。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/44326202.jpg\" alt=\"快速开始\"></p>\n<h3 id=\"模块化和scss的解析很方便\"><a href=\"#模块化和scss的解析很方便\" class=\"headerlink\" title=\"模块化和scss的解析很方便\"></a>模块化和scss的解析很方便</h3><p>当我在<code>parcel-demo</code>目录下使用<code>parcel index.html</code>的时候，它自动发现我引入了<code>index.js。</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/28380182.jpg\" alt=\"模块化\"></p>\n<ol>\n<li>里面的内容是模块化的内容，它自动帮我转成了<code>dist/parcel-demo.js</code>，我在webpack的时候需要babel-loader</li>\n<li>我用的是scss,它也会自动发现，并且竟然</li>\n</ol>\n<hr>\n<p><strong>还帮我自动下载了node-sass</strong></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/61347334.jpg\" alt=\"自动下载\"></p>\n<p>其他的特点都在官网去发掘吧～希望日后<code>parcel</code>快速崛起吧</p>\n<hr>\n<p>而现在我还是要用<code>webpack</code>的……</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-13/45605477.jpg\" alt=\"\"></p>\n","categories":["自动打包工具"],"tags":["webpack"]},{"title":"持久化存储与HTTP缓存","url":"https://codevvvv9.github.io/2018/02/11/持久化存储与HTTP缓存/","content":"<blockquote>\n<p>本文主要学习一下一些高级的HTTP知识，例如<code>Session</code> <code>LocalStorage Cache-Control Expires ETag</code></p>\n<p>其实主要就是涉及到了<strong>持久化存储与缓存的技术</strong></p>\n</blockquote>\n<p>在此之前已经学习了<code>Cookie</code>的相关知识，其中<code>Cookie</code>有个缺点可以人为修改，有一定的安全隐患。</p>\n<p>所以，针对这个缺点，诞生了<code>Session</code></p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>一般来说<code>Session</code>是基于Cookie实现的，它利用一个<code>sessionId</code>把用户的敏感数据隐藏起来，除非暴力穷举才有可能获得敏感数据。</p>\n<h3 id=\"sessionId\"><a href=\"#sessionId\" class=\"headerlink\" title=\"sessionId\"></a><code>sessionId</code></h3><p>我们使用<code>Cookie</code>的时候，一般是服务器给用户一个响应头，设置<code>Cookie</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">'Set-Cookie'</span>, <span class=\"string\">'sign_in_email=...;HTTPOnly'</span>)</span><br></pre></td></tr></table></figure>\n<p>既然Session还是基于<code>Cookie</code>实现的，那么还是应该在<code>Set-Cookie</code>上搞事情。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//预先在服务器端预留对象准备存储各种session</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sessions = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">let</span> sessionId = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">100000</span></span><br><span class=\"line\">sessions[sessionId] = &#123;<span class=\"attr\">sign_in_email</span>: email&#125;</span><br><span class=\"line\">response.setHeader(<span class=\"string\">'Set-Cookie'</span>, <span class=\"string\">`sessionId=<span class=\"subst\">$&#123;sessionId&#125;</span>;HTTPOnly`</span>)</span><br></pre></td></tr></table></figure>\n<p>使用随机数来做<code>sessionId</code>,最终只是把这串随机数暴露给外界，而真正的信息却保存在了服务器端的<code>sessions</code>对象里面。它就像一个密码簿一样，有效的信息与<code>sessionId</code>一一对应，这是服务器的事，保证了安全性。</p>\n<p>当下次用户访问该网站的其他页面的时候，就会带着登录时服务器给的这个<code>sessionId</code>，服务器获得这个<code>sessionId</code>后，然后一转化就知道是正确的用户了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sessions = &#123;</span><br><span class=\"line\">  sessionId: &#123;</span><br><span class=\"line\">    sign_in_email: ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"持久化存储\"><a href=\"#持久化存储\" class=\"headerlink\" title=\"持久化存储\"></a>持久化存储</h2><p>在HTML里面<code>js文件</code>里面的变量或对象，每当网页刷新的时候，就会死掉，又重新生成，虽然还是那个<code>a</code>，但是刷新后已经是另一块内存了。既然它也没变，我们为什么不把它一直保留着呢，即使刷新了<code>a</code>还是那个<code>a</code>，也就是持久化存储的意义。以前使用<code>Cookie</code>做这个功能，不过<code>Cookie</code>每次发请求会把Cookie里面的所有东西都带着去服务器，加重内存的负担，而且请求响应时间长，所以<code>html5</code>给了一个新的API <code>localStorage</code></p>\n<p>关于Cookie如何工作的，我发现<a href=\"https://segmentfault.com/u/ruoyiqing\" target=\"_blank\" rel=\"noopener\">这篇文章</a>写得特别好</p>\n<h3 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a><code>LocalStorage</code></h3><p>它本质上还是个<code>hash</code>，不过是存在于浏览器端的，不同于<code>session</code>存在与服务器端的<code>hash</code>。一般存储的都是没有用的或者不敏感的信息。</p>\n<p><code>localStorage</code>是window的全局属性，常用的有三个方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 添加键、值</span></span><br><span class=\"line\">localStorage.setItem(<span class=\"string\">'a'</span>, <span class=\"string\">'...'</span>)</span><br><span class=\"line\"><span class=\"comment\">//2. 获得键、值</span></span><br><span class=\"line\">localStorage。getItem(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"comment\">//3.清空localStorage</span></span><br><span class=\"line\">localStorage.clear()</span><br></pre></td></tr></table></figure>\n<p>注意，它存的值全是字符串，即使你写的像对象也没有卵用。</p>\n<p>如果想存储字符串需要用到<code>JSON.stringify( )</code></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/12510112.jpg\" alt=\"全是字符串\"></p>\n<h3 id=\"一个实际应用\"><a href=\"#一个实际应用\" class=\"headerlink\" title=\"一个实际应用\"></a>一个实际应用</h3><p>很简单的一个例子：网站进行更新了，用户登录进来了，想提示用户一下—我有新东西啦，这个提示并不应该在每次刷新的时候反复告诉用户，只是在第一次用户进来的时候告诉他即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> already = localStorage.getItem(<span class=\"string\">'已经提示过了'</span>)</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!already) &#123;</span><br><span class=\"line\">   alert(<span class=\"string\">'我们的网站新进了一些货物，您看一下有没有您需要的啊O(∩_∩)O～'</span>)</span><br><span class=\"line\">   localStorage.setItem(<span class=\"string\">'已经提示过了'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当第一次访问的时候，<code>already</code>为null，所以进入<code>if</code>代码片段，提示用户一次，接着把<code>already</code>设为<code>true</code>，不会进入<code>if</code>，也就不再提示了。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/79629274.jpg\" alt=\"实际应用\"></p>\n<h3 id=\"不基于Cookie的session\"><a href=\"#不基于Cookie的session\" class=\"headerlink\" title=\"不基于Cookie的session\"></a>不基于<code>Cookie</code>的<code>session</code></h3><p>学习了<code>localStorage</code>，就可以搞一些黑科技了，前面说了，<code>session</code>一般是基于<code>Cookie</code>的，那么有没有例外呢。</p>\n<p>有的。利用查询参数和<code>localStorage</code>可是实现<code>session</code>Id`。</p>\n<h3 id=\"小结一下\"><a href=\"#小结一下\" class=\"headerlink\" title=\"小结一下\"></a>小结一下</h3><ol>\n<li>Cookie的特点<ul>\n<li>服务器通过 Set-Cookie 头给客户端一串字符串</li>\n<li>客户端每次访问相同域名的网页时，必须带上这段字符串</li>\n<li>客户端要在一段时间内保存这个Cookie</li>\n<li>Cookie 默认在用户关闭页面后就失效，后台代码可以任意设置 Cookie 的过期时间。比如max-age和后面要讲的<code>Expires</code></li>\n<li><a href=\"https://stackoverflow.com/questions/640938/what-is-the-maximum-size-of-a-web-browsers-cookies-key\" target=\"_blank\" rel=\"noopener\">大小大概在 4kb 以内</a></li>\n</ul>\n</li>\n<li>Session的特点<ul>\n<li>将 SessionID（随机数）通过 Cookie 发给客户端</li>\n<li>客户端访问服务器时，服务器读取 SessionID</li>\n<li>服务器有一块内存（哈希表）保存了所有 session</li>\n<li>通过 SessionID 我们可以得到对应用户的隐私信息，如 id、email</li>\n<li>这块内存（哈希表）就是服务器上的所有 session</li>\n</ul>\n</li>\n<li>LocalStorage的特点<ul>\n<li>LocalStorage 跟 HTTP 无关</li>\n<li>也就是说发送任何请求都不会带上 LocalStorage 的值</li>\n<li>只有相同域名的页面才能互相读取 LocalStorage（没有同源那么严格）</li>\n<li>每个域名 localStorage 最大存储量为 5Mb 左右（每个浏览器不一样）</li>\n<li>常用场景：记录有没有提示过用户（没有用的信息，不能记录密码等敏感信息）</li>\n<li>LocalStorage 永久有效，除非用户清理缓存</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/18117336.jpg\" alt=\"清理缓存\"></p>\n<h3 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h3><p>会话存储主要特点与<code>localStorage</code>基本相同，最大的不同是<code>SessionStorage</code>在用户关闭页面（会话结束）后就失效。</p>\n<h2 id=\"HTTP缓存技术三兄弟\"><a href=\"#HTTP缓存技术三兄弟\" class=\"headerlink\" title=\"HTTP缓存技术三兄弟\"></a>HTTP缓存技术三兄弟</h2><p>假如说我们要访问的的文件比较大，我们请求完之后，下载需要花很长时间，当我们刷新页面的时候，虽然文件没有任何更新，但是我们又从服务器端下载了一遍大文件，导致每次响应时间依然很长。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/60377714.jpg\" alt=\"加载时间很长\"></p>\n<p>通过上图的实验可以看到<code>localhost</code>的请求响应很快，10ms；而<code>default.css</code>、<code>main.js</code>文件较大，响应时间是<code>localhost</code>的25倍，而<code>jq</code>文件使用了<code>cdn</code>加速，是从内存的缓存中获得的，几乎瞬间。如果每次都这样的话，用户体验肯定很差。</p>\n<hr>\n<p>那么我们能不能在第一次响应完毕之后，如果资源没有更新，就不去服务器端下载，而是去某个地方获得呢？</p>\n<p>答案是肯定的，可以实现，通过缓存，正如上图的<code>jq</code>实现的方法一样。</p>\n<p>这部分可以作为web性能优化的一个方法。</p>\n<h3 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"noopener\">Cache-Control</a></h3><p>通过<code>max-age</code>设置缓存的有效时间(持续时间)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (path === <span class=\"string\">'/css/default.css'</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> string = fs.readFileSync(<span class=\"string\">'./css/default.css'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">   response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/css;charset=utf-8'</span>)</span><br><span class=\"line\">   response.setHeader(<span class=\"string\">'Cache-Control'</span>, <span class=\"string\">'max-age=1000000'</span>)</span><br><span class=\"line\">   response.write(string)</span><br><span class=\"line\">   response.end()</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>在响应头里面加上<code>Cache-Control</code>，表示在100000秒内不要再去向服务器要这个资源了，就从我的内存缓存里面获得。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/81124953.jpg\" alt=\"缓存的技术\"></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/20129031.jpg\" alt=\"多次刷新后\"></p>\n<p>虽然使用了缓存技术，不过有一点疑惑的就是有时候从硬盘的缓存里面获得，这个速度提升并不大，但是仍然避免了向服务器再次发起请求获得资源的过程；有时候从内存的缓存里面获得，这个就特别快了。大概是因为内存的缓存特别快吧。</p>\n<p>通常我们把<code>Cache-Control</code>的有效时间设的很长。</p>\n<p>以经常逛得知乎为例。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/59253426.jpg\" alt=\"\"></p>\n<p>如果一个文件长期不变，把它设为从缓存里面获得，知乎设置了32596169秒的有效时间，超过了1年=31536000秒的时间。</p>\n<h3 id=\"首页尽量不用缓存技术\"><a href=\"#首页尽量不用缓存技术\" class=\"headerlink\" title=\"首页尽量不用缓存技术\"></a>首页尽量不用缓存技术</h3><p>我们刷一些论坛性质的或者新闻性质的网站，注重时效性，一般会把爆炸性的、高质量的内容放到首页去，如果我们看了一会，想刷新看看新的更新的内容，而你设了缓存，看到的还是10分钟之前的首页，那就太尴尬了☺……</p>\n<p>所以首页尽量不用缓存技术，只对那些长期不变的文件、图片等使用缓存技术。</p>\n<p>还是以知乎为例。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/1670868.jpg\" alt=\"以知乎为例\"></p>\n<p>对于知乎的<code>Cache-Control</code>的写法我是比较懵逼的。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"noopener\">MDN的语法</a>上</p>\n<blockquote>\n<ol>\n<li><code>public</code></li>\n</ol>\n<p>Indicates that the response may be cached by any cache.</p>\n<ol start=\"2\">\n<li><code>private</code></li>\n</ol>\n<p>Indicates that the response is intended for a single user and must not be stored by a shared cache. A private cache may store the response.</p>\n<ol start=\"3\">\n<li><code>no-cache</code></li>\n</ol>\n<p>Forces caches to submit the request to the origin server for validation before releasing a cached copy.</p>\n<ol start=\"4\">\n<li><code>no-store</code></li>\n</ol>\n<p>The cache should not store anything about the client request or server response.</p>\n<ol start=\"5\">\n<li><code>must-revalidate</code></li>\n</ol>\n<p>The cache must verify the status of the stale resources before using it and expired ones should not be used.</p>\n</blockquote>\n<p>MDN推荐关闭缓存的写法是<code>Cache-Control: no-cache, no-store, must-revalidate</code>。</p>\n<p>那么如果有的资源确实被更新了，如何去更新缓存呢。</p>\n<h3 id=\"更新缓存\"><a href=\"#更新缓存\" class=\"headerlink\" title=\"更新缓存\"></a>更新缓存</h3><p>通过服务器端代码<code>server.js</code>我们可以发现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (path === <span class=\"string\">'/js/main.js'</span>) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  response.setHeader(<span class=\"string\">'Cache-Control'</span>, <span class=\"string\">'max-age=1000000'</span>)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (path === <span class=\"string\">'/css/default.css'</span>)&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  response.setHeader(<span class=\"string\">'Cache-Control'</span>, <span class=\"string\">'max-age=1000000'</span>)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只要当<code>URL</code>符合要求的时候，会使用缓存技术，不去发起请求重新下载资源。</p>\n<p>所以当文件确实被更新了之后，我们可以改变<code>URL</code>，那么就会去重新下载新的文件了。</p>\n<p>既然我们的网页入口是<code>html</code>，可以在这里面动手脚</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"./js/main.js?V2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>当你更新代码之后，理论上只需要在URL上添加查询参数<code>？V2</code>即可。</p>\n<hr>\n<p>我们还是去知乎看看他们的例子。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/68564030.jpg\" alt=\"更新缓存\"></p>\n<p>可以看到知乎也是把<code>URL</code>改了，只不过比我那种高级，它在文件名字动了手脚，大概是用了什么框架或者处理工具吧，不过更新缓存的思路上是一样的。文件变了，知乎就把文件缓存的<code>URL</code>填点东西；没变的话，就缓存一年，在你的硬盘某处睡一年^_^。</p>\n<h3 id=\"小结一下-1\"><a href=\"#小结一下-1\" class=\"headerlink\" title=\"小结一下\"></a>小结一下</h3><p>使用缓存就用<code>response.setHeader(&#39;Cache-Control&#39;, &#39;max-age=100000&#39;)</code>，当你想更新的时候就改变文件的<code>URL</code>。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/42636461.jpg\" alt=\"缓存技术\"></p>\n<p>当然，缓存存多了，你的硬盘估计就爆了，浏览器会去权衡这些的，应该优先清楚哪些缓存，是浏览器的事。</p>\n<p>俗话说得好啊，吃井不忘挖井人啊，要学会忆苦思甜啊，我们现在用的可爽的<code>Cache-Control</code>也不是凭空冒出来的，是有历史原因的，以前呢，是用<code>Expires</code>实现缓存的技术。</p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires\" target=\"_blank\" rel=\"noopener\">Expires</a></h3><p><code>Expires</code>的英文是到期的意思，很明显是与缓存有关的技术，不过从其英文意思也能看出它是到某个时间点截止的意思，不是<code>Cache-Control</code>的有效时间。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/78046653.jpg\" alt=\"MDN的语法\"></p>\n<p>从语法和示例可以看出它是基于格林威治时间的。</p>\n<p>我们还要处理一下时间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() <span class=\"comment\">//Sat Feb 10 2018 11:18:54 GMT+0800 (CST)</span></span><br><span class=\"line\">d.toGMTString() <span class=\"comment\">//\"Sat, 10 Feb 2018 03:18:54 GMT\"</span></span><br></pre></td></tr></table></figure>\n<p>能看出来，这个响应头的最大的弊端在于，<strong>时间戳是与你的本地时间关联的</strong></p>\n<p>如果本地电脑的时间系统错乱了，而且这种毛病还真的时常发生，那你的缓存就毫无作用了。maybe这就是HTTP要升级这个响应头的原因吧O(∩_∩)O～</p>\n<p>当<code>Cache-Control</code>和<code>Expires</code>共同存在的时候</p>\n<blockquote>\n<p>如果还有一个 设置了 “max-age” 或者 “s-max-age” 指令的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"noopener\"><code>Cache-Control</code></a>响应头，那么  <code>Expires</code> 头就会被忽略。</p>\n</blockquote>\n<p>关于缓存的技术，还有最后一个兄弟<code>ETag</code>，在搞定它之前，先来学习一下它的小跟班<code>MD5</code></p>\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a><a href=\"https://zh.wikipedia.org/wiki/MD5\" target=\"_blank\" rel=\"noopener\">MD5</a></h3><p><code>MD5</code>是一个摘要算法。经常用于比较两个文件是否完全一样，如果有一点不一样，误差会放大。例如我们经常重装系统的话，有良心的系统提供者会给你一个对应的<code>MD5</code>值，当你下载完毕后，查看你下载的系统的MD5值是否与官方提供给你的一样，确保是否会因为网络原因导致你下载的东西不完整。</p>\n<p>在<code>Linux</code>系统里面使用<code>md5sum</code>指令进行MD5校验</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/74542817.jpg\" alt=\"MD5校验\"></p>\n<p>第一个红框里面就是<code>1.txt</code>文件(内容设定为123456)的MD5值，第二个红框里面就是<code>1-copy</code>文件(内容被我改为了123460)的MD5值。</p>\n<p>在<code>nodejs</code>里面如何使用呢，Google后发现有<code>npm</code>的<a href=\"https://www.npmjs.com/package/md5\" target=\"_blank\" rel=\"noopener\">MD5</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install md5</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//在server.js引入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5'</span>);</span><br></pre></td></tr></table></figure>\n<p>准备工作做完，可以搞<code>ETag</code>了。</p>\n<h3 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag\" target=\"_blank\" rel=\"noopener\">ETag</a></h3><blockquote>\n<p>The <strong>ETag</strong> HTTP response header is an identifier for a specific version of a resource.It allows caches to be more efficient, and saves bandwidth, as a web server does not need to send a full response if the content has not changed. On the other side, if the content has changed, etags are useful to help prevent simultaneous updates of a resource from overwriting each other (“mid-air collisions”).</p>\n<p>If the resource at a given URL changes, a new <code>Etag</code> value must be generated. Etags are therefore similar to fingerprints and might also be used for tracking purposes by some servers. A comparison of them allows to quickly determine whether two representations of a resource are the same, but they might also be set to persist indefinitely by a tracking server.</p>\n</blockquote>\n<ul>\n<li>这个响应头是特定资源版本的标识符。     </li>\n<li>如果给定URL中的资源更改，则一定要生成新的Etag值。因此Etags类似于指纹，也可能被某些服务器用于跟踪。 比较etags能快速确定此资源是否变化，但也可能被跟踪服务器永久存留。</li>\n</ul>\n<p>可以看出<code>ETag</code>应该是一串值，此时上一节的<code>MD5</code>就派上用场了，我们使用MD5来比较前后两次请求文件的内容。</p>\n<p>当某个URL来访问服务器的资源的时候，如果服务器设置了响应头<code>ETag:一串md5值</code>，那么</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/18997396.jpg\" alt=\"设置响应头\"></p>\n<p>现在没有什么其他变化，如果第二次刷新的话，你会发现</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/82913073.jpg\" alt=\"请求头变了\"></p>\n<p>请求头多了一个<code>If-None-Match:一串MD5值</code>。</p>\n<p>比较上述两图，我的<code>main.js</code>没有改变过，发现<code>ETag:一串md5值</code>和<code>If-None-Match:一串MD5值</code>的一样，稍微一思考的话，就能明白，第二次刷新的时候如果我的<code>main.js</code>变了的话，那么</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/23771996.jpg\" alt=\"MD5变了\"></p>\n<p>第二次向服务器发起请求，下载的<code>main.js</code>的<code>ETag</code>的MD5值必然不同了。</p>\n<p>根据这个现象，然后结合MDN文档</p>\n<blockquote>\n<p>ETag头的另一个典型用例是缓存未更改的资源。 如果用户再次访问给定的URL（设有ETag字段），显示资源过期了且不可用，客户端就发送值为ETag的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None%20-Match\" target=\"_blank\" rel=\"noopener\"><code>If-None -Match</code></a> header字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; If-None-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>服务器将客户端的ETag（作为If-None-Match字段的值一起发送）与其当前版本的资源的ETag进行比较，如果两个值匹配（即资源未更改），服务器将返回不带任何内容的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304\" target=\"_blank\" rel=\"noopener\"><code>304</code></a>未修改状态，告诉客户端缓存版本可用（新鲜）。</p>\n</blockquote>\n<p>可以推理出如下的代码了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (path === <span class=\"string\">'/js/main.js'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> string = fs.readFileSync(<span class=\"string\">'./js/main.js'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/javascript;charset=utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileMd5 = md5(string)</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">'ETag'</span>, fileMd5)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.headers[<span class=\"string\">'if-none-match'</span>] === fileMd5) &#123;</span><br><span class=\"line\">      response.statusCode = <span class=\"number\">304</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      response.write(string) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"304状态码的含义\"><a href=\"#304状态码的含义\" class=\"headerlink\" title=\"304状态码的含义\"></a>304状态码的含义</h3><blockquote>\n<p> HTTP <strong>304</strong> 说明无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/safe\" target=\"_blank\" rel=\"noopener\">safe</a>），例如<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" rel=\"noopener\"><code>GET</code></a> 或<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD\" target=\"_blank\" rel=\"noopener\"><code>HEAD</code></a> 或在请求中附带了头部信息： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match\" target=\"_blank\" rel=\"noopener\"><code>If-None-Match</code></a>或<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Modified-Since\" target=\"_blank\" rel=\"noopener\"><code>If-Modified-Since</code></a>。</p>\n</blockquote>\n<p>304和缓存的区别：</p>\n<ol>\n<li>缓存不会发起请求了，直接从内存或者硬盘中获得</li>\n<li>304依然会发起请求与响应，只不过响应的第四部分不用再次下载了，因为没有更改，所以还是第一次下载的资源。</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-10/68663233.jpg\" alt=\"304与缓存的区别\"></p>\n<h2 id=\"几个常见的考题\"><a href=\"#几个常见的考题\" class=\"headerlink\" title=\"几个常见的考题\"></a>几个常见的考题</h2><h3 id=\"Cookie和Session的区别\"><a href=\"#Cookie和Session的区别\" class=\"headerlink\" title=\"Cookie和Session的区别\"></a>Cookie和Session的区别</h3><ol>\n<li>Cookie是存放在浏览器端的数据，每次都随请求发送给 Server。存储<code>cookie</code>是浏览器提供的功能。<code>cookie</code> 其实是存储在浏览器中的纯文本，浏览器的安装目录下会专门有一个 cookie 文件夹来存放各个域下设置的<code>cookie</code>。</li>\n<li>而Session是存放在服务器端的内存中，其 Session ID 是通过 Cookie 发送给客户端的，这个Session ID每次都随请求发送给 Server。</li>\n</ol>\n<h3 id=\"Cookie-和-LocalStorage-的区别\"><a href=\"#Cookie-和-LocalStorage-的区别\" class=\"headerlink\" title=\"Cookie 和 LocalStorage 的区别\"></a>Cookie 和 LocalStorage 的区别</h3><ol>\n<li><code>Set-Cookie</code>之后，用户的每次访问服务器，请求里面都会带着<code>Cookie</code>到服务器上，与HTTP有关，而<code>LocalStorage</code>不用发到服务器端，它是存储在浏览器里面的，与HTTP无关，是浏览器的属性，<code>window.localStorage</code>。</li>\n<li><code>Cookie</code>一般比较小，大约4k左右，而<code>LocalStorage</code>大约能用5M</li>\n<li><code>Cookie</code>默认会在用户关闭页面后失效，不过后端可以设置保存时间，而<code>LocalStorage</code>永久有效，除非用户手动清理。</li>\n</ol>\n<h3 id=\"LocalStorage-和-SessionStorage-的区别\"><a href=\"#LocalStorage-和-SessionStorage-的区别\" class=\"headerlink\" title=\"LocalStorage 和 SessionStorage 的区别\"></a>LocalStorage 和 SessionStorage 的区别</h3><ol>\n<li><code>LocalStorage</code>永久有效，除非用户手动清理<code>localStorage.clear()</code>。不会自动过期</li>\n<li>但是SessionStorage在会话结束后就会失效，也就是用户关闭了页面，就失效了。会自动过期</li>\n</ol>\n<h3 id=\"Cookie-如何设置过期时间？如何删除-Cookie？\"><a href=\"#Cookie-如何设置过期时间？如何删除-Cookie？\" class=\"headerlink\" title=\"Cookie 如何设置过期时间？如何删除 Cookie？\"></a>Cookie 如何设置过期时间？如何删除 Cookie？</h3><ol>\n<li><p>设置过期时间：<code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Expires=&lt;date&gt;</code></p>\n<p>data`是格林威治时间，响应头里里面应该这么写代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">'Expires'</span>, <span class=\"string\">'Fri, 09 Feb 2018 11:29:48 GMT'</span>)</span><br></pre></td></tr></table></figure>\n<p>也就是说Cookie在格林威治时间的2018年2月9号的11点29分48秒失效。</p>\n</li>\n<li><p>设置cookie过期时间小于当前时间，那么就会删除该cookie。</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCookie</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.cookie = name + <span class=\"string\">'=;  expires=Thu, 01 Jan 1970 00:00:01 GMT;'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Cache-Control-max-age-1000-缓存-与-ETag-的「缓存」有什么区别？\"><a href=\"#Cache-Control-max-age-1000-缓存-与-ETag-的「缓存」有什么区别？\" class=\"headerlink\" title=\"Cache-Control: max-age=1000 缓存 与 ETag 的「缓存」有什么区别？\"></a>Cache-Control: max-age=1000 缓存 与 ETag 的「缓存」有什么区别？</h3><ol>\n<li><code>Cache-Control: max-age=1000</code>的缓存 是直接不发请求的，1000秒内相同URL的用户请求资源的时候，不会再去发请求访问服务器了，直接从本地内存的缓存里面获取</li>\n<li><code>ETag</code>的缓存是不管怎么样都要发起请求，第二次访问的是时候会多一个请求头<code>If-None-Match : md5值</code>，如果两次请求之间的MD5值相同就不会去下载新的文件，响应体是第一次下载的；如果MD5值变了，就要去下载新的文件。</li>\n</ol>\n","categories":["HTTP高级知识"],"tags":["HTTP"]},{"title":"一块小饼干的故事-Cookie-的故事-下篇","url":"https://codevvvv9.github.io/2018/02/09/一块小饼干的故事-Cookie-的故事-下篇/","content":"<blockquote>\n<p>上篇介绍了注册的基本流程，下篇简单的讲讲登录的流程以及Cookie的出现</p>\n</blockquote>\n<h2 id=\"实现登录的小功能\"><a href=\"#实现登录的小功能\" class=\"headerlink\" title=\"实现登录的小功能\"></a>实现登录的小功能</h2><p>当你在浏览器的输入框里输入<code>localhost:8080/sign_in</code>的时候，会发起<code>GET</code>请求，去访问<code>sign_in.html</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (path === <span class=\"string\">'/sign_up'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> string = fs.readFileSync(<span class=\"string\">'./sign_up.html'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">  response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">  response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/html;charset=utf-8'</span>)</span><br><span class=\"line\">  response.write(string)</span><br><span class=\"line\">  response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CSS布局与上篇的布局基本一样，略去不表～</p>\n<a id=\"more\"></a>\n<h3 id=\"比对用户的信息与数据库里面的信息是否匹配\"><a href=\"#比对用户的信息与数据库里面的信息是否匹配\" class=\"headerlink\" title=\"比对用户的信息与数据库里面的信息是否匹配\"></a>比对用户的信息与数据库里面的信息是否匹配</h3><p>依然是上篇的套路，获得用户formdata后，分析数据，和数据库里面的比对</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users = fs.readFileSync(<span class=\"string\">'./db/users'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\tusers = <span class=\"built_in\">JSON</span>.parse(users) <span class=\"comment\">//[] JSON也支持数组</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (exception) &#123;</span><br><span class=\"line\">\tusers = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> found </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; users.length; i++) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (users[i].email === email &amp;&amp; users[i].password === password) &#123;</span><br><span class=\"line\">  found = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (found) &#123;</span><br><span class=\"line\">  response.setHeader(<span class=\"string\">'Set-Cookie'</span>, <span class=\"string\">`sign_in_email=<span class=\"subst\">$&#123;email&#125;</span>;HTTPOnly`</span>)</span><br><span class=\"line\">  response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  response.statusCode = <span class=\"number\">401</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不同的是引入了一个<code>header</code>，也就是今天的主角–<strong>Cookie</strong></p>\n<p>其实这和平常上网的情形类似的，有时候我们访问一些购物网站，并没有登录，但是你在购物车里面添加东西了，当你逛了以后再回来的时候，发现购物车里面有你的记录，帮你做这个事的也是cookie。</p>\n<blockquote>\n<p>因为<a href=\"https://zh.wikipedia.org/wiki/HTTP\" target=\"_blank\" rel=\"noopener\">HTTP协议</a>是无状态的，即<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8\" target=\"_blank\" rel=\"noopener\">服务器</a>不知道用户上一次做了什么，这严重阻碍了<a href=\"https://zh.wikipedia.org/w/index.php?title=%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">交互式Web应用程序</a>的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么，所以Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器<a href=\"https://zh.wikipedia.org/wiki/%E4%BC%9A%E8%AF%9D_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6\" target=\"_blank\" rel=\"noopener\">会话</a>)中的状态。</p>\n</blockquote>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/21324547.jpg\" alt=\"设置头\"></p>\n<p>可以看出，当你在sign_in发起<code>GET</code>请求并设置了<code>Set-Cookie</code>之后，其他的同源的页面，又都会带上<code>Cookie</code>，也就能保证同源的网页向服务器发起请求的时候，服务器能够明白，你己经是登录的用户了，与那些没有拿到cookie的页面区别开来。</p>\n<h2 id=\"Cookie的入门\"><a href=\"#Cookie的入门\" class=\"headerlink\" title=\"Cookie的入门\"></a>Cookie的入门</h2><p>为什么要在cookie里面写上<code>HttpOnly</code>呢，因为这个可以防止有些牛人使用<code>JS</code>修改Cookie的内容。</p>\n<ul>\n<li>如果不写这个的话，可以使用<code>js</code>修改的</li>\n</ul>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/39633071.jpg\" alt=\"js修改cookie\"></p>\n<p>写了<code>HttpOnly</code>之后将无法修改</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/34957386.jpg\" alt=\"无法修改\"></p>\n<h3 id=\"ga是啥\"><a href=\"#ga是啥\" class=\"headerlink\" title=\"_ga是啥\"></a>_ga是啥</h3><p>这个是Chrome的功能，用于分析cookie的</p>\n<p>每一部分的作用详见<a href=\"https://stackoverflow.com/questions/16102436/what-are-the-values-in-ga-cookie\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"Cookie的特点\"><a href=\"#Cookie的特点\" class=\"headerlink\" title=\"Cookie的特点\"></a>Cookie的特点</h3><p>通过上述的例子，可以总结几点重要的特点</p>\n<ol>\n<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>\n<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>\n<li>服务器读取 Cookie 就知道登录用户的信息（email）</li>\n</ol>\n<p>当然了，还有几个问题需要解答一下。</p>\n<ol>\n<li>Cookie 存在哪<br>存在硬盘的一个文件里面</li>\n<li>Cookie会被用户篡改吗？<br>可以，也就是说它并不安全的。</li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/61442859.jpg\" alt=\"不安全\"></p>\n<ol start=\"3\">\n<li>Cookie 有效期吗？</li>\n</ol>\n<p>默认有效期20分钟左右，不同浏览器策略不同<br>后端可以强制设置有效期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Expires=&lt;date&gt;</span><br><span class=\"line\">Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Max-Age=&lt;non-zero-digit&gt;</span><br></pre></td></tr></table></figure>\n<p>具体语法看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"noopener\">Set-Cookie</a></p>\n<h3 id=\"用户登录后，首页显示不同\"><a href=\"#用户登录后，首页显示不同\" class=\"headerlink\" title=\"用户登录后，首页显示不同\"></a>用户登录后，首页显示不同</h3><p>既然你成功登录，理应跳转到首页，并显示相应的界面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.post(<span class=\"string\">'/sign_in'</span>, hash)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.location.href = <span class=\"string\">'/'</span></span><br><span class=\"line\">&#125;, </span><br><span class=\"line\">(request) =&gt; &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'邮箱与密码不匹配'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>然后首页的信息应该根据用户信息做出相应的变化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cookies = request.headers.cookie.split(<span class=\"string\">'; '</span>) <span class=\"comment\">//['email=..@..', 'a=1']</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hash = &#123;&#125;</span><br><span class=\"line\">cookies.forEach(<span class=\"function\">(<span class=\"params\">cookie</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> parts = cookie.split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> key = parts[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = parts[<span class=\"number\">1</span>]</span><br><span class=\"line\">  hash[key] = value</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> email = hash.sign_in_email</span><br><span class=\"line\"><span class=\"keyword\">let</span> users = fs.readFileSync(<span class=\"string\">'./db/users'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">users = <span class=\"built_in\">JSON</span>.parse(users)</span><br><span class=\"line\"><span class=\"keyword\">let</span> foundUser</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; users.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (users[i].email === email) &#123;</span><br><span class=\"line\">    foundUser = users[i]</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (foundUser) &#123;</span><br><span class=\"line\">  string = string.replace(<span class=\"string\">'email'</span>, foundUser.email)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  string = string.replace(<span class=\"string\">'恭喜，email你已成功登录'</span>, <span class=\"string\">'没有该用户'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的代码逻辑与上篇的基本一致，唯一的不同在于第一行代码</p>\n<p><code>let cookies = request.headers.cookie.split(&#39;; &#39;) //[&#39;email=..@..&#39;, &#39;a=1&#39;]</code></p>\n<p>为什么用<code>；</code>字符来分割呢，这是因为可以有多个cookie</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/85533637.jpg\" alt=\"多个cookie\"></p>\n<h3 id=\"Cookie的两个作用\"><a href=\"#Cookie的两个作用\" class=\"headerlink\" title=\"Cookie的两个作用\"></a>Cookie的两个作用</h3><p>一般来说常见的作用有如下两个：</p>\n<ol>\n<li>识别用户的身份。当用户A去访问<code>localhost:8080</code>的时候，服务器会给A一个独一无二的<code>id=00A</code>(这就是cookie)，当用户A访问<code>localhost:8080</code>的其他网页的时候，都会带着那个独一无二的id。当B用户来访问<code>localhost:8080</code>的时候，服务器发现他没有任何标识，也会给他一个独一无二的<code>id=00B</code>，所以借助cookie服务器端就能够分清楚谁是谁了。</li>\n<li>记录你的浏览历史。最常见的需求就是你去逛购物网站，你添加到购物车里面的东西过几天一定会在，而不会凭空消失了。例如A用户去<code>taobao.com</code>去买点东西，添加了一个热水壶、一部小米手机到购物车里面，那么服务器端可以改写你上面的cookie使之具体化「id=00A; cart=A1,A2」，表示你购物车里面买了俩东西。你过几天想起来了，去购物车里面看，热水壶、小米手机还在里面。浏览器并不会删除你存到硬盘上的cookie。</li>\n</ol>\n<h3 id=\"一张图总结注册登录的过程\"><a href=\"#一张图总结注册登录的过程\" class=\"headerlink\" title=\"一张图总结注册登录的过程\"></a>一张图总结注册登录的过程</h3><p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-9/88982109.jpg\" alt=\"登录注册的过程\"></p>\n<p>接下来可以去搞一搞其他的，像什么<code>session</code> <code>LocalStorage</code>……(<em>@ο@</em>) 哇～</p>\n<p>代码链接<a href=\"https://github.com/codevvvv9/AJAXDemo_nodeJsServer/blob/master/sign_in.html\" target=\"_blank\" rel=\"noopener\">sign_in.html</a></p>\n<p><a href=\"https://github.com/codevvvv9/AJAXDemo_nodeJsServer/blob/master/server.js\" target=\"_blank\" rel=\"noopener\">server.js</a></p>\n","categories":["HTTP高级知识"],"tags":["HTTP"]},{"title":"一块小饼干-Cookie-的故事-上篇","url":"https://codevvvv9.github.io/2018/02/09/一块小饼干-Cookie-的故事-上篇/","content":"<blockquote>\n<p>cookie 如果非要用汉语理解的话应该是 一段小型文本文件，由网景的创始人之一的<a href=\"https://zh.wikipedia.org/wiki/%E7%9B%A7%C2%B7%E8%92%99%E7%89%B9%E5%88%A9\" target=\"_blank\" rel=\"noopener\">卢 蒙特利</a>在93年发明。</p>\n<p>上篇是熟悉一下注册的大致流程，下篇熟悉登录流程以及真正的Cookie</p>\n</blockquote>\n<h2 id=\"实现基本的注册功能\"><a href=\"#实现基本的注册功能\" class=\"headerlink\" title=\"实现基本的注册功能\"></a>实现基本的注册功能</h2><p>我们打开网站，浏览网站，最常见的两个操作就是注册以及登录，所以有必要探索一下这两个功能如何实现的。</p>\n<p>本地模拟，当输入<code>localhost:8080/sign_up</code>的时候，浏览器发起<code>get</code>请求，服务器给你响应<code>sign_up.html</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务器端代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (path === <span class=\"string\">'/sign_up'</span> &amp;&amp; method === <span class=\"string\">'GET'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> string = fs.readFileSync(<span class=\"string\">'./sign_up.html'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/html;charset=utf-8'</span>)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"CSS布局的几个小坑\"><a href=\"#CSS布局的几个小坑\" class=\"headerlink\" title=\"CSS布局的几个小坑\"></a>CSS布局的几个小坑</h3><p>在写<code>sign_up.html</code>的时候，注意几点css知识：</p>\n<ol>\n<li>如果想让你的登录页面的body占满整个屏幕，随着窗口的大小变化而变化的话，可以写</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>&#125;</span><br><span class=\"line\">//或者</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>&#125;</span><br><span class=\"line\">//不能这么写</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>当然了，实际上这么写就可以了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>label</code>标签是<code>display: inline</code>，不能设置宽度，<strong>行内元素则会根据行内内容自适应宽度</strong>，所以行内元素设置width是没有效果的。改成<code>inline-block就可以了</code></li>\n</ol>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/78722664.jpg\" alt=\"很丑的界面的\"></p>\n<h3 id=\"获得用户的数据\"><a href=\"#获得用户的数据\" class=\"headerlink\" title=\"获得用户的数据\"></a>获得用户的数据</h3><p>既然是注册的需求，那么我们首要关注的点就是–用户的注册信息我们如何获得呢</p>\n<p>选择合理的数据结构存储数据是很重要的。</p>\n<ol>\n<li>每个<code>input</code>的<code>name</code>可以使用数组存储</li>\n<li><code>input</code>的<code>value</code>应该使用<code>hash</code>,也就是对象来存储。</li>\n<li>上述的套路会一直用下去，<strong><code>hash+[]</code></strong>的组合。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用jq来写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hash = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> $form = $(<span class=\"string\">'#signUpForm'</span>)</span><br><span class=\"line\">$form.on(<span class=\"string\">'submit'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault() <span class=\"comment\">//不用form表单的默认提交，而是使用我们的的ajax提交</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> need = [<span class=\"string\">'email'</span>, <span class=\"string\">'password'</span>, <span class=\"string\">'password_confirmation'</span>]</span><br><span class=\"line\">  need.forEach(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = $form.find(<span class=\"string\">`[name=<span class=\"subst\">$&#123;name&#125;</span>]`</span>).val()</span><br><span class=\"line\">  hash[name] = value</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>最终<code>hash</code>里面存储的就是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'email'</span>: <span class=\"string\">'...'</span>,</span><br><span class=\"line\">  <span class=\"string\">'password'</span>: <span class=\"string\">'...'</span>,</span><br><span class=\"line\">  <span class=\"string\">'password_confirmation'</span>: <span class=\"string\">'...'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到目前为止我们把用户的数据封装到了一个对象里面了。</p>\n<p>不过在把hash用ajax发出去之前要先进行一些必要的非空验证</p>\n<h3 id=\"非空验证\"><a href=\"#非空验证\" class=\"headerlink\" title=\"非空验证\"></a>非空验证</h3><p>主要是检测邮箱是否为空、密码是否为空、两次输入的密码是否一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发起请求之前验证是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hash[<span class=\"string\">'email'</span>] === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">  $form.find(<span class=\"string\">'[name=\"email\"]'</span>).siblings(<span class=\"string\">'.errors'</span>).text(<span class=\"string\">'请您输入邮箱'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">//精髓啊，不然没用了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hash[<span class=\"string\">'password'</span>] === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">  $form.find(<span class=\"string\">'[name=\"password\"]'</span>).siblings(<span class=\"string\">'.errors'</span>).text(<span class=\"string\">'请您输入密码'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">//精髓啊，不然没用了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hash[<span class=\"string\">'password_confirmation'</span>] === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">    $form.find(<span class=\"string\">'[name=\"password_confirmation\"]'</span>).siblings(<span class=\"string\">'.errors'</span>).text(<span class=\"string\">'请您再次输入确认密码'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">//精髓啊，不然没用了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hash[<span class=\"string\">'password'</span>] !== hash[<span class=\"string\">'password_confirmation'</span>]) &#123;</span><br><span class=\"line\">  $form.find(<span class=\"string\">'[name=\"password_confirmation\"]'</span>).siblings(<span class=\"string\">'.errors'</span>).text(<span class=\"string\">'两次输入密码不匹配'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">//精髓啊，不然没用了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果忘记写return的话，即使你为空了还是会直接越过这一步检测，去发起ajax请求的，所以一定不要忘了写上return false.</li>\n<li>如果仅仅这么写的话会有一个bug。当出现错误提示后，你把信息填对了，错误信息依然显示，这显然是不合理的。应该填入信息后，错误信息就消失的。</li>\n</ul>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/78635036.jpg\" alt=\"bug\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$form.find(<span class=\"string\">'.errors'</span>).each(<span class=\"function\">(<span class=\"params\">index, span</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t$(span).text(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用上述的jq代码来解决这个bug即可。</p>\n<p>非空验证完了之后，意味着浏览器收集用户数据的工作完成了，可以把hash发到服务器端了，接下来就是ajax请求了。</p>\n<h3 id=\"使用ajax提交数据\"><a href=\"#使用ajax提交数据\" class=\"headerlink\" title=\"使用ajax提交数据\"></a>使用ajax提交数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.post(<span class=\"string\">'/sign_up'</span>, hash)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//成功了就打印这个  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//错误了打印这个</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器端解析formData\"><a href=\"#服务器端解析formData\" class=\"headerlink\" title=\"服务器端解析formData\"></a>服务器端解析formData</h3><p>因为formData是一段一段上传的(具体原因略复杂，可以取极限法，如果formdata很多，不可能一下子上传过来)，自己不会写，就去搜索代码片段解析formdata</p>\n<p><code>google: node get post data</code></p>\n<p>把获得的代码封装成了一个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readBody</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> body = []</span><br><span class=\"line\">      request.on(<span class=\"string\">'data'</span>, (chunk) =&gt; &#123;</span><br><span class=\"line\">        body.push(chunk)</span><br><span class=\"line\">      &#125;).on(<span class=\"string\">'end'</span>, () =&gt; &#123;</span><br><span class=\"line\">        body = Buffer.concat(body).toString();</span><br><span class=\"line\">          resolve(body)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用上述代码片段呢</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (path === <span class=\"string\">'/sign_up'</span> &amp;&amp; method === <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">    readBody(request).then(<span class=\"function\">(<span class=\"params\">body</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> strings = body.split(<span class=\"string\">'&amp;'</span>) <span class=\"comment\">//['email=1', 'password=2', 'password_confirmmation=3']</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> hash = &#123;&#125;</span><br><span class=\"line\">      strings.forEach(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//想得到类似这种的 string == 'email=1'</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> parts = string.split(<span class=\"string\">'='</span>) <span class=\"comment\">//再用=分割,得到['email', '1']</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = parts[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = parts[<span class=\"number\">1</span>]</span><br><span class=\"line\">        hash[key] = <span class=\"built_in\">decodeURIComponent</span>(value)<span class=\"comment\">//hash['email'] = '1'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;email, password, password_confirmation&#125; = hash <span class=\"comment\">//ES6的解构赋值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<p>当服务器端接收到了所有的formdata数据后，其实是一串形如<code>email=1&amp;password=2&amp;password_confirmation=3</code></p>\n<p>的字符串，所以我们考虑使用<code>&amp;</code>字符分割成数组。</p>\n<ul>\n<li>得到一个形如<code>[&#39;email=1&#39;, &#39;password=2&#39;, &#39;confirmation=3&#39;]</code>的数组之后，我们为了得到<code>string = &#39;email=1&#39;</code>这种形式的，开始遍历数组，把数组的每个元素按照<code>=</code>分割，得到 <code>[email, 1]</code></li>\n<li>用第二小节提供的<code>hash+[]</code>方法，处理成hash</li>\n</ul>\n<h2 id=\"服务器端简单的校验\"><a href=\"#服务器端简单的校验\" class=\"headerlink\" title=\"服务器端简单的校验\"></a>服务器端简单的校验</h2><p>既然服务器端已经获得了<code>formdata</code>了，那么应该进行一下简单的校验，比如邮箱的格式，没有问题了就把数据存到数据库里面。(目前校验水平很入门，没有涉及到完备的注册校验功能)</p>\n<h3 id=\"校验前的准备工作\"><a href=\"#校验前的准备工作\" class=\"headerlink\" title=\"校验前的准备工作\"></a>校验前的准备工作</h3><p>上一节我们把formdata完美的封装到了hash里面，为了校验我们要把hash再拆开一个一个的看</p>\n<p>或许这么做是最直接的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> email = hash[<span class=\"string\">'emai'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> password = hash[<span class=\"string\">'password'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> password_confirmation = hash[<span class=\"string\">'password_confirmation'</span>]</span><br></pre></td></tr></table></figure>\n<p>不过ES6提供了一种解构赋值的语法糖，很甜很贴心……</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;email, password, password_confirmation&#125; = hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"由-编码引发的bug\"><a href=\"#由-编码引发的bug\" class=\"headerlink\" title=\"由@编码引发的bug\"></a>由@编码引发的bug</h3><p>好了，我们这一步就先看看邮箱格式是否正确。</p>\n<p>我是菜鸟级校验邮箱，看到了邮箱的独特标志---<code>@</code>，最起码有这个标志才叫邮箱吧，也就是说没有这个标志，我就可以认为邮箱格式不对啊，翻译成代码就是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (email.indexOf(<span class=\"string\">'@'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  response.statusCode = <span class=\"number\">400</span></span><br><span class=\"line\">  response.write(<span class=\"string\">'email is bad'</span>) <span class=\"comment\">//单引号只是为了标记这是一个字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很好，目前来说，事情的发展都很正常，直到一个bug的到来。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/63886564.jpg\" alt=\"正常的也报错了\"></p>\n<p>一个合法的邮箱，却进入了非法邮箱处理的代码片段里面……</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/3076171.jpg\" alt=\"很疑惑\"></p>\n<p>毫无疑问，邮箱是合法的，代码也是合理的，那么出问题的必然是我，某个地方的理解有问题。</p>\n<ul>\n<li>找bug,把可能出错的代码片段分成几个区间，打log.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(email.indexOf(<span class=\"string\">'@'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(email)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/74625962.jpg\" alt=\"真的是-1\"></p>\n<p>没错，<code>email</code>这个字符串的<code>@</code>索引真的是-1，可是我的邮箱写的明明有<code>@</code>啊。</p>\n<p>为啥呢，接着又打印出了<code>email</code>的内容，终于真相大白了，<code>email</code>字符串里面真的没有<code>@</code>，</p>\n<p>却发现了一串你没想到的<code>%40</code>，(⊙v⊙)嗯，没错了，这就是我认为的那个<code>@</code>的另一个形态。</p>\n<ul>\n<li>我在浏览器看到的只是浏览器想让我看到的东西而已，既然已经被浏览器处理了，那到了服务器端自然无法处理。</li>\n<li>那这个<code>%40</code>哪来的呢</li>\n</ul>\n<p>Google走起，在<a href=\"https://www.w3schools.com/tags/ref_urlencode.asp\" target=\"_blank\" rel=\"noopener\">w3schools的HTML URL Encoding Reference</a>找到了解释(不是国内的w3school……)</p>\n<blockquote>\n<p>URL encoding converts characters into a format that can be transmitted over the Internet.</p>\n</blockquote>\n<p>URL编码把字符转化成了一种可以在互联网上传播的格式，也就是说，我在网页上看到的字符是被URL编码处理的结果。</p>\n<ul>\n<li>那接下来就去搞定什么是URL编码</li>\n</ul>\n<p>搞定这个之前，文档先要让你明白啥是<code>URL</code></p>\n<blockquote>\n<p>Web browsers request pages from web servers by using a URL.</p>\n<p>The URL is the address of a web page, like: <strong><a href=\"https://www.w3schools.com\" target=\"_blank\" rel=\"noopener\">https://www.w3schools.com</a>.</strong></p>\n</blockquote>\n<p>Web浏览器通过使用URL从Web服务器请求页面。 该网址是网页的地址，例如：https：//<a href=\"http://www.w3schools.com。\" target=\"_blank\" rel=\"noopener\">www.w3schools.com。</a></p>\n<hr>\n<p>复习一下URL的组成6部分：</p>\n<p><a href=\"https://www.baidu.com/s?wd=hello&amp;rsv_spt=1#5\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=hello&amp;rsv_spt=1#5</a> 通过这个你就可以访问到一个 “唯一的” 网址</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>https:</td>\n<td>协议</td>\n</tr>\n<tr>\n<td><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></td>\n<td>域名</td>\n</tr>\n<tr>\n<td>/s</td>\n<td>路径</td>\n</tr>\n<tr>\n<td>wd=hello&amp;rsv_spt=1</td>\n<td>查询参数</td>\n</tr>\n<tr>\n<td>#5</td>\n<td>锚点</td>\n</tr>\n<tr>\n<td>端口</td>\n<td>默认80</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>复习完了<code>URL</code>，继续搞<code>URL编码</code></p>\n<blockquote>\n<p>URLs can only be sent over the Internet using the <a href=\"https://www.w3schools.com/charsets/ref_html_ascii.asp\" target=\"_blank\" rel=\"noopener\">ASCII character-set</a>.</p>\n<p>Since URLs often contain characters outside the ASCII set, the URL has to be converted into a valid ASCII format.</p>\n<p>URL encoding replaces unsafe ASCII characters with a “%” followed by two hexadecimal digits.</p>\n<p>URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign or with %20.</p>\n</blockquote>\n<ul>\n<li>URL只能用ASCII编码在互联网之间发送。</li>\n<li>既然URL通常包括ASCII字符编码集之外的字符(很明显嘛，ASCII码表太少)，所以URL必须转化成有效的ASCII格式。</li>\n<li><strong>这是重点</strong>，URL编码使用<code>%</code>后面紧跟着两个16进制数字的编码格式来代替不安全的ASCII码表</li>\n<li>URL不能包括空格。所以URL编码通常使用+号或者<code>20%</code>来代替空格。</li>\n</ul>\n<p>继续往下翻，找到了<code>%40</code>。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/97404637.jpg\" alt=\"@符号的解释\"></p>\n<p>所以要把<code>value</code>的值解码回去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash[key] = <span class=\"built_in\">decodeURIComponent</span>(value)</span><br></pre></td></tr></table></figure>\n<p><code>decodeURIComponent()</code> 方法用于解码由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"noopener\"><code>encodeURIComponent</code></a> 方法或者其它类似方法编码的部分统一资源标识符（URI）。毕竟<code>URL</code>属于<code>URI</code>。</p>\n<h3 id=\"错误信息的提示方法\"><a href=\"#错误信息的提示方法\" class=\"headerlink\" title=\"错误信息的提示方法\"></a>错误信息的提示方法</h3><p>如果有了错，需要提示用户错了，后端写的代码，用户不一定看的懂，需要前端润色一下使用户看懂，或者前端和后端沟通一下，maybe后端脾气不好，前端也是暴脾气，所以应该选择一个前后端都要用的东西做桥梁，很明显<code>JSON</code>是完美的候选人。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (email.indexOf(<span class=\"string\">'@'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  response.statusCode = <span class=\"number\">400</span></span><br><span class=\"line\">  response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json;charset=utf-8'</span>) <span class=\"comment\">//直接告诉浏览器我是json</span></span><br><span class=\"line\">  response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      \"errors\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">      \"email\": \"invalid\"</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就合理多了，后台只管写个json给前台看，其他不管了，前台翻译一下给用户看喽～</p>\n<p>那么前台如何获得这个<code>json</code>呢</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.post(<span class=\"string\">'/sign_up'</span>, hash)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//成功了就打印这个  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">(request, b, c) =&gt; &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(request)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(c)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>忘记了错误函数里面的参数是啥了，那就都打印出来看看。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/48577590.jpg\" alt=\"如果没用JSON的话\"></p>\n<p>可以看到，如果没用JSON的话，request对象里面有一个后端写的responseText属性可以利用。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/53044190.jpg\" alt=\"\"></p>\n<p>设置了<code>Content-Type:application/json;charset=utf-8</code>之后，可以利用多出来的<code>responseJSON</code>属性，获得json的内容啊。</p>\n<p>最终失败函数里面写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(request) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123;errors&#125; = request.responseJSON\t</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errors.email &amp;&amp; errors.email === <span class=\"string\">'invalid'</span>) &#123;</span><br><span class=\"line\">    $form.find(<span class=\"string\">'[name=\"email\"]'</span>).siblings(<span class=\"string\">'.errors'</span>).text(<span class=\"string\">'您输入的邮箱错啦'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"校验邮箱是否已经存在了\"><a href=\"#校验邮箱是否已经存在了\" class=\"headerlink\" title=\"校验邮箱是否已经存在了\"></a>校验邮箱是否已经存在了</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users = fs.readFileSync(<span class=\"string\">'./db/users'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  users = <span class=\"built_in\">JSON</span>.parse(users) <span class=\"comment\">//[] JSON也支持数组</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (exception) &#123;</span><br><span class=\"line\">  users = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> inUse = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; users.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = users[i]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user.email === email) &#123;</span><br><span class=\"line\">    inUse = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (inUse) &#123;</span><br><span class=\"line\">  response.statusCode = <span class=\"number\">400</span></span><br><span class=\"line\">  response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json;charset=utf-8'</span>)</span><br><span class=\"line\">  response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      \"errors\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">      \"email\": \"inUse\"</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本文并没有使用真正意义上的数据库，只是使用了简单的db文件做数据库，其实就是存的数组，也就是users其实就是数组<code>[]</code>。</p>\n<ul>\n<li>之所以使用了<code>try{}catch(){}</code>，是因为一旦除了错，可以将其初始化为空数组，后续代码可以继续执行，可能并不严谨，不过本文是侧重了解注册的思路的。</li>\n</ul>\n<p>同样的，如果邮箱已经存在了，就提示用户</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (errors.email &amp;&amp; errors.email === <span class=\"string\">'inUse'</span>) &#123;</span><br><span class=\"line\">\t$form.find(<span class=\"string\">'[name=\"email\"]'</span>).siblings(<span class=\"string\">'.errors'</span>).text(<span class=\"string\">'这个邮箱已被注册啦'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>后端校验必须很严格，因为可以通过<code>curl</code>越过前端的校验。</p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/55736025.jpg\" alt=\"curl\"></p>\n<p><img src=\"http://p3tha6q4v.bkt.clouddn.com/18-2-8/7637310.jpg\" alt=\"使用curl发起请求\"></p>\n<hr>\n<h3 id=\"把信息写入数据库\"><a href=\"#把信息写入数据库\" class=\"headerlink\" title=\"把信息写入数据库\"></a>把信息写入数据库</h3><p>没有错误之后，就可以把信息写到数据库里面啦</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users.push(&#123;<span class=\"attr\">email</span>: email, <span class=\"attr\">password</span>: password&#125;)<span class=\"comment\">//是个对象啊</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> usersString = <span class=\"built_in\">JSON</span>.stringify(users)</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">'./db/users'</span>, usersString)</span><br><span class=\"line\">response.statusCode = <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<p>users实现是个对象，而对象是内存里面的东西，数据库里面应该存储的是字符串，所以用了<code>JSON.stringify(users)</code></p>\n<p>好啦，上篇注册篇结束啦，下篇讲一讲如何登录以及<code>Cookie</code>登场</p>\n<p>相关代码见<a href=\"https://github.com/codevvvv9/AJAXDemo_nodeJsServer/blob/master/sign_up.html\" target=\"_blank\" rel=\"noopener\">sign_up.html</a></p>\n<p><a href=\"https://github.com/codevvvv9/AJAXDemo_nodeJsServer/blob/master/server.js\" target=\"_blank\" rel=\"noopener\">server.js</a></p>\n","categories":["HTTP高级知识"],"tags":["HTTP"]},{"title":"科学上网","url":"https://codevvvv9.github.io/2018/02/03/科学上网/","content":"<h3 id=\"科学上网\"><a href=\"#科学上网\" class=\"headerlink\" title=\"科学上网\"></a>科学上网</h3><p>如何科学上网是个很严肃的问题(⊙o⊙)哦</p>\n<h3 id=\"以Linux为例\"><a href=\"#以Linux为例\" class=\"headerlink\" title=\"以Linux为例\"></a>以Linux为例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-pip; </span><br><span class=\"line\">sudo pip install shadowsocks;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果你遇到 _cleanup 不存在的提示，可能是遇到 bug 了，你要将 openssl.py 中的 _cleanup 全部改为 _reset 才行。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/02/03/5a75b42695d7c.png\" alt=\"如图的bug\"></p>\n<ul>\n<li>如果你不会改，使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">'s/_cleanup/_reset/g'</span> xxxxxxxxxxxxxxxxxxxxxx/openssl.py  </span><br><span class=\"line\"><span class=\"comment\">// 注意把 xxxxxxxxxxxxxxxxxxxxxx/openssl.py 改成图中的 openssl.py 文件的路径</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建sslocal-配置文件\"><a href=\"#创建sslocal-配置文件\" class=\"headerlink\" title=\"创建sslocal 配置文件\"></a>创建sslocal 配置文件</h3><p>创建 sslocal 配置文件（如果你不知道在哪创建就创建在 ~/.ssconf.json），配置文件的内容可使用我的服务器，你也可以自己买服务器（显然自己买服务器更靠谱）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    \"server\":\"45.76.180.233\", //自己买</span><br><span class=\"line\">    \"server_port\":27148, //自己买</span><br><span class=\"line\">    \"local_address\": \"127.0.0.1\",</span><br><span class=\"line\">    \"local_port\":1080,</span><br><span class=\"line\">    \"password\":\"A7#x8Jyzme)jkFfc\", //自己买</span><br><span class=\"line\">    \"timeout\":300,</span><br><span class=\"line\">    \"method\":\"aes-256-cfb\",</span><br><span class=\"line\">    \"fast_open\": false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可以使用了\"><a href=\"#可以使用了\" class=\"headerlink\" title=\"可以使用了\"></a>可以使用了</h3><ol>\n<li>使用 <code>ss-local -c ~/.ssconf.json</code> 或 <code>sslocal -c ~/.ssconf.json</code> 开启代理，其中 ~/.ssconf.json 是配置文件的路径-</li>\n</ol>\n","categories":["Linux入门"],"tags":["Linux"]},{"title":"AJAX的出现与跨域","url":"https://codevvvv9.github.io/2018/01/31/AJAX的出现与跨域/","content":"<blockquote>\n<p><code>XMLHttpRequest</code> <code>JSON</code> <code>AJAX</code> <code>CORS</code>  四个名词来开会</p>\n</blockquote>\n<h3 id=\"如何发请求\"><a href=\"#如何发请求\" class=\"headerlink\" title=\"如何发请求\"></a>如何发请求</h3><p>在前端的世界里也逛荡了不少日子了，目前已经get到大约5种发起请求的方式，主流的、非主流的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">何种方式</th>\n<th>请求方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">最常见的<code>form</code>表单</td>\n<td>默认<code>GET</code>，多用<code>POST</code>,只此两种</td>\n<td>会刷新页面或者新开页面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a</code> 标签</td>\n<td><code>GET</code>请求</td>\n<td>也会刷新页面或者新开页面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>img</code>的<code>src</code>属性</td>\n<td><code>GET</code></td>\n<td>只能以图片的形式展现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>link</code>标签</td>\n<td><code>GET</code></td>\n<td>只能以<code>CSS</code>、<code>favicon</code>的形式展现</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>script</code>标签</td>\n<td><code>GET</code></td>\n<td>只能以脚本的形式运行</td>\n</tr>\n</tbody>\n</table>\n<p>可是</p>\n<ul>\n<li>我们可能想用<code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> 方法</li>\n<li>不想刷新整个页面，想用一种更易于理解的方式来响应</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"AJAX出现\"><a href=\"#AJAX出现\" class=\"headerlink\" title=\"AJAX出现\"></a>AJAX出现</h3><h4 id=\"浏览器和服务器交互模式-V1-0\"><a href=\"#浏览器和服务器交互模式-V1-0\" class=\"headerlink\" title=\"浏览器和服务器交互模式 V1.0\"></a>浏览器和服务器交互模式 V1.0</h4><p>在<code>AJAX</code>未出现之前，浏览器想从服务器获得资源，注意是获取资源，会经过如下一个过程</p>\n<ul>\n<li>浏览器发起请求-&gt;服务器接到请求响应给你HTML文档-&gt;浏览器收到资源，刷新页面，加载获得的的HTML。简略的过程</li>\n</ul>\n<p>我称这种交互方式是 V1.0，此时还是以获取资源为导向。后来随着时代的发展，人们日益增长的文化需求成为了社会的主要矛盾……有一天，小明看了一篇报道，他只是想在下面评论一下，发表对实事的<strong><em>亲切问候</em></strong>，问候完了，唉，你给我刷新页面干啥，我只是想评论一下啊。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ba8990e4137695cd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"什么鬼\"></p>\n<p>大概那是网民们第一次对 <strong>良好的用户体验</strong> 提出了要求。后来的苹果爸爸，把大家惯坏了，天天嚷着 “你这产品用户体验太差了”……</p>\n<p>彼时，微软还是对web做出了很大的贡献的。</p>\n<h4 id=\"交互模式2-0\"><a href=\"#交互模式2-0\" class=\"headerlink\" title=\"交互模式2.0\"></a>交互模式2.0</h4><p>大约1999年，微软发布<code>IE 5.0</code>版本，它允许JavaScript脚本向服务器发起HTTP请求。不过很遗憾，当时也没有火起来，直到2004年Gmail发布和2005年Google Map发布，才引起广泛重视。2005年，一个叫Jesse James Garrett的人提出了一个新术语—-<code>AJAX</code>，它是一系列技术的组合体，全称是 <code>Asynchronous JavaScript + XML</code>(异步的JS和XML)可以阻止页面整体刷新，只是动态响应用户的操作，快速显示到局部，用户就可以很愉快的继续上网了。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX\" target=\"_blank\" rel=\"noopener\">AJAX</a></p>\n<p>可以看出IE当时还是很猛的，随着IE 6.0 市场份额进一步扩大，IE已经把火狐整的半死不活，放眼整个浏览器市场，微软是当之无愧的王者，后来微软就把浏览器团队解散了……不得不说这是一波神操作，能与之媲美的操作大概只有<code>残血我能反杀</code> <code>塔下我能秀他</code>了。微软强行为后续各家浏览器的发展提供了优秀的工程师，尤其是08、09年出生的谷歌浏览器，再看如今的IE……</p>\n<p>既然<code>AJAX</code>是一系列的技术的组合体，接下来认识一下其中的几位主角</p>\n<h4 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h4><p><code>XMLHttpRequest</code>对象是用来在浏览器和服务器之间传输数据的。</p>\n<p>古代的操作的是：</p>\n<ol>\n<li>浏览器构造<code>XMLHttpRequest</code>实例化对象</li>\n<li>用这个对象发起请求</li>\n<li>服务器响应一个<code>XML</code>格式的字符串，是字符串，是字符串，是字符串，也就是说响应的第四部分是字符串。</li>\n<li>JS解析符合XML格式的字符串，更新局部页面。</li>\n</ol>\n<p>什么是<a href=\"https://developer.mozilla.org/zh-CN/docs/XML_%E4%BB%8B%E7%BB%8D\" target=\"_blank\" rel=\"noopener\">XML</a>，<strong>可扩展</strong>标记语言。</p>\n<p>以上是最初的用法，用的是<code>XML</code>，前端代码片段如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> request = <span class=\"keyword\">new</span> XMLHttpRequest() <span class=\"comment\">//实例化XMLHttpRequest对象</span></span><br><span class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'请求和响应都完毕了'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.status &gt;= <span class=\"number\">200</span> &amp;&amp; request.status &lt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'说明请求成功了'</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(request.responseText)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> parser = <span class=\"keyword\">new</span> DOMParser()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> xmlDoc = parser.parseFromString(request.responseText, <span class=\"string\">\"text/xml\"</span>) </span><br><span class=\"line\">      <span class=\"comment\">//用parser解析request.responseText</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> c = xmlDoc.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].textContent</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(c)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.status &gt;= <span class=\"number\">400</span>)  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'说明请求失败了'</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">request.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/xxx'</span>) <span class=\"comment\">//配置request</span></span><br><span class=\"line\">request.send()</span><br></pre></td></tr></table></figure>\n<p>服务器端的对应代码片段如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/xml;charset=utf-8'</span>)</span><br><span class=\"line\">response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;note&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;to&gt;木木&lt;/to&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;from&gt;少少&lt;/from&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;heading&gt;你好哇&lt;/heading&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;body&gt;好久不见啊&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/note&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\">response.end()</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<hr>\n<p>本地模拟的话,一定要记得开俩不同的端口<br>例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js 8001</span><br><span class=\"line\">node server.js 8002</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"XMLHttpRequest实例的详解\"><a href=\"#XMLHttpRequest实例的详解\" class=\"headerlink\" title=\"XMLHttpRequest实例的详解\"></a>XMLHttpRequest实例的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"noopener\">详解</a></h4><p>正如上面的前端代码片段写的一样，主要用到了<code>open()</code> <code>send()</code>方法， <code>onreadystatechange</code> <code>readyState</code> 属性。</p>\n<ol>\n<li>request.open(method, URL, async)方法。<ul>\n<li>一般用三个参数，第一个参数是请求的方法，可以用<code>GET POST DELETE PUT</code>等等，URL是用访问的路径，async是是否使用同步，默认true,开启异步，不需要做修改即可，所以实际中只写前两个参数</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>如果非要写false，开启同步，<a href=\"http://javascript.ruanyifeng.com/bom/ajax.html\" target=\"_blank\" rel=\"noopener\">会对浏览器有阻塞效应</a>，而且如果值为false,则send()方法<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"noopener\">不会返回任何东西</a>，直到接受到了服务器的返回数据</li>\n</ul>\n<ol>\n<li>request.send()方法。<ul>\n<li>发送请求. 如果该请求是异步模式(默认),该方法会立刻返回. 相反,如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回</li>\n</ul>\n</li>\n<li><code>readyState</code>属性。<ul>\n<li>描述请求的五个状态。<ul>\n<li>0 === 常量 <code>UNSENT</code>(未打开)  open()方法未调用</li>\n<li>1 ===  <code>OPENED</code>  (未发送)   只是open()方法调用了</li>\n<li>2 === <code>HEADERS_RECEIVED (已获取响应头)</code> send()方法调用了，响应头和响应状态已经返回了</li>\n<li>3 === <code>LOADING (正在下载响应体)</code>  响应体下载中，<code>responseText</code>已经获取了部分数据</li>\n<li>4 === <code>DONE (请求完成)</code>  整个响应过程完毕了。 <strong><em>这个值是实际中用到的。</em></strong></li>\n<li>只要不等于4，就表示请求还在进行中。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>responseText</code>属性是此次响应的文本内容。</li>\n<li><code>onreadystatechange</code>属性。<ul>\n<li><code>readyState</code>属性的值发生改变，就会触发<code>readyStateChange</code>事件。</li>\n<li>我们可以通过<code>onReadyStateChange</code>属性，指定这个事件的回调函数，对不同状态进行不同处理。尤其是当状态变为4的时候，表示通信成功，这时回调函数就可以处理服务器传送回来的数据。即前面的代码片段的处理方式。</li>\n</ul>\n</li>\n<li>其他的方法、属性、事件详见<a href=\"http://javascript.ruanyifeng.com/bom/ajax.html#toc22\" target=\"_blank\" rel=\"noopener\">阮一峰博客</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"noopener\">MDN文档</a></li>\n</ol>\n<hr>\n<p>习惯用<code>javaScript</code>的前端是不想和<code>XML</code>打交道的，应该用一种符合<code>js</code>风格的数据格式语言。</p>\n<hr>\n<h4 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h4><p>后来一个美国程序员<a href=\"https://zh.wikipedia.org/wiki/%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF%C2%B7%E5%85%8B%E7%BE%85%E5%85%8B%E7%A6%8F%E7%89%B9\" target=\"_blank\" rel=\"noopener\">道格拉斯·克罗克福特</a>发明了<code>JSON</code>，解决了上面的问题，这货还写了一本蝴蝶书<a href=\"https://book.douban.com/subject/3590768/\" target=\"_blank\" rel=\"noopener\">JavaScript语言精粹</a>，还发明了一个<a href=\"http://zhenhua-lee.github.io/tools/linter.html\" target=\"_blank\" rel=\"noopener\">JS校验器</a> —-JSLint。</p>\n<blockquote>\n<p><strong>JSON</strong>(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于<a href=\"http://www.crockford.com/javascript\" target=\"_blank\" rel=\"noopener\">JavaScript Programming Language</a>, <a href=\"http://www.ecma-international.org/publications/files/ecma-st/ECMA-262.pdf\" target=\"_blank\" rel=\"noopener\">Standard ECMA-262 3rd Edition - December 1999</a>的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</p>\n</blockquote>\n<p>以上是<a href=\"http://json.org/\" target=\"_blank\" rel=\"noopener\">JSON官网</a>的简介，可以看出它是一门全新的语言，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\" target=\"_blank\" rel=\"noopener\">不是JavaScript的子集</a>。</p>\n<ol>\n<li><code>JSON</code>很简单，数据类型和JS有点不同的地方。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>JavaScript</th>\n<th>JSON</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>“string” 必须写双引号</td>\n</tr>\n<tr>\n<td>number</td>\n<td>number</td>\n</tr>\n<tr>\n<td>object</td>\n<td>{“object”: “name”} 必须双引号</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>没有</td>\n</tr>\n<tr>\n<td>null</td>\n<td>null</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>直接写true false</td>\n</tr>\n<tr>\n<td>array</td>\n<td>array</td>\n</tr>\n<tr>\n<td>function</td>\n<td>没有</td>\n</tr>\n<tr>\n<td>variable</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>浏览器的全局对象<code>window</code>上有<code>JSON</code>对象，直接使用<code>window.JSON.parse(string)</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> string = request.responseText</span><br><span class=\"line\"><span class=\"keyword\">let</span> json = <span class=\"built_in\">window</span>.JSON.parse(string) <span class=\"comment\">//string 要符合JSON的格式</span></span><br></pre></td></tr></table></figure>\n<p>以上是JSON解析部分的代码。</p>\n<p>此时服务器端代码是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/json;charset=utf-8'</span>)</span><br><span class=\"line\">response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      \"note\" : &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"to\" : \"木木\",</span></span><br><span class=\"line\"><span class=\"string\">        \"from\" : \"少少\",</span></span><br><span class=\"line\"><span class=\"string\">        \"heading\" : \"你好哇\",</span></span><br><span class=\"line\"><span class=\"string\">        \"content\" : \"好久不见啊\"</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>我们浏览器有同源政策，不是<strong>同协议 同域名 同端口</strong> 的网页无法相互访问。</li>\n</ol>\n<p>4.<code>AJAX</code>恰好是同源政策的拥趸</p>\n<h4 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h4><ol>\n<li>如果<code>AJAX</code>向非同源的地址发起请求，会报错。<ul>\n<li>这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200，也就是说即使你看到了200的正确码，也没有用</li>\n</ul>\n</li>\n<li>但是form表单无视同源政策，可以发起跨域请求。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;myButton&quot;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">&lt;form action=&quot;https://www.baidu.com&quot; method=&quot;get&quot;&gt;</span><br><span class=\"line\">   &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class=\"line\">   &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<p>上述请求响应都没有问题<br>然而对于<code>AJAX</code>就不行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">request.open(&apos;GET&apos;, &apos;http://www.baidu.com&apos;)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-060a110b41a721c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"同源的保护\"></p>\n<ul>\n<li>这是为什么呢,因为</li>\n</ul>\n<blockquote>\n<p>原页面用 form 提交到另一个域名之后，原页面的脚本无法获取新页面中的内容,所以浏览器认为这是安全的。<br>而 AJAX 是可以读取响应内容的，因此浏览器不能允许你这样做。如果你细心的话你会发现，其实请求已经发送出去了，你只是拿不到响应而已。<br>所以浏览器这个策略的本质是，一个域名的 JS ，在未经允许的情况下，不得读取另一个域名的内容。但浏览器并不阻止你向另一个域名发送请求。</p>\n<p>作者：方应杭<br>链接：<a href=\"https://www.zhihu.com/question/31592553/answer/190789780\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/31592553/answer/190789780</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<hr>\n<p>那么如何让<code>AJAX</code>跨域发起请求呢。<br>答案是<code>CORS</code></p>\n<ol>\n<li><code>CORS</code>目前是W3C的标准，它允许浏览器跨域发起<code>XMLHttpRequest</code>请求，而且可以发起多种请求，不像<code>JSONP</code>只能发起<code>GET</code>请求，全称是”跨域/源资源共享”（Cross-origin resource sharing）。<ul>\n<li>如果想要发起跨域请求 例如: <a href=\"http://wushao.com:8001\" target=\"_blank\" rel=\"noopener\">http://wushao.com:8001</a> 要想访问 <a href=\"http://shaolin.com:8002,可以做如下处理\" target=\"_blank\" rel=\"noopener\">http://shaolin.com:8002,可以做如下处理</a></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.open(&apos;GET&apos;, &apos;http://wushao.com:8001/xxx&apos;) //配置request</span><br></pre></td></tr></table></figure>\n<ul>\n<li>服务器端的代码需要做如下处理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Access-Control-Allow-Origin&apos;, &apos;http://shaolin.com:8002&apos;)</span><br></pre></td></tr></table></figure>\n<p>一定要注意是谁去访问谁,8001去访问8002,那么8001的前端代码要告诉8002的后端代码,咱们是一家人,你和浏览器说说别让它禁我了。</p>\n<h4 id=\"AJAX一些其他知识\"><a href=\"#AJAX一些其他知识\" class=\"headerlink\" title=\"AJAX一些其他知识\"></a>AJAX一些其他知识</h4><p>既然可以发请求,那么请求头的四部分如何获得的,响应的四部分又是如何获得呢</p>\n<h5 id=\"获得请求和响应头\"><a href=\"#获得请求和响应头\" class=\"headerlink\" title=\"获得请求和响应头\"></a>获得请求和响应头</h5><ol>\n<li>获得请求头的方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.open(&apos;GET&apos;, &apos;http://shaolin.com:8002/xxx&apos;)// 请求的第一部分</span><br><span class=\"line\">request.setRequestHeader(&apos;Content-Type&apos;, &apos;x-www-form-urlencoded&apos;)//请求的第二部分</span><br><span class=\"line\">request.setRequestHeader(&apos;wushao&apos;, &apos;18&apos;) //请求的第二部分</span><br><span class=\"line\">request.send(&apos;我要设置请求的第四部分&apos;) //请求的第四部分</span><br><span class=\"line\">request.send(&apos;name=wushao&amp;password=wushao&apos;) //请求的第四部分</span><br></pre></td></tr></table></figure>\n<p>对应的典型的http请求四部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /xxx HTTP/1.1</span><br><span class=\"line\">HOST: http://shaolin.com:8002</span><br><span class=\"line\">Content-Type: x-www-form-urlencoded</span><br><span class=\"line\">wushao: 18</span><br><span class=\"line\"></span><br><span class=\"line\">name=wushao&amp;password=wushao</span><br></pre></td></tr></table></figure>\n<ol>\n<li>获得响应的方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.status //响应的第一部分 200</span><br><span class=\"line\">request.statusText //响应的第一部分 OK</span><br><span class=\"line\">request.getAllResponseHeaders //响应的第二部分,这个方法好啊,全部的响应头</span><br><span class=\"line\">request.getResponseHeader(&apos;Content-Type&apos;) //响应的第二部分具体的</span><br><span class=\"line\">request.responseText //响应的第四部分</span><br></pre></td></tr></table></figure>\n<p>对应的典型的http响应的四部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: text/json;charset=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;note&quot; : &#123;</span><br><span class=\"line\">        &quot;to&quot; : &quot;木木&quot;,</span><br><span class=\"line\">        &quot;from&quot; : &quot;少少&quot;,</span><br><span class=\"line\">        &quot;heading&quot; : &quot;你好哇&quot;,</span><br><span class=\"line\">        &quot;content&quot; : &quot;好久不见啊&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>回顾一下各个status对应的意思</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\">200 === OK，请求成功</span><br><span class=\"line\">301 === 被请求的资源已永久移动到新位置</span><br><span class=\"line\">302 === 请求临时重定向，要求客户端执行临时重定向</span><br><span class=\"line\">304 === 和上次请求一样，未改变</span><br><span class=\"line\">403 === 服务器已经理解请求，但是拒绝访问</span><br><span class=\"line\">404 === 请求失败，服务器上没有这个资源</span><br><span class=\"line\">502 === 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</span><br><span class=\"line\">503 === Service Unavailable 由于临时的服务器维护或者过载，服务器当前无法处理请求。</span><br></pre></td></tr></table></figure>\n<h5 id=\"练习一下JQuery封装AJAX\"><a href=\"#练习一下JQuery封装AJAX\" class=\"headerlink\" title=\"练习一下JQuery封装AJAX\"></a>练习一下JQuery封装AJAX</h5><ol>\n<li>初级的jq封装<br>这是一个很简陋的效果，首先我还是把jq假设的很简单，就是一个window的属性，请轻喷……</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = function (nodeOrSelector) &#123;</span><br><span class=\"line\">  let nodes = &#123;&#125;</span><br><span class=\"line\">  nodes.addClass = function () &#123;&#125;</span><br><span class=\"line\">  nodes.html = function () &#123;&#125;</span><br><span class=\"line\">  return nodes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.jQuery.ajax = function (options) &#123;</span><br><span class=\"line\">  let url = options.url</span><br><span class=\"line\">  let method = options.method</span><br><span class=\"line\">  let headers = options.headers</span><br><span class=\"line\">  let body = options.body</span><br><span class=\"line\">  let successFn = options.successFn</span><br><span class=\"line\">  let failFn = options.failFn</span><br><span class=\"line\"></span><br><span class=\"line\">  let request = new XMLHttpRequest() //实例化XMLHttpRequest对象</span><br><span class=\"line\">  request.open(method, url) </span><br><span class=\"line\">  for (let key in headers) &#123;</span><br><span class=\"line\">    let value = headers[key]</span><br><span class=\"line\">    request.setRequestHeader(key, value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">    if (request.readyState === 4) &#123;</span><br><span class=\"line\">      if (request.status &gt;= 200 &amp;&amp; request.status &lt;= 300) &#123;</span><br><span class=\"line\">        successFn.call(undefined, request.responseText)</span><br><span class=\"line\">      &#125; else if (request.status &gt;= 400)  &#123;</span><br><span class=\"line\">        failFn.call(undefined, request)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  request.send(body)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是jq对ajax的简陋的封装，ajax()方法接受一个对象作为参数，这个对象有很多键。这些键就是http请求的头的各个部分，以及一个成功函数和一个失败函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  window.jQuery.ajax (&#123;</span><br><span class=\"line\">    url: &apos;/xxx&apos;,</span><br><span class=\"line\">    method: &apos;POST&apos;,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &apos;content-type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class=\"line\">      &apos;wushao&apos;: &apos;18&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: &apos;a=1&amp;b=6&apos;, </span><br><span class=\"line\">    successFn: (x) =&gt; &#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    failFn: (x) =&gt; &#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上就是简化后的使用方法，给button绑定事件的时候，函数体直接就是ajax()</p>\n<ol>\n<li>目前你会发现options这个对象傻傻的，因为总有一些用户不希望只传一个参数。所以我们稍微改造一下。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url</span><br><span class=\"line\">  if (arguments.length === 1) &#123;</span><br><span class=\"line\">    url = options.url</span><br><span class=\"line\">  &#125; else if (arguments.length === 2) &#123;</span><br><span class=\"line\">     url = arguments[0]</span><br><span class=\"line\">     options = arguments[1]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  let method = options.method</span><br><span class=\"line\">  let headers = options.headers</span><br><span class=\"line\">  let body = options.body</span><br><span class=\"line\">  let successFn = options.successFn</span><br><span class=\"line\">  let failFn = options.failFn</span><br></pre></td></tr></table></figure>\n<p>加了一点，判断ajax()的参数个数。</p>\n<ol>\n<li>一千个人有一千零一个成功或失败函数的写法，所以为了维护世界和平，大家约定俗成了一套理论 <strong>Promise</strong> <strong>then( )</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Promise这个对象呢，大概长这个样子，真实面目我是没见过</span><br><span class=\"line\">//简单的写一下promise</span><br><span class=\"line\">window.Promise = function (fn) &#123;</span><br><span class=\"line\">//...一些其他代码</span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">  then: function () &#123;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Promise这个构造函数呢，又会返回一个函数，这个返回的函数一个then属性，value又是一个函数。处处都体现着函数是第一公民的地位！！！<br>那我们可以利用这个强大的Promise对象搞一些事情了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一步的代码改造成这样，第一步用到了ES6的解构赋值法</span><br><span class=\"line\">window.jQuery.ajax = function (&#123;url, method, body, headers&#125;) &#123;</span><br><span class=\"line\">  return new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    request.open(method, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    for(let key in headers) &#123;</span><br><span class=\"line\">      let value = headers[key]</span><br><span class=\"line\">      request.setRequestHeader(key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">      if (request.readyState === 4) &#123;</span><br><span class=\"line\">        if (request.status &gt;= 200 &amp;&amp; request.status &lt;= 300) &#123;</span><br><span class=\"line\">          resolve.call(undefined, request.responseText)</span><br><span class=\"line\">        &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">          reject.call(undefined, request)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.send(body)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于解构赋值：ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）<br>详见<a href=\"http://es6.ruanyifeng.com/#docs/destructuring\" target=\"_blank\" rel=\"noopener\">ES6解构赋值</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//经过上面这么一折腾，可以很简单的使用了</span><br><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">   let promise = window.jQuery.ajax(&#123;</span><br><span class=\"line\">     url: &apos;/xxx&apos;,</span><br><span class=\"line\">     method: &apos;get&apos;,</span><br><span class=\"line\">     headers: &#123;</span><br><span class=\"line\">      &apos;content-type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class=\"line\">      &apos;wushao&apos;: &apos;18&apos;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">   promise.then(</span><br><span class=\"line\">     (responseText) =&gt; &#123;</span><br><span class=\"line\">       console.log(responseText)</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     (request) =&gt; &#123;</span><br><span class=\"line\">       console.log(request)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   ) </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意then可以传入两个函数，第一个函数表示成功了执行这个，第二个函数表示失败了执行这个，而且可以进行链式调用，一直点下去。</p>\n<ol>\n<li>所以实际上jq的写法大多是这么写的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">      url: &apos;/xxx&apos;,</span><br><span class=\"line\">      type: &apos;GET&apos;,</span><br><span class=\"line\">    &#125;).then(</span><br><span class=\"line\">      (responseText) =&gt; &#123;</span><br><span class=\"line\">        console.log(responseText)</span><br><span class=\"line\">        return responseText</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      (request) =&gt; &#123;</span><br><span class=\"line\">        console.log(&apos;error&apos;)</span><br><span class=\"line\">        return &apos;已经处理&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ).then(</span><br><span class=\"line\">      (responseText) =&gt; &#123;</span><br><span class=\"line\">        console.log(responseText)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      (request) =&gt; &#123;</span><br><span class=\"line\">        console.log(error2)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>链式调用的意思就是：成功函数成功了，就执行第二个then的第一个函数；成功函数失败了，就执行第二个then的第二个函数。</p>\n<p>完整代码详见<a href=\"https://github.com/codevvvv9/AJAXDemo_nodeJsServer\" target=\"_blank\" rel=\"noopener\">我的gitHub</a></p>\n","categories":["同源的问题及解决思路"],"tags":["AJAX"]},{"title":"破解浏览器同源政策利器之JSONP","url":"https://codevvvv9.github.io/2018/01/23/破解浏览器同源政策利器之JSONP/","content":"<blockquote>\n<p>本文是在了解了浏览器的同源规则之后，学习了破解这个规则的一个简单有效的方法-&gt;JSONP。主要通过阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"noopener\">博客</a>学习</p>\n</blockquote>\n<h3 id=\"浏览器的同源规则\"><a href=\"#浏览器的同源规则\" class=\"headerlink\" title=\"浏览器的同源规则\"></a>浏览器的同源规则</h3><ul>\n<li><p>有这样一个背景，如果你通过银行的网站进行的取钱的交易，而其他用户可以通过某个渠道获得你在银行网站的信息，那将是很可怕的。</p>\n<a id=\"more\"></a>\n</li>\n<li><p>所以，1995年NetScape公司(火狐的前身),提出了浏览器的同源政策，目的是保护使用网站的用户的信息安全。那么何谓同源呢</p>\n<ul>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口号相同</li>\n</ul>\n</li>\n</ul>\n<p>不过，随着互联网的发展，有些时候我们需要破解同源，所以要先学习一下，古老而有效的JSONP方法。</p>\n<h3 id=\"浏览器如何向服务器提交数据\"><a href=\"#浏览器如何向服务器提交数据\" class=\"headerlink\" title=\"浏览器如何向服务器提交数据\"></a>浏览器如何向服务器提交数据</h3><ul>\n<li>有一天，程序员小白在自学，看到JSONP很牛，就向大神程序员小黑请教。小黑，小黑，这个JSONP是啥啊，感觉很牛( ⊙ o ⊙ )！。</li>\n<li>小黑扶了扶500度的眼镜，摸了一下头顶的几根头发，若有所思的问小白。</li>\n<li>小白啊，你说，浏览器怎么向服务器提交数据啊，比如说，你要付款这个情形。</li>\n<li>form表单啊，我规定<code>&lt;form method=&quot;POST&quot; action=&quot;/...&quot;&gt;&lt;/form&gt;</code>，我不用get请求。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>您的账户余额是<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"amount\"</span>&gt;</span>200<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>付款1块钱<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/pay\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"付款\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>恩，还是不错的啊，知道用<code>POST</code>发起请求。那你这提交完了之后，是不是还要在当前页面刷新一下，才能看到余额啊。</li>\n<li>……哎，是啊，不过我可以给你加一个<code>iframe</code>，就在当前页面刷新</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/pay\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"result\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"付款\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">name</span>=<span class=\"string\">\"result\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"about:blank\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>有什么反馈信息都在iframe显示。</p>\n<ul>\n<li>恩，也还行，不过你为啥要把总额200写死在页面呢，不应该动态从数据库中获得吗</li>\n<li>╮(╯▽╰)╭，稍等我改一哈</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>您的账户余额是<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"amount\"</span>&gt;</span>&amp;&amp;&amp;amount&amp;&amp;&amp;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>付款1块钱<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">button.addEventListener('click', (e) =&gt; &#123;</span><br><span class=\"line\">    let n = amount.innerText</span><br><span class=\"line\">    let number = parseInt(n, 10)</span><br><span class=\"line\">    let newNumber = number - 1</span><br><span class=\"line\">    amount.innerText = newNumber</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 我用<code>&amp;&amp;&amp;amount&amp;&amp;&amp;</code>占位符表示总额，服务器端可以如下处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> amount = fs.readFileSync(<span class=\"string\">'./db'</span>, <span class=\"string\">'utf-8'</span>) <span class=\"comment\">//从db中读取</span></span><br><span class=\"line\">string = string.replace(<span class=\"string\">'&amp;&amp;&amp;amount&amp;&amp;&amp;'</span>, amount) <span class=\"comment\">//把占位的数据换成真的数据</span></span><br><span class=\"line\">...</span><br><span class=\"line\">response.write(string)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>恩，不错，你再想想有没有其他的方式也可以发送数据到服务器端啊，不用刷新页面的那种</li>\n<li>……还有其他的( ⊙ o ⊙ )啊！</li>\n<li>那我老黑我给你讲讲前辈程序员们试过的方法吧</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用图片发起get请求</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> image = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">image.src = <span class=\"string\">'/pay'</span></span><br><span class=\"line\">image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'打钱成功'</span>)</span><br><span class=\"line\">  amount.innerText = amount.innerText - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">image.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'打钱失败'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这种也是可以的，而且也会用提示给用户，交互性还可以，不过只能发起<code>GET</code>请求，哈哈，我就是秀一下黑科技，很少用啦……</p>\n<ul>\n<li>(<em>@ο@</em>) 哇～这也可以，小黑，你好棒，又长见识啦,不过还是没给我讲JSONP啊,你是不是忘了……</li>\n</ul>\n<ul>\n<li>没忘啦，不要着急，接下来，就给你好好讲讲这个JSONP</li>\n</ul>\n<h3 id=\"动态创建JS脚本发数据\"><a href=\"#动态创建JS脚本发数据\" class=\"headerlink\" title=\"动态创建JS脚本发数据\"></a>动态创建JS脚本发数据</h3><ul>\n<li>小白啊，你平常用的最多的是哪门语言啊</li>\n<li>中文啊，英语不大好。</li>\n<li>……我说编程的时候</li>\n<li>呃呃，那个用的JavaScript多啊</li>\n<li>好，那咱们就用js脚本发数据呗</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用js脚本发起请求  </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">  script.src = <span class=\"string\">'/pay'</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script)</span><br><span class=\"line\">  script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"comment\">//服务器端一般这么干</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(path === <span class=\"string\">'/pay'</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> amount = fs.readFileSync(<span class=\"string\">'./db'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newAmount = amount - <span class=\"number\">1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  fs.writeFileSync(<span class=\"string\">'./db'</span>, newAmount)</span><br><span class=\"line\">  response.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/javascript'</span>)</span><br><span class=\"line\">  response.statusCode = <span class=\"number\">200</span></span><br><span class=\"line\">  response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    amount.innerText = amount.innerText - 1</span></span><br><span class=\"line\"><span class=\"string\">  `</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 以上是js脚本的大致意思，细节不要深究，明白就行。注意一下，添加<code>script</code>后，要记得<code>document.body.appendChild(script)</code></p>\n<ul>\n<li>不过，小黑啊，你这动态加上了<code>script</code>没错，可是你每次都往我的html底部加js，这破坏我的html啊</li>\n<li>恩，小白啊，你思考能力还是可以的，目前确实有这个弊端，我给你处理一下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用js脚本发起请求  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">script.src = <span class=\"string\">'/pay'</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(script)</span><br><span class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.currentTarget.remove() <span class=\"comment\">//加载完了，就移除</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  e.currentTarget.remove() <span class=\"comment\">//加载完了，就移除</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>可以可以，小黑你这波操作可以的。快让我见识见识JSONP吧</p>\n</li>\n<li><p>好，这就给你变出来</p>\n<p>​</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">   <span class=\"comment\">//用js脚本发起请求  </span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">   <span class=\"keyword\">let</span> functionName = <span class=\"string\">'wushao'</span> + <span class=\"built_in\">parseInt</span>((<span class=\"built_in\">Math</span>.random()*<span class=\"number\">100000</span>), <span class=\"number\">10</span>)</span><br><span class=\"line\">   <span class=\"built_in\">window</span>[functionName] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (result === <span class=\"string\">'success'</span>) &#123;</span><br><span class=\"line\">       amount.innerText = amount.innerText - <span class=\"number\">1</span></span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   script.src = <span class=\"string\">'http://想访问的另一个网站:端口号/pay?callback='</span> + functionName</span><br><span class=\"line\">   <span class=\"built_in\">document</span>.body.appendChild(script)</span><br><span class=\"line\">   script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">     e.currentTarget.remove()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">     alert(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">     e.currentTarget.remove()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ヾ(｡｀Д´｡)黑神，你这跨度有点大，咋变了个大魔术。</li>\n<li>O(∩_∩)O哈哈~，你让我给你快点讲的……，我给你讲讲细节吧<ol>\n<li>let functionName = ‘wushao’ + parseInt((Math.random()*100000), 10) 使用一个随机函数构建自己的函数名字，可以与服务器端代码完美解耦，服务器端只需要，获得查询参数<code>?callback=functionName</code> 里面的functionName就可以了。</li>\n<li><code>window[functionName] = function (result) { }</code> 在window全局对象上添加<code>functionName</code>属性，它的值是一个函数，当服务器端响应回来后，浏览器端的写的函数的参数就是服务器端的<code>success</code>，我们就知道我的数据成功了。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务器端只需要这样就可以了，不关心你写的是什么函数名字</span></span><br><span class=\"line\">response.write(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"subst\">$&#123;query.callback&#125;</span>.call(undefined, 'success')</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>哇，厉害啊，不过你又犯了一个相同的错误啦，哈哈，每次要把添加的全局对象的属性去掉哦～</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.currentTarget.remove()</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[functionName]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'failed'</span>)</span><br><span class=\"line\">  e.currentTarget.remove()</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[functionName]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>O(∩_∩)O哈！，这样子就对了，小白啊，既然你学过jQuery，你试一试jQuery的写法吧</li>\n<li>(^o^)/~行，小黑，我也给你变一个</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">\"http://想访问的另一个网站:端口号/pay\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The name of the callback parameter, as specified by the YQL service</span></span><br><span class=\"line\">  jsonp: <span class=\"string\">\"callback\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Tell jQuery we're expecting JSONP</span></span><br><span class=\"line\">  dataType: <span class=\"string\">\"jsonp\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Work with the response</span></span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(response === <span class=\"string\">'success'</span>) &#123;</span><br><span class=\"line\">    amount.innerText = amount.innerText - <span class=\"number\">1</span> </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>哎呦，不错呦，小白～</li>\n<li>O(∩_∩)O哈哈~，我就是Google的 <code>jquery jsonp</code></li>\n<li>不过，这个可和ajax，没啥关系啊，不明白为啥jquery为啥这么写。</li>\n</ul>\n<p><strong>具体的代码链接</strong>在============&gt;<a href=\"https://github.com/codevvvv9/nodejsServer/blob/master/index.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h3 id=\"什么是JSONP呢\"><a href=\"#什么是JSONP呢\" class=\"headerlink\" title=\"什么是JSONP呢\"></a>什么是JSONP呢</h3><p>请求方是一个网站(浏览器端)，响应方是另一个网站（服务器端）</p>\n<ol>\n<li><p>请求方动态的创建一个script脚本，src属性是响应方的地址，同时传递一个查询查参数<code>？callback=functionName</code>，一般functionName使用随机函数构造。</p>\n</li>\n<li><p>响应方根据收到的查询参数callback=functionName,去构造形如</p>\n<p>2.1 <code>functionName.call(undefined, &#39;success&#39;)</code></p>\n<p>2.2 或者直接<code>functionName.(&#39;success&#39;)</code></p>\n<p>这样的响应。</p>\n</li>\n<li><p>浏览器收到响应之后，就会执行<code>functionName.call(undefined, &#39;success&#39;)</code>或者<code>functionName.(&#39;success&#39;)</code></p>\n</li>\n<li><p>然后，请求方就知道了他想要获得的数据如何了。</p>\n</li>\n</ol>\n<p>这就是JSONP的原理</p>\n<h3 id=\"为什么JSONP不支持POST请求呢\"><a href=\"#为什么JSONP不支持POST请求呢\" class=\"headerlink\" title=\"为什么JSONP不支持POST请求呢\"></a>为什么JSONP不支持POST请求呢</h3><p>答曰：JSONP是动态创建的js脚本，这个方法只能发起GET请求，不能发起POST请求。</p>\n<blockquote>\n<p>接下来学习ajax啦～加油↖(^ω^)↗</p>\n</blockquote>\n","categories":["同源的问题以及解决思路"],"tags":["JSONP"]},{"title":"node-sass安装失败的究极解决方法.md","url":"https://codevvvv9.github.io/2018/01/19/node-sass安装失败的究极解决方法/","content":"<blockquote>\n<p>记录一下安装node-sass的过程.关于CSS是不是一门编程语言,这里不讨论,但是它没有变量 语句 函数(反正我觉得他不是编程语言).于是程序员们发明了CSS预处理器(css preprocessor),它是一种专门的编程语言,可以使用你会的基本的编程知识进行编程,然后再转化成css文件.</p>\n</blockquote>\n<h3 id=\"12月更新\"><a href=\"#12月更新\" class=\"headerlink\" title=\"12月更新\"></a>12月更新</h3><p>本次重新安装<code>node-sass</code>是因为电脑换了固态重装系统了，在新系统下很长时间内没有用过<code>sass</code>，一切都是那个风平浪静，直到11月的最后一晚，想折腾一下博客，看到一个好看的主题，这个主题需要安装两个插件，其中有一个需要<code>node-sass</code>的加持。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install hexo-renderer-pug --save</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install hexo-renderer-sass --save  #就是这货</span><br></pre></td></tr></table></figure>\n<p>不出意外的，国内不采取特殊途径，<code>hexo-renderer-sass</code>安装报错，根据<code>log日志</code>，很容易的发现，他需<a href=\"mailto:`node-sass@4.10.0\" target=\"_blank\" rel=\"noopener\">`node-sass@4.10.0</a>`支持，但是下载失败。</p>\n<ol>\n<li><p>解决方案1：先在<code>global</code>下安装<code>node-sass</code></p>\n<ul>\n<li>重装后我全是采用的<code>nvm</code>管理的<code>node</code>版本，所有的包都在<code>.nvm</code>目录下，避免权限不够的错误(或者采取分割线以下的阮一峰老师的方法避免包权限的问题)。</li>\n<li>配置<code>.npmrc</code>，先<code>touch ~/.npmrc</code>。这次直接采取<code>node-sass</code>的<a href=\"https://github.com/sass/node-sass\" target=\"_blank\" rel=\"noopener\">官方推荐的方式</a>，<code>npm install -g mirror-config-china --registry=http://registry.npm.taobao.org</code>，所有的国内有问题的包全都避免了。</li>\n<li>结果竟然无法下载，<code>log日志</code>提醒我可能是代理的问题，可能是我的<code>FQ</code>的系统代理有问题，去控制台一看，果然<code>SOCKETS 有个错误</code>，尝试使用<code>npm</code>添加代理的方式，均告失败，毕竟以后也不能总靠代理过日子，这个方式不可取。这次想找个一劳永逸的方式彻底解决这个垃圾问题。</li>\n<li>终于发现了，直接使用下载好的<code>Realease</code>包去安装，先去<a href=\"https://github.com/sass/node-sass/releases\" target=\"_blank\" rel=\"noopener\">node-sass主页</a>下载系统需要的类型，这个完全可以解决系统不同的问题，很具用普适性。</li>\n<li>到底你的系统需要那个具体的包呢，这个就是最关键的了，我的方式是：先安装，失败后会提示你<code>哪个版本的node包</code>无法下载，这个时候再去下载这个包。通过如下代码去安装：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g node-sass@4.9.3 --sass_binary_path=/home/wsl/Downloads/chromeDownloads/linux-x64-64_binding.node</span><br><span class=\"line\"><span class=\"meta\">#</span> path需要替换成你系统的那个包名字</span><br></pre></td></tr></table></figure>\n<p><code>But</code>我以为下载成功了，就万事大吉了呢，发现我真是太天真了。安装完后第一件事就是检验安装的包能不能用，<code>node-sass -v</code>一下，最不济出现个<code>node-sass not found</code>这种类似的初级错误啊，结果报了个无语的错误。</p>\n<p><img src=\"https://i.loli.net/2018/12/01/5c02610b47259.png\" alt=\"找不到vendor目录\"></p>\n<p>这个目录是<code>node-sass</code>规定的</p>\n<p><img src=\"https://i.loli.net/2018/12/01/5c0263e5ad309.png\" alt=\"node-sass-package.json\"></p>\n<p>为啥没有这个目录呢，因为通过 我采用的是设置本地下载路径，没有通过网上的下载。所以需要手动建立一个<code>vendor</code>目录（<code>issues里面通过npm rebulid node-sass可以解决，但是我没生效</code>），接着会报第二个新错误，这就很合理了，报错一点不可怕，能看懂并解决掉就很是进步。</p>\n</li>\n</ol>\n<p><img src=\"https://i.loli.net/2018/12/01/5c02637aed955.png\" alt=\"找不到binding文件\"></p>\n<p>新的错误是需要<code>binding.node</code>文件，刚才建立的<code>vendor</code>是个空目录所以找不到，在其内部建立二级目录，并把刚才下载的包改名为<code>binding.node</code>，即<code>vendor/linux-X64-64/binding.node</code></p>\n<p><strong>至此，本地安装<code>node-sass</code></strong>完毕，以后可以随便玩<code>node-sass</code>了，管你能不能翻墙，能不能设置镜像。</p>\n<ol start=\"2\">\n<li>本来以为全局安装完毕就可以在博客目录下直接安装<code>hexo-renderer-sass</code>，竟然还是报错。没办法，在<code>newBlog</code>目录下又<strong>按照上述的方法</strong>安装了一个<a href=\"mailto:`node-sass@4.10.0\" target=\"_blank\" rel=\"noopener\">`node-sass@4.10.0</a><code>，因为</code>hexo-render-sass`需要4.10.0版本。最后终于成功了。</li>\n</ol>\n<p><img src=\"https://i.loli.net/2018/12/01/5c0266bae321d.png\" alt=\"安装成功\"></p>\n<p><strong>分割线以下为传统解决方法，尤其针对Linux用户</strong></p>\n<hr>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>主流的CSS预处理器有<a href=\"https://www.catswhocode.com/blog/8-css-preprocessors-to-speed-up-development-time\" target=\"_blank\" rel=\"noopener\">8种</a>,我们今天介绍<code>sass</code>.它的<a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"noopener\">官网</a>,不过需要安装ruby.</p>\n<a id=\"more\"></a>\n<ul>\n<li>不想安ruby,那就借助node安装<code>node-sass</code>吧.github<a href=\"https://github.com/sass/node-sass\" target=\"_blank\" rel=\"noopener\">主页</a></li>\n<li>本人是<code>deepin Linux 15.5</code>版本<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3></li>\n<li><p>由于node-sass会去github主页下载binding-node,然后又去亚马逊去下载,所以国内因为一些不可抗力无法下载.简单的进行如下的设置,都是初学者,我就不用命令的形式写了,下面直接写上内容.基本的命令用多了也就会了.</p>\n<ul>\n<li><p>在主目录下建立一个.npmrc的文件,在里面加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class=\"line\">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class=\"line\">registry=https://registry.npm.taobao.org/</span><br><span class=\"line\">//顺序好像会有影响,我一开始不是这个顺序,后来改成这个,能安装成功</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还必须在主目录的.bashrc下添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export SASS_BINARY_SITE=&quot;https://npm.taobao.org/mirrors/node-sass&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>好了,按理说可以用如下命令正常安装了,但是出问题了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i -g node-sass</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><h4 id=\"第一个错误\"><a href=\"#第一个错误\" class=\"headerlink\" title=\"第一个错误\"></a>第一个错误</h4><ol>\n<li>用了上述的命令,我第一次就报错,Error显示说<em>权限不够</em>,我果断用了</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm i  -g node-sass</span><br></pre></td></tr></table></figure>\n<ul>\n<li>恩,然后就是无休止的错误,ctrl+c终止后,发现node_modules里面有node-sass,但是明显不能用.去github的issue上搜,大神都是用了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebulid node-sass</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然而成功是属于其他人的.</p>\n<ul>\n<li>我试了一下,又是报错, 还是权限不够,我又加了<code>sudo</code>.</li>\n<li>恩,又是报错.此时我很烦,你说没权限,我加了权限你又报错,这个死循环…….</li>\n<li>没办法,生活还要继续,又去stackoverflow和github上搜,在node-sass的项目的<code>Troubleshooting</code>上发现了问题所在,如下是<a href=\"https://github.com/sass/node-sass/blob/master/TROUBLESHOOTING.md#cannot-find-module-rootinstalljs\" target=\"_blank\" rel=\"noopener\">Linux部分的官方文档</a></li>\n</ul>\n<blockquote>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>This can happen if you are install node-sass as <code>root</code>, or globally with <code>sudo</code>. This is a security feature of <code>npm</code>. You should always avoid running <code>npm</code> as <code>sudo</code> because install scripts can be unintentionally malicious. Please check <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\" target=\"_blank\" rel=\"noopener\">npm documentation on fixing permissions</a>.<br>If you must however, you can work around this error by using the <code>--unsafe-perm</code> flag with npm install i.e.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; $ sudo npm install --unsafe-perm -g node-sass</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>If this didn’t solve your problem please open an issue with the output from <a href=\"https://github.com/sass/node-sass/blob/master/TROUBLESHOOTING.md#debugging-installation-issues\" target=\"_blank\" rel=\"noopener\">our debugging script</a>.</p>\n</blockquote>\n<ul>\n<li>文档说: 当你用root角色或者全局使用sudo命令安装的时候,就会发生这个错误.(-妈个鸡,我就是全局安装node-sass啊),不过人家说了,这是npm的安全特性.(-你牛你说啥都行),你应该总是避免使用sudo去执行npm,因为安装脚本会发生意想不到的致命错误(-确实意想不到,以前我都是sudo安装模块,就这次栽了,不过你倒是说咋解决啊),请左转去npm的官方文档(- 这是重点,解决方法就在这里),如果你非要用sudo,用下面的命令吧…………..<strong>如果这些仍没有解决你的问题,请看了我们的debugging脚本里面的解决方法在开启一个新的issue吧(如果大家还有和我不一样的错误,这里有很多解决方法)<a href=\"https://github.com/sass/node-sass/blob/master/TROUBLESHOOTING.md#debugging-installation-issues\" target=\"_blank\" rel=\"noopener\">our debugging script</a></strong>.</li>\n<li>好了,翻译完了,咱们去npm的第三章去看看咋解决.</li>\n<li><a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\" target=\"_blank\" rel=\"noopener\">第三章</a>写的写的很明白.</li>\n</ul>\n<ol start=\"2\">\n<li>如何避免权限错误<br> 下面是文档原文<blockquote>\n<p>If you see an EACCES error when you try to install a package globally, read this chapter. This error can be avoided if you change the directory where npm is installed. To do this, either:<br>Reinstall npm with a version manager (recommended),<br>or<br>Change npm’s default directory manually.</p>\n</blockquote>\n</li>\n</ol>\n<p>它说:如果你尝试安装一个全局的包,遇到了权限的错误,应该读读这一章.如果npm被安装的时候你改变了npm的目录,这个错误就会被避免(- 言下之意,就是让你改目录,就可以避免不能操作/usr/local/底下的内容了,你或者可以改变目录的权限 <code>chmod [mode] dir</code>,效果应该一样的,我没试过,而且官方也没说),要想做到这个,要么用版本管理工具重装npm(- 官方推荐的),要么就手动改变npm的默认目录(我用的这个).</p>\n<ul>\n<li>好了,翻译完了,如果你想用官方推荐的方法就用版本管理工具重装npm,就去看文档的<a href=\"https://docs.npmjs.com/getting-started/installing-nodehttps://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\">第二章</a><h4 id=\"版本管理工具\"><a href=\"#版本管理工具\" class=\"headerlink\" title=\"版本管理工具\"></a>版本管理工具</h4></li>\n<li>官方推荐用<a href=\"https://github.com/creationix/nvm/blob/master/README.md#installation\" target=\"_blank\" rel=\"noopener\">nvm</a>,我以前误打误撞安了一个TJ大神(尤雨溪的偶像)的n模块( 不会用,就会升级,好尴尬啊)</li>\n<li>还有一个<blockquote>\n<p>If you are using npm version 5.2 or greater, explore tools such as <a href=\"https://www.npmjs.com/package/npx\" target=\"_blank\" rel=\"noopener\">npx</a> to circumvent permissions issues.</p>\n</blockquote>\n</li>\n</ul>\n<p>如果你的npm版本是5.2以上,可以用npx(又是好尴尬,我有npx,也不会用…..)</p>\n<ul>\n<li><p>还有特别火的小猫<a href=\"https://github.com/yarnpkg/yarn\" target=\"_blank\" rel=\"noopener\">yarn</a>,快30000的star了(不过我没用……)</p>\n</li>\n<li><p>恩,前端的世界很精彩啊.</p>\n<h4 id=\"手动更改npm目录\"><a href=\"#手动更改npm目录\" class=\"headerlink\" title=\"手动更改npm目录\"></a>手动更改npm目录</h4></li>\n</ul>\n<blockquote>\n<p>Back-up your computer before moving forward.<br>Make a directory for global installations:<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir ~/.npm-global</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>Configure npm to use the new directory path:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm config set prefix &apos;~/.npm-global&apos;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>Open or create a ~/.profile file and add this line:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; export PATH=~/.npm-global/bin:$PATH</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>Back on the command line, update your system variables:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; source ~/.profile</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>Instead of steps 2-4, you can use the corresponding ENV variable (e.g. if you don’t want to modify ~/.profile):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; NPM_CONFIG_PREFIX=~/.npm-global</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>官方确实够详细,也能用,你不想麻烦,就在环境变量里面<code>NPM_CONFIG_PREFIX=~/.npm-global</code></li>\n<li>我试过这个方法,不过建立的<code>.npm-global</code>隐藏得太深了,<code>ctrl+H</code>都看不到它,我就采用了阮一峰大神的<a href=\"http://javascript.ruanyifeng.com/nodejs/npm.html#toc10\" target=\"_blank\" rel=\"noopener\">方法</a>,方法还是要用大神的博客的方法或者官方的啊.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先，在主目录下新建配置文件.npmrc，然后在该文件中将prefix变量定义到主目录下面。</span><br><span class=\"line\"></span><br><span class=\"line\">prefix = /home/yourUsername/npm</span><br><span class=\"line\"></span><br><span class=\"line\">然后在主目录下新建npm子目录。</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir ~/npm</span><br><span class=\"line\"></span><br><span class=\"line\">此后，全局安装的模块都会安装在这个子目录中，npm也会到~/npm/bin目录去寻找命令。</span><br><span class=\"line\">最后，将这个路径在.bash_profile文件（或.bashrc文件）中加入PATH变量。</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=~/npm/bin:$PATH</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>做完这个之后,全局卸载不能用的node-sass,再<code>npm i -g node-sass</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 卸载全局模块</span><br><span class=\"line\">$ npm uninstall [package name] -global</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>很遗憾,旧目录的没删成功,不过新目录的能用就行……………………</p>\n<h3 id=\"安装小总结\"><a href=\"#安装小总结\" class=\"headerlink\" title=\"安装小总结\"></a>安装小总结</h3></li>\n</ul>\n<hr>\n<p><strong>1. 一定不要用sudo安装,先手动改npm的目录</strong><br><strong>2. 更改.npmrc 和 .bashrc</strong><br><strong>3. <code>npm i -g node-sass</code></strong><br><strong><em>4. 英语多学点,文档多看点,命令行多用点.</em></strong></p>\n<hr>\n<h3 id=\"node-sass的简单使用\"><a href=\"#node-sass的简单使用\" class=\"headerlink\" title=\"node-sass的简单使用\"></a>node-sass的简单使用</h3><ul>\n<li><p>它的使用方法和ruby的sass有一点小区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node-sass -wr scss -o css</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/sass/node-sass\" target=\"_blank\" rel=\"noopener\">官方使用手册</a></p>\n</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/06/sass.html\" target=\"_blank\" rel=\"noopener\">阮一峰教程</a></li>\n</ul>\n<h4 id=\"加油啊-sass\"><a href=\"#加油啊-sass\" class=\"headerlink\" title=\"加油啊,sass\"></a>加油啊,sass</h4>","categories":["Sass使用"],"tags":["Sass"]},{"title":"理解Event的冒泡模型","url":"https://codevvvv9.github.io/2018/01/17/理解Event的冒泡模型/","content":"<blockquote>\n<p>本文探索一下Event的冒泡过程和初学遇到的几个小bug</p>\n</blockquote>\n<h3 id=\"DOM-Event概述\"><a href=\"#DOM-Event概述\" class=\"headerlink\" title=\"DOM Event概述\"></a>DOM Event概述</h3><p>Event接口是检测在DOM中的发生的所有事件，我们一直在用，而且从DOM的很早的版本就一直在用着。早期的网景(后来的火狐)和IE是各自为战，直到W3C一统江湖，DOM<a href=\"https://www.w3.org/DOM/DOMTRhttps://www.w3.org/DOM/DOMTR\" target=\"_blank\" rel=\"noopener\">版本</a>一路发展而来，经历了DOM-0(洪荒时代)、DOM-1(只有两章核心内容)、DOM-2(划时代的一个版本，我们学的Event就在这个版本，而且目前的用的也是这个版本)、DOM-3、DOM-4(草案阶段)。</p>\n<a id=\"more\"></a>\n<ul>\n<li>通过一个例子唤醒对Event的认识</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、有一个js函数如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、在html的button里面点击触发上面的函数</span></span><br><span class=\"line\">&lt;button id=button onclick=<span class=\"string\">\"?\"</span>&gt;点我&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/问号处填可以填什么 A. print() B.print C.print.call()</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/在js里面的onclick里面触发</span></span><br><span class=\"line\"><span class=\"regexp\">button.onclick = ?</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/问号处可以填什么 A. print() B.print C.print.call()</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>很明显第一个问号应该选<code>A</code> <code>C</code>，第二个问号应该选<code>B</code></li>\n<li>第一处在HTM中，点击事件要立刻执行代码，肯定选择带<code>()</code>的，而第二处在JS中，onclick是一个属性，不需要立刻执行，等用户点击了，浏览器再反应，不需要<code>()</code>。</li>\n</ul>\n<p>既然<code>onclick</code>等on事件在JS中是一个属性，那么后面的就会覆盖前面的，所以DOM2里面引入了一个重要的<code>EventListener</code>，是一个队列。</p>\n<h3 id=\"addEventListener\"><a href=\"#addEventListener\" class=\"headerlink\" title=\"addEventListener\"></a>addEventListener</h3><p>这是一个队列，<a href=\"http://js.jirengu.com/rixodijifu/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">例子1</a>，先进先出的特点，为后面的冒泡模型做准备。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"eventListener不会覆盖\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">button2.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"eventListener不会覆盖1\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">button2.addEventListener(<span class=\"string\">'click'</span>, f)</span><br><span class=\"line\">button2.removeEventListener(<span class=\"string\">'click'</span>, f)</span><br><span class=\"line\">button2.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"eventListener不会覆盖3\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>会打印出什么呢，答案是<code>eventListener不会覆盖1</code> <code>eventListener不会覆盖3</code></li>\n<li>所以说既然on可以一个打印出结果，就可以借助<code>remove</code>来实现<code>one</code>执行一次的操作</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"eventListener不会覆盖2\"</span>)</span><br><span class=\"line\">  button2.removeEventListener(<span class=\"string\">'click'</span>, f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">button2.addEventListener(<span class=\"string\">'click'</span>, f)</span><br></pre></td></tr></table></figure>\n<p>只会<a href=\"http://js.jirengu.com/yunidupexu/2/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">打印一次</a>，不会一直打印了，也就是<code>one</code>的原理。</p>\n<ul>\n<li>具体的模型可以看<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture\" target=\"_blank\" rel=\"noopener\">W3C</a></li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b57c2a5381.png\" alt=\"W3C的模型\"></p>\n<h3 id=\"冒泡模型\"><a href=\"#冒泡模型\" class=\"headerlink\" title=\"冒泡模型\"></a>冒泡模型</h3><p>上面的官方文档中，我只研究一下捕获阶段(capture phase)和冒泡阶段(bubbling phase)。</p>\n<ul>\n<li>什么是冒泡呢？我们先看一段代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grand.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你爷爷'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">dad.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你爸爸'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">son.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你儿子'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这是三个<code>div</code>的事件，当你点击的时候，控制台打印必然会有顺序。那么应该是什么顺序呢，正常人的思维不外乎两种结果<ul>\n<li>第一种：我是你的儿子 我是你爸爸 我是你爷爷</li>\n<li>第二种： 我是你爷爷 我是你爸爸 我是你儿子</li>\n<li>到底是那种呢，W3C说都行，看你代码咋写的了，上面的代码打印顺序是第一个中，也就是冒泡。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b6ce41226c.png\" alt=\"冒泡排序\"></p>\n<ul>\n<li>如果你想实现第二种打印方式，也就是捕获阶段，应该修改代码如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grand.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你爷爷'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\">dad.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你爸爸'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">son.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你儿子'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>也就是说<code>addEventListener</code>后面的参数决定了顺序，当你不写的时候是<code>undefined</code>，也就是<code>false</code>的意思。</li>\n<li>复习一下五个<code>falsey</code>值<ul>\n<li><code>0</code> <code>NaN</code> <code>&#39;&#39;</code> <code>null</code> <code>undefined</code> 除此之外都是<code>true</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b6ffaaaedf.png\" alt=\"简单的图解\"></p>\n<p>上图是简单的图解，注意优先运行为<code>true</code>的部分，再运行<code>false</code>的部分。</p>\n<p>简单的实例====================&gt;<a href=\"http://js.jirengu.com/yunidupexu/5/edit\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<ul>\n<li>一个变式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grand.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你爷爷'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\">dad.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你爸爸'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">son.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你儿子'</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上述代码应该是什么顺序呢</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b715a63d20.png\" alt=\"变式\"></p>\n<ul>\n<li>谁是<code>true</code>，先打印谁，都是<code>false</code>，继续按照冒泡顺序打印。</li>\n</ul>\n<h4 id=\"一个奇葩的问题\"><a href=\"#一个奇葩的问题\" class=\"headerlink\" title=\"一个奇葩的问题\"></a>一个奇葩的问题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">son.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你儿子true'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">son.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是你儿子false'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给同一个元素 <code>false</code> <code>true</code>，应该打印什么呢</li>\n<li>答案是： 按照书写的顺序，谁在前面先打印谁。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b72e180874.png\" alt=\"奇葩\"></p>\n<h4 id=\"意想不到的Bug\"><a href=\"#意想不到的Bug\" class=\"headerlink\" title=\"意想不到的Bug\"></a>意想不到的Bug</h4><p><code>parent</code>是关键字不能使用，一不小心使用的话会出问题。</p>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b738b07586.png\" alt=\"意外bug\"></p>\n<ul>\n<li>你用了关键字做变量，把鼠标点烂也看不到效果。</li>\n</ul>\n<h3 id=\"点击空白，对话框消失的案例\"><a href=\"#点击空白，对话框消失的案例\" class=\"headerlink\" title=\"点击空白，对话框消失的案例\"></a>点击空白，对话框消失的案例</h3><ul>\n<li>领导说有一个需求，点击某个按钮，弹出对话框，点击空白会消失。</li>\n<li>你的第一个思路：先把div设为none，点击按钮的时候，再让这个<code>div</code>的display是block，点击其他地方变为none。</li>\n<li>很好，你去实现一下吧。</li>\n</ul>\n<h4 id=\"第一个bug\"><a href=\"#第一个bug\" class=\"headerlink\" title=\"第一个bug\"></a>第一个bug</h4><ul>\n<li><p>很快你会碰到了第一个bug</p>\n<ul>\n<li>第一个错误：监听错了对象</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b7729186ef.png\" alt=\"监听错了对象\"></p>\n</li>\n</ul>\n<p>正常来说，应该点击body控制台打印数字1，你点烂了你的罗技鼠标也没出来。为什么呢？</p>\n<ul>\n<li>我们使用<strong>border大法</strong>，看看它到底在哪</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b78f5de70a.png\" alt=\"body的位置\"></p>\n<p>使用了红色border之后，发现body的高度太矮了，点击不到啊。</p>\n<ul>\n<li>你明白监听错对象了，那你就换了一个对象，监听文档呗，肯定没问题了。</li>\n</ul>\n<h4 id=\"第二个bug\"><a href=\"#第二个bug\" class=\"headerlink\" title=\"第二个bug\"></a>第二个bug</h4><ul>\n<li><p>很好，你进入了第二个bug了</p>\n<ul>\n<li>第二个bug：你都能点击到，但是弹不出对话框了</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b78f8228e6.png\" alt=\"第二个bug\"></p>\n</li>\n</ul>\n<p>根据图片 中的控制台可以发现，确实都点击到了，监听没问题，而且点击后，也是按照冒泡的顺序打印的结果。</p>\n<ul>\n<li>那为什么没有对话框了呢</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/14/5a5b7a6cac126.png\" alt=\"正常的现象\"></p>\n<p>注释掉出问题的代码后，上图是正常的点击出现对话框啊，说明问题就出在注释的代码上。</p>\n<ul>\n<li>bug出现的原因就在于：默认冒泡的影响，当你点击的浮层那个<code>div</code>，之后，往 <code>body</code> <code>document</code>上冒泡，在<code>document</code>上立刻被杀死，display变为none，你做梦能看到 弹出框啊。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/15/5a5c0e825be51.png\" alt=\"阻止冒泡\"></p>\n<h4 id=\"修复第二个bug\"><a href=\"#修复第二个bug\" class=\"headerlink\" title=\"修复第二个bug\"></a>修复第二个bug</h4><p>我们既然知道了第二个bug产生的原因，那么我们阻止冒泡顺序</p>\n<ul>\n<li>解决的方案，不让其往上冒泡，自己管理。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickMe.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  popover.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击浮层了'</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.stopPropagation()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  popover.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击文档了'</span>) </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但是随之而来的是一个关于内存占用的问题，现在你是只有一个popover，只有一个函数，等你有了很多个popover，如果按照这个写法会有很多个函数，所以不能这么写，采用下面的写法，节省内存。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(clickMe).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(popover).show()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'show'</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'one click'</span>)</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).one(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'我觉的他不会执行'</span>)</span><br><span class=\"line\">     $(popover).hide()            </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// $(wrapper).on('click', function(e)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   e.stopPropagation()</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'走到document啦'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>只有点击的时候才用，设置settimeout是为了让他异步，不至于立刻隐藏，产生第一个bug。</li>\n<li>注意一下，jQuery的 <code>show()</code> <code>hide()</code></li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/15/5a5cb3e12cfb0.png\" alt=\"jQuery节省内存\"></p>\n<ul>\n<li>当你点击按钮，只会打印图中这两句话，另外两句只有再次点击才会打印。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/15/5a5cb4fa846d8.png\" alt=\"具体的分析\"></p>\n<p>JS版本的节省内存的版本==================&gt;<a href=\"http://js.jirengu.com/pepetixevo/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">节省内存</a></p>\n<p>jQuery版本的节省内存版本=================&gt;<a href=\"http://js.jirengu.com/zufemacina/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">jQuery节省内存</a></p>\n<h4 id=\"对话框小三角的制作\"><a href=\"#对话框小三角的制作\" class=\"headerlink\" title=\"对话框小三角的制作\"></a>对话框小三角的制作</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.popover&#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  border: <span class=\"number\">1</span>px solid red;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  padding: <span class=\"number\">10</span>px;</span><br><span class=\"line\">  margin:<span class=\"number\">10</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.popover::before&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  content: <span class=\"string\">''</span>;</span><br><span class=\"line\">  top: <span class=\"number\">5</span>px;</span><br><span class=\"line\">  right: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  border: <span class=\"number\">10</span>px solid transparent;</span><br><span class=\"line\">  border-right-color:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.popover::after&#123;</span><br><span class=\"line\">  content: <span class=\"string\">''</span>;</span><br><span class=\"line\">  border: <span class=\"number\">10</span>px solid transparent;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  right: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  top: <span class=\"number\">5</span>px;</span><br><span class=\"line\">  border-right-color: white;</span><br><span class=\"line\">  margin-right: <span class=\"number\">-1</span>px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要利用<code>boder-right-color</code>以及两个伪元素。</p>\n<p>浮层三角的实例=============================&gt;<a href=\"http://js.jirengu.com/zugepaneyu/3/edit?html,css,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h3 id=\"冒泡的直观体现\"><a href=\"#冒泡的直观体现\" class=\"headerlink\" title=\"冒泡的直观体现\"></a>冒泡的直观体现</h3><p>点击一下会有惊喜的<a href=\"https://github.com/codevvvv9/bubble/blob/master/bubble.gif\" target=\"_blank\" rel=\"noopener\">https://github.com/codevvvv9/bubble/blob/master/bubble.gif</a></p>\n<p><a href=\"http://js.jirengu.com/geqihuboqe/1/edit?html,css,js,output\" target=\"_blank\" rel=\"noopener\">冒个泡</a></p>\n","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"从win7到Linux","url":"https://codevvvv9.github.io/2018/01/13/从win7到Linux/","content":"<ul>\n<li>终于换到liunx啦</li>\n</ul>\n","categories":["Linux入门"],"tags":["Linux"]},{"title":"一个优秀的项目经理与JQuery的故事","url":"https://codevvvv9.github.io/2018/01/09/一个优秀的项目经理与JQuery的故事/","content":"<blockquote>\n<p>本文是对jQuery的起源的初步探索。先通过两个函数来扩展原生DOM的操作，然后引入命名空间以及对其重构，接着将该命名空间扩大到Node上，改造一个自己的Node2，引出jQuery。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h3><ul>\n<li>首先，我有一个需求===========&gt; 要获得一个<code>&lt;li&gt;</code>标签的所有兄弟元素。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item1\"</span>&gt;</span>选项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item2\"</span>&gt;</span>选项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item3\"</span>&gt;</span>选项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item4\"</span>&gt;</span>选项4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item5\"</span>&gt;</span>选项5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item6\"</span>&gt;</span>选项6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时你刚学完原生DOM操作，知道有<code>nextSibling previousSibling parentNode</code>。你发现貌似没有直接一下子获得全部兄弟元素的API啊，身为一个优秀的90后，你果断手写一个函数实现这个需求啊。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSiblings</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> allChild = item2.parentNode.children </span><br><span class=\"line\">  <span class=\"keyword\">var</span> childObj = &#123;<span class=\"attr\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; allChild.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allChild[i] !== node)&#123;</span><br><span class=\"line\">       childObj[childObj.length] = allChild[i]</span><br><span class=\"line\">       childObj.length += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> childObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，以上的函数就能满足需求了,它接受你传入的某个元素，返回包含这个元素所有兄弟元素的伪数组。</p>\n<p>注意: 要用<code>item2.parentNode.children</code> 这样子才不会获得文本节点。所以你想获得<code>item2</code>的所有兄弟，只需要<code>getSiblings(item2)</code></p>\n<p>获得所有兄弟的演示地址============&gt;<a href=\"http://js.jirengu.com/sevudolano/1/edit\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<ul>\n<li>你刚解决了一个问题，领导又给你提了一个需求，让你给<code>&lt;li&gt;</code>添加一个类</li>\n</ul>\n<blockquote>\n<p>领导还没说完，你立马想到了，直接<code>item2.classList.add(&#39;类名&#39;)</code>啊，哈哈，我好聪明啊，不愧是优秀的90后。</p>\n<p>给你任意一个元素要直接加上这个类名，别给我的一个一个的加，太二了，如果元素原来有一个不应该存在的类名，给我删了，领导接着说完全部的需求。</p>\n<p>这…看来不能<code>item1.classList.add(&#39;类名&#39;)</code> <code>item2.classList.add(&#39;类名&#39;)</code> <code>item3.classList.add(&#39;类名&#39;)</code>这么弱智的干了啊，那我还用函数嘛，你灵机一动。</p>\n<p>嗯，不愧是善于思考的90后</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span>(<span class=\"params\">node, classes</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> classes)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value)&#123;</span><br><span class=\"line\">      node.classList.add(key)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      node.classList.remove(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-206dccfbff3de493.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"没有使用方法的时候\"></p>\n<p>上图是为添加元素的时候的<code>item2</code>的模样，记住它，待会和下图对比。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-a8ff43b3970d4d09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"执行方法后\"></p>\n<p>可以看到，执行方法后，<code>item2</code>的类名变为b、c，这是因为你是<code>addClass(item2, {a: 0, b: 1, c: true})</code>这么调用的，意思是类名不应该有a,删除<code>a</code>，并加上<code>b c</code>。</p>\n<hr>\n<p>以上对象的遍历并取值用到了<code>falsey</code>值</p>\n<p>复习一下，js的6个<code>falsey</code>值</p>\n<ul>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>false</code></li>\n</ul>\n<p>除此之外，其他的全是true。</p>\n<hr>\n<p>不过你想的太美了，领导看到你的代码中的这个片段，直接抓狂了……</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (value)&#123;</span><br><span class=\"line\">      node.classList.add(key)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      node.classList.remove(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码给我优化了，明明就是一句话的事。</p>\n<p>你回去想了一会，可以这么优化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> ： <span class=\"string\">'remove'</span></span><br><span class=\"line\">node.classList[methodName](key)</span><br></pre></td></tr></table></figure>\n<p>最后你把如下代码提交。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span>(<span class=\"params\">node, classes</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> classes)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">\tnode.classList[methodName](key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意一点上述代码不能用点运算符，要用<code>[]</code>运算符，<code>classList[&#39;add&#39;] === classList.add</code></li>\n</ul>\n<p>给任一元素添加类名==========================&gt;<a href=\"http://js.jirengu.com/hopamiwiqu/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><p>你完成了上面的两个需求后，领导本着锻炼你的原则，又给你提了新的需求。</p>\n<ul>\n<li>少林那，你看你这两函数写的挺好的，如果分开放，每次还要在找，不如放到一起把。</li>\n<li>我擦嘞，让我放到一起。好吧……</li>\n<li>回来后，少林冥思苦想，突然想起了昨晚刚去的月坛西街的天府超市的送货车</li>\n<li>我把那俩函数当成两种商品，我开个超市，把它俩收起来呗。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shaolinDom = &#123;&#125; <span class=\"comment\">//少林开的超市</span></span><br><span class=\"line\">shaolinDom.addClass = addClass <span class=\"comment\">//把addClass这个商品收进来</span></span><br><span class=\"line\">shaolin.getSibling = getSiblings <span class=\"comment\">//把getSiblings这个商品收进来</span></span><br></pre></td></tr></table></figure>\n<p>那我咋用呢，该咋用就咋用呗。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shaolinDom.addClass(item5, &#123;<span class=\"attr\">a</span>: <span class=\"literal\">true</span>, <span class=\"attr\">b</span>: <span class=\"literal\">false</span>, <span class=\"attr\">c</span>: <span class=\"number\">0</span>&#125;) <span class=\"comment\">//把item5上原本的b c类名删掉，加上 a类名</span></span><br><span class=\"line\">shaolinDom.getSiblings(item6) <span class=\"comment\">//获得item6的所有兄弟元素</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-5c1a1c1fd1e9f213.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"命名空间\"></p>\n<ul>\n<li>看着上面的代码，我就在想啊，还是自己由优化一下吧，免得回来改。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shaolinDom = &#123;&#125;</span><br><span class=\"line\">shaolinDom.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, classes</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> classes)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span>:<span class=\"string\">'remove'</span></span><br><span class=\"line\">    node.classList[methodName](key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">shaolinDom.getSiblings = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> allChild = node.parentNode.children</span><br><span class=\"line\">  <span class=\"keyword\">var</span> childObj = &#123;<span class=\"attr\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; allChild.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allChild[i] !== node)&#123;</span><br><span class=\"line\">      childObj[childObj.length] = allChild[i]</span><br><span class=\"line\">      childObj.length += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> childObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">shaolinDom.addClass(item5, &#123;<span class=\"attr\">a</span>: <span class=\"literal\">true</span>, <span class=\"attr\">b</span>: <span class=\"literal\">false</span>, <span class=\"attr\">c</span>: <span class=\"number\">0</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> allSiblings = shaolinDom.getSiblings(item6)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(allSiblings)</span><br></pre></td></tr></table></figure>\n<p>引入命名空间=======================&gt;<a href=\"http://js.jirengu.com/sacademoce/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>命名空间的优化=====================&gt;<a href=\"http://js.jirengu.com/cucucunone/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<ul>\n<li>你提交了新的需求后，领导对你刮目相看啊，今年的新员工还是不错的</li>\n<li>你刚想松口气，领导接着说，少林那，你看你这两函数啊只能在<code>shaolinDom</code>用啊，而且我每次要把<code>item5</code>传到函数里面，每次好麻烦的啦，你改进一下，让我的元素可以直接调用方法呗，比如<code>item5.getSiblings()</code>这样多好。这样子操作的话，<code>item5</code>拥有自主权，就像你买东西，你想去买那个东西你就去买那个东西嘛，而不是东西去选择你啊。</li>\n<li>我擦擦嘞，想想经理分析还是很有道理的，果然还是要继续优化啊……</li>\n<li>回来会，我在工位上想，你不是要操作DOM吗，还想这么<code>item5.getSiblings()</code>操作，那我这次直接给你干到<strong>Node的原型上</strong>；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node.prototype.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classes</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> classes)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span>:<span class=\"string\">'remove'</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.classList[methodName](key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Node.prototype.getSiblings = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> allChild = <span class=\"keyword\">this</span>.parentNode.children</span><br><span class=\"line\">  <span class=\"keyword\">var</span> childObj = &#123;<span class=\"attr\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; allChild.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allChild[i] !== <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">      childObj[childObj.length] = allChild[i]</span><br><span class=\"line\">      childObj.length += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> childObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>丫的，我写出这些代码之后，我瞬间感觉自己两米了呢，赶紧去找领导</li>\n<li>领导一看，吸了一口冷气，心想，挺牛 啊，不过我要问问我这小子 <code>this</code>的知识</li>\n<li>少林那，你这函数里面<code>this</code>是啥，再给我讲讲咋用呗</li>\n<li>我屮艸芔茻，轮到我牛了吧，我把袖子已撸，是这么回事，巴拉巴拉</li>\n<li>当然，我要先给经理讲一下怎么用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item5.addClass(&#123;<span class=\"attr\">a</span>: <span class=\"literal\">true</span>, <span class=\"attr\">b</span>: <span class=\"literal\">false</span>, <span class=\"attr\">c</span>: <span class=\"number\">0</span>&#125;) <span class=\"comment\">//既然Node原型都有了这两函数，item5是node类型，直接用呗</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item6.getSiblings())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我刚写完，领导就叫，这<code>addClass</code>函数里面这就一个参数啊，<code>getSiblings</code>函数怎么没参数啊</li>\n<li>哦，这个啊，我讲了this后就明白了。不过讲这个<code>this</code>之前先要讲一讲这个<code>call()</code>，方便<a href=\"https://www.jianshu.com/p/798d46798a9d\" target=\"_blank\" rel=\"noopener\">理解</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//上面的代码等同于以下代码</span></span><br><span class=\"line\">item5.addClass.call(item5, &#123;<span class=\"attr\">a</span>: <span class=\"literal\">true</span>, <span class=\"attr\">b</span>: <span class=\"literal\">false</span>, <span class=\"attr\">c</span>: <span class=\"number\">0</span>&#125;) <span class=\"comment\">//call()方法的第一个参数就是this</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item6.getSiblings.call(item6))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果你把call()省了，直接用<code>()</code>去调用函数，自己脑补<code>call()</code>就好啦，自然也就知道this是谁啦。</li>\n<li>这小子还可以啊，不错。不过要继续引导一下啊</li>\n</ul>\n<p>进一步升级，绑定<code>Node</code>的原型链上==================&gt;<a href=\"http://js.jirengu.com/cukufevuta/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a><br>用<code>call()</code>方便理解<code>this</code>================================&gt;<a href=\"http://js.jirengu.com/naqudijere/1/edit\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h3 id=\"自己写一个构造函数\"><a href=\"#自己写一个构造函数\" class=\"headerlink\" title=\"自己写一个构造函数\"></a>自己写一个构造函数</h3><p>没多久，领导的考验又来了</p>\n<ul>\n<li>少林那，你看你上次吧你自己写的函数绑到Node上了，看似挺好，但是其他人不一定用你的这两函数啊，你绑到Node上，多占地啊，而且你可以绑到Node原型上，别人也可以写一个同名函数绑到Node原型上，万一给你覆盖了，你用的时候，不就懵逼了嘛。你自己写一个全局函数实现一下相同的需求吧。</li>\n<li>呦，这次经理说的很对啊，我的错，我改进一下</li>\n<li>突然联想到以前的各种构造函数，<code>String() Number() Array()</code>可以直接返回一个对象，我也这么干吧</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Node2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getSiblings: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> allChild = node.parentNode.children</span><br><span class=\"line\">      <span class=\"keyword\">var</span> childObj = &#123;<span class=\"attr\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; allChild.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (allChild[i] !== node)&#123;</span><br><span class=\"line\">          childObj[childObj.length] = allChild[i]</span><br><span class=\"line\">          childObj.length += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> childObj</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classes</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> classes)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span>:<span class=\"string\">'remove'</span></span><br><span class=\"line\">        node.classList[methodName](key) <span class=\"comment\">//闭包的使用</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现了一个全局构造函数，返回一个对象，该对象里面有两个key(getSiblings、addClass)，value分别又是两个函数(又体现了函数是第一公民的地位)，而且还用到了闭包。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> node2 = Node2(item3) <span class=\"comment\">//node2就是用Node2()构造函数构造的返回的对象</span></span><br><span class=\"line\">node2.getSiblings() <span class=\"comment\">//对象的点运算符去去操作属性啊</span></span><br><span class=\"line\">node2.addClass(&#123;<span class=\"string\">'a'</span>: <span class=\"number\">0</span>, <span class=\"string\">'b'</span>: <span class=\"literal\">true</span>, <span class=\"string\">'c'</span>: <span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>领导一看，嗯，是时候让他见识真正的<strong><code>jQuery</code></strong>了</li>\n</ul>\n<p>自己实现一个构造函数去理解=======================&gt;<a href=\"http://js.jirengu.com/liyujaweli/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h3 id=\"jQuery的雏形\"><a href=\"#jQuery的雏形\" class=\"headerlink\" title=\"jQuery的雏形\"></a>jQuery的雏形</h3><ul>\n<li>这次领导没再提需求，而是自己改起了代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getSiblings: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> allChild = node.parentNode.children</span><br><span class=\"line\">      <span class=\"keyword\">var</span> childObj = &#123;<span class=\"attr\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; allChild.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (allChild[i] !== node)&#123;</span><br><span class=\"line\">          childObj[childObj.length] = allChild[i]</span><br><span class=\"line\">          childObj.length += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> childObj</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classes</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> classes)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span>:<span class=\"string\">'remove'</span></span><br><span class=\"line\">        node.classList[methodName](key) <span class=\"comment\">//闭包的使用</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>你看看我改了一个位置，你看着这像啥</li>\n<li>我看了一会这难道是传说中的<strong><code>jQuery</code></strong>？</li>\n<li>这是它的雏形，大概意思你已经一步一步写出来了，<strong><code>jQuey</code></strong>就是一个构造函数，它返回一个对象，这个对象有很多key，对应的value又是一些函数。</li>\n<li>那怎么还用<code>$</code>这个操作呢</li>\n<li>哈哈，一个语法糖吗，你看</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.$ = jQuery</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给你出个题吧，你用现在的知识用<code>jQuery</code>实现把某个元素变红，最好验证一下，你的参数是node还是一个选择器，提示一下，可以用<code>querySelector()</code>，<code>querySelector</code>会返回文档中匹配指定的选择器组的第一个元素</li>\n<li>我想了一会，写出如下代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.JQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nodeOrSelector</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node</span><br><span class=\"line\">  <span class=\"comment\">/*判断一下nodeOrSelector是node还是一个选择器 </span></span><br><span class=\"line\"><span class=\"comment\">  var node2 = JQuery(item3)这是nodej节点</span></span><br><span class=\"line\"><span class=\"comment\">  var node2 = JQuery('#item3')这是Id选择器</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> nodeOrSelector === <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">    node = <span class=\"built_in\">document</span>.querySelector(nodeOrSelector)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    node = nodeOrSelector</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;\t</span><br><span class=\"line\">    getSiblings: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> allChild = node.parentNode.children</span><br><span class=\"line\">      <span class=\"keyword\">var</span> childObj = &#123;<span class=\"attr\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; allChild.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (allChild[i] !== node)&#123;</span><br><span class=\"line\">          childObj[childObj.length] = allChild[i]</span><br><span class=\"line\">          childObj.length += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> childObj</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classes</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> classes)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span>:<span class=\"string\">'remove'</span></span><br><span class=\"line\">        node.classList[methodName](key)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//var node2 = JQuery('#item3')与下列代码作用相同，把item3变红</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> node2 = JQuery(<span class=\"string\">'ul &gt; li:nth-child(3)'</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-410050d168ba44ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"变红啦\"></p>\n<p>jQuery的雏形======================&gt;<a href=\"http://js.jirengu.com/hohejohime/1/edit\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h3 id=\"使用一下自己的jQuery，写一个API\"><a href=\"#使用一下自己的jQuery，写一个API\" class=\"headerlink\" title=\"使用一下自己的jQuery，写一个API\"></a>使用一下自己的jQuery，写一个<code>API</code></h3><ul>\n<li>少林那，你也会用初级的jQuery了，咱们练习一下，你把修改一下所有的<code>&lt;li&gt;</code>的内容吧，可以使用<code>querySelectorAll() 返回一个NodeList的伪数组</code></li>\n<li>我听完之后，思考了一会，写下了如下代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nodeOrSelector</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nodes = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> nodeOrSelector === <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = <span class=\"built_in\">document</span>.querySelectorAll(nodeOrSelector) <span class=\"comment\">//NodeList</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; temp.length; i++)&#123;</span><br><span class=\"line\">      nodes[i] = temp[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nodes.length = temp.length</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nodeOrSelector <span class=\"keyword\">instanceof</span> Node)&#123;</span><br><span class=\"line\">    nodes = &#123;<span class=\"number\">0</span>: nodeOrSelector, <span class=\"attr\">length</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  nodes.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classes</span>)</span>&#123;</span><br><span class=\"line\">    classes.forEach(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class=\"line\">        nodes[i].classList.add(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  nodes.getText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> texts = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class=\"line\">        texts.push(nodes[i].textContent)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> texts</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  nodes.setText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class=\"line\">          nodes[i].textContent = text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>经理看了之后，告诉我其实<code>jQuery</code>不喜欢<code>get set</code>的方法，所以它把两个方法合成一个方法，用<code>if</code>判断你传参的类型就能知道用户想获得还是要设置<code>text</code>。把<code>getText setText</code>属性改造成如下的<code>text</code>属性</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//等同于get、set方法</span></span><br><span class=\"line\">nodes.text = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(text === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> texts = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class=\"line\">      texts.push(nodes[i].textContent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> texts</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class=\"line\">      nodes[i].textContent = text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制多个<code>&lt;li&gt;</code>的内容================================&gt;<a href=\"http://js.jirengu.com/cucanidefe/2/edit\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<hr>\n<h4 id=\"一个很低级的错误\"><a href=\"#一个很低级的错误\" class=\"headerlink\" title=\"一个很低级的错误\"></a>一个很低级的错误</h4><p>在上述的过程中，我把<code>class这个关键字竟然当成了变量名，还纳闷哪里出错了，耽误了很多时间。</code></p>\n<ul>\n<li><p>情景再现</p>\n<ul>\n<li>如果你只是想给每一个<code>&lt;li&gt;</code>元素添加红色，直接传<code>red</code>就可以了</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//addClass属性简写成</span></span><br><span class=\"line\">nodes.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class=\"line\">        nodes[i].classList.add(className)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2018/01/09/5a548dc772412.png\" alt=\"添加class属性\"></p>\n</li>\n</ul>\n<ul>\n<li>可是一开始却是这样</li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/01/09/5a548ebd461f4.png\" alt=\"低级错误\"></p>\n<p><strong>变量命名一定要规范啊</strong></p>\n<h4 id=\"由jQuery构造的变量尽量-来表示\"><a href=\"#由jQuery构造的变量尽量-来表示\" class=\"headerlink\" title=\"由jQuery构造的变量尽量`#### 来表示\"></a>由jQuery构造的变量尽量`#### 来表示</h4><p>比如 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.$ = jQuery</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> $div = $(<span class=\"string\">'div'</span>) <span class=\"comment\">//$div变量 是 所有div元素的伪数组</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>最终，少林在经理的循循善诱下，开始探索<code>jQuery</code>的道路。虽然<code>jQuery</code>使用量在下降，但是依然有60%的web开发人员在用。</p>\n<blockquote>\n<p>以上并不是完全真实的jQuery的推导，只是大约是那个意思，可以帮助我更好的理解而已。真正的JQuery必须去看文档，<a href=\"http://link.zhihu.com/?target=https%3A//jquery.com/\" target=\"_blank\" rel=\"noopener\">英文文档</a>，<a href=\"http://link.zhihu.com/?target=https%3A//www.jquery123.com/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</blockquote>\n<p>总之，jQuery我来啦~去探索真正强大的<code>jQuery</code>吧，去理解<code>write less, do more</code>的含义吧,去体会<code>一句顶一万句</code>的力量吧。</p>\n<p>最后安利一波刘震云的小说<code>一句顶一万句</code></p>\n","categories":["jQuery学习"],"tags":["jQuery"]},{"title":"原生DOM入门学习","url":"https://codevvvv9.github.io/2018/01/07/原生DOM入门学习/","content":"<blockquote>\n<p>原生DOM接口挺多的，需要花点时间研究下，不过先把基础整好，后面框架估计好学点。</p>\n</blockquote>\n<h3 id=\"1-DOM是啥\"><a href=\"#1-DOM是啥\" class=\"headerlink\" title=\"1. DOM是啥\"></a>1. DOM是啥</h3><h4 id=\"1-1-知识回顾\"><a href=\"#1-1-知识回顾\" class=\"headerlink\" title=\"1.1 知识回顾\"></a>1.1 知识回顾</h4><p>先回顾一下HTML的基本结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-Hans\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上就是最简单的HTML 5的结构。一般我们会把它处理成一棵树，一棵节点树。<a id=\"more\"></a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-c0dd70bf82a48666?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"树结构\"></p>\n<p>以上就是一棵树，浏览器把html渲染成的树，也就是Document结构。每个框就是一个Element、标题等文本内容是Text。</p>\n<hr>\n<p>Document、Element、Text 的祖先都是Node。<br>以下是MDN的<span id=\"jump\">继承树</span></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-d6a1627568e4111c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Document接口继承关系.png\"></p>\n<p><strong>可是在内存中，存的不是html树，是一棵对应html各个节点的对象树，而且对象树的节点是与html树的节点一一对应的。</strong></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-514e4fbd0874fa47?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"对象树\"></p>\n<p>以上是内存中的对象树。这些对象应该怎么定义，是由DOM规范规定的。</p>\n<p>也可以如下这么理解</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-e588d6142d6d2bff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Js基本语法的对应\"></p>\n<p>页面中的节点，根据Element、Text、Document、Comment这些构造函数，构造出对象来，内存就理解了。</p>\n<p>比如构造div</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">div </span><br><span class=\"line\">&lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> <span class=\"comment\">//打印结果</span></span><br></pre></td></tr></table></figure>\n<p><code>createElement</code>就是构造函数。</p>\n<p>把DOM的对应和JS基本语法练习起来。</p>\n<h4 id=\"1-2-DOM的真面目\"><a href=\"#1-2-DOM的真面目\" class=\"headerlink\" title=\"1.2 DOM的真面目\"></a>1.2 DOM的真面目</h4><p>前面的基础分析完了，就可以知道什么是DOM了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-9cc546efb39ab37f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"完整的DOM\"></p>\n<p>DOM就是完整的把Document和Object映射到一起，符合DOM规范的结构，所以具备很多的API。</p>\n<blockquote>\n<p>DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。</p>\n<p>浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。所以，DOM 可以理解成网页的编程接口。DOM 有自己的国际标准，目前的通用版本是<a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html\" target=\"_blank\" rel=\"noopener\">DOM 3</a>，下一代版本<a href=\"http://www.w3.org/TR/dom/\" target=\"_blank\" rel=\"noopener\">DOM 4</a>正在拟定中。</p>\n<p>严格地说，DOM 不属于 JavaScript，但是操作 DOM 是 JavaScript 最常见的任务，而 JavaScript 也是最常用于 DOM 操作的语言。</p>\n</blockquote>\n<hr>\n<p>规范里的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model\" target=\"_blank\" rel=\"noopener\">DOM模型</a>竟然有多达31个接口，我先只挑Node接口和Document接口学习。</p>\n<p>[图片上传失败…(image-3bad70-1515465954210)]</p>\n<hr>\n<h3 id=\"2-原生DOM-API\"><a href=\"#2-原生DOM-API\" class=\"headerlink\" title=\"2. 原生DOM API\"></a>2. 原生DOM API</h3><p>DOM是一棵树，树上有Node,Node分为Document、Element、Text，其他的可以忽略。</p>\n<p>由前面的<a href=\"#jump\">继承图</a>可知Node的研究价值很高，我们先来看Node接口的属性和方法。<br>下面是MDN对Node接口的解释</p>\n<blockquote>\n<p>Node是一个接口，许多DOM类型从这个接口继承，并允许类似地处理（或测试）这些各种类型。</p>\n<ul>\n<li>以下接口都从Node继承其方法和属性：<br>Document, Element, CharacterData (which Text, Comment, and CDATASection inherit), ProcessingInstruction, DocumentFragment, DocumentType, Notation, Entity, EntityReference</li>\n</ul>\n</blockquote>\n<h4 id=\"2-1-Node的属性\"><a href=\"#2-1-Node的属性\" class=\"headerlink\" title=\"2.1 Node的属性\"></a>2.1 Node的属性</h4><p>DOM树的最小单位就是节点（node）。文档的树形结构就是有各个不同列类型的节点组成的，每个节点都可以看做是这棵DOM树的叶子</p>\n<p>常见的七种node类型</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Document</td>\n<td>整个文档树的顶层节点 <strong>但不是根节点</strong></td>\n</tr>\n<tr>\n<td>DocumentType</td>\n<td>doctype标签</td>\n</tr>\n<tr>\n<td>Element</td>\n<td>网页的其他各种标签</td>\n</tr>\n<tr>\n<td>Attribute</td>\n<td>标签的属性</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>标签与标签之间的文本</td>\n</tr>\n<tr>\n<td>Comment</td>\n<td>注释</td>\n</tr>\n<tr>\n<td>DocumentFragment</td>\n<td>文档的片段</td>\n</tr>\n</tbody>\n</table>\n<p>我们只关心Document、Element、Text</p>\n<h5 id=\"2-1-1-node之间的关系属性\"><a href=\"#2-1-1-node之间的关系属性\" class=\"headerlink\" title=\"2.1.1 node之间的关系属性\"></a>2.1.1 node之间的关系属性</h5><hr>\n<ol>\n<li>一个最顶层的节点 document，代表整个文档。</li>\n<li>一个根节点 html，是文档里面最高的一层，是根节点。其他所有的html标签都是他的下级</li>\n<li>其他节点与周围节点的关系<ol>\n<li>parentNode: 直接的那个上级的节点</li>\n<li>childNodes: 直接的下一级的节点</li>\n<li>sibling：拥有同一个父节点的节点</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"Node-childNodes\"><a href=\"#Node-childNodes\" class=\"headerlink\" title=\"Node.childNodes\"></a>Node.childNodes</h6><p>返回一个NodeList集合，成员包括当前节点的所有子节点。注意，除了HTML元素节点，该属性返回的还包括Text节点和Comment节点。如果当前节点不包括任何子节点，则返回一个空的NodeList集合。由于NodeList对象是一个动态集合，一旦子节点发生变化，立刻会反映在返回结果之中。</p>\n<ul>\n<li>childNodes</li>\n</ul>\n<p><strong>注意： childNodes会把text也打印出来，也就是两个标签之间的换行符。</strong></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ec9f8634b9f23399?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文本节点\"></p>\n<p>而且childNodes返回一个伪数组。这个伪数组对象的每一个元素依然都是html元素，如果想操作元素的内容还要用元素的其他属性。</p>\n<ul>\n<li>document的childNodes只有两个</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.childNodes</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>, html]</span></span><br><span class=\"line\"><span class=\"xml\">\t0:<span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t1:html</span></span><br><span class=\"line\"><span class=\"xml\">\tlength:2</span></span><br><span class=\"line\"><span class=\"xml\">\t__proto__: NodeList</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>所以我们不想打印出text节点，可以使用<code>children</code>属性啊<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParentNode.children //ParentNode要是一个HTMLCollection</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/children\" target=\"_blank\" rel=\"noopener\">children属性</a>会返回 一个Node的子elements 而没有text节点。</p>\n<h6 id=\"Node-firstChild和Node-lastChild\"><a href=\"#Node-firstChild和Node-lastChild\" class=\"headerlink\" title=\"Node.firstChild和Node.lastChild\"></a>Node.firstChild和Node.lastChild</h6><p><code>firstChild</code>属性返回当前节点的第一个子节点，如果当前节点没有子节点，则返回<code>null</code>（注意，不是<code>undefined</code>）。</p>\n<p><code>Node.lastChild</code>属性返回当前节点的最后一个子节点，如果当前节点没有子节点，则返回null。</p>\n<h6 id=\"Node-nextSibling和Node-previousSibling\"><a href=\"#Node-nextSibling和Node-previousSibling\" class=\"headerlink\" title=\"Node.nextSibling和Node.previousSibling\"></a>Node.nextSibling和Node.previousSibling</h6><p><code>Node.nextSibling</code>属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回<code>null</code>。</p>\n<p><code>previousSibling</code>属性返回当前节点前面的、距离最近的一个同级节点。如果当前节点前面没有同级节点，则返回<code>null</code>。</p>\n<p><strong>以上的三组属性使用时一定要注意结果会有text的影响。</strong></p>\n<h6 id=\"Node-parentNode\"><a href=\"#Node-parentNode\" class=\"headerlink\" title=\"Node.parentNode\"></a>Node.parentNode</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.parentNode</span><br><span class=\"line\"><span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<p><code>parentNode</code>属性返回当前节点的父节点。对于一个节点来说，它的父节点只可能是三种类型：<code>element</code>节点、<code>document</code>节点和<code>documentfragment</code>节点。</p>\n<p><strong>而且document节点和documentfragment节点，它们的父节点都是null。另外，对于那些生成后还没插入DOM树的节点，父节点也是null。</strong></p>\n<h6 id=\"Node-parentElement\"><a href=\"#Node-parentElement\" class=\"headerlink\" title=\"Node.parentElement\"></a>Node.parentElement</h6><p>parentElement属性返回当前节点的父Element节点。如果当前节点没有父节点，或者父节点类型不是Element节点，则返回null。</p>\n<p>注意： 在IE浏览器中，只有Element节点才有该属性，其他浏览器则是所有类型的节点都有该属性。</p>\n<p><code>ownerDocument</code>属性返回当前节点所在的顶层文档对象，即<code>document</code>对象</p>\n<hr>\n<h5 id=\"2-1-2-node自身的属性\"><a href=\"#2-1-2-node自身的属性\" class=\"headerlink\" title=\"2.1.2 node自身的属性\"></a>2.1.2 node自身的属性</h5><hr>\n<h6 id=\"nodeName和nodeType\"><a href=\"#nodeName和nodeType\" class=\"headerlink\" title=\"nodeName和nodeType\"></a>nodeName和nodeType</h6><p>nodeName返回node的名字，如果是element那名字<strong>是大写的</strong>,其他的名字前面写上#。nodeType返回node的类型，一般用数字表示，1表示element(也可以用Node.ELEMENT_NODE来表示)，3表示text(Node.TEXT_NODE)。</p>\n<ul>\n<li>如果是element，那么nodeName === tagName</li>\n<li>如果是text，那么nodeName = #text， tagName = undefined</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-c185b07cc3e87da6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"nodeName和tagName\"></p>\n<p>关于nodeType有个详细的表格，应该查看MDN记住。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType\" target=\"_blank\" rel=\"noopener\">对照表</a></p>\n<h6 id=\"nodeValue\"><a href=\"#nodeValue\" class=\"headerlink\" title=\"nodeValue\"></a>nodeValue</h6><p> nodeValue属性返回或设置当前节点的值。对于text, comment节点来说, <code>nodeValue</code>返回该节点的文本内容，对于 attribute 节点来说, 返回该属性的属性值，而对于document和element节点来说，返回null。<br> 貌似没个卵用，最常见的element都是null,还是用下面的<code>textContent</code>吧</p>\n<h6 id=\"textContent和innerText之争\"><a href=\"#textContent和innerText之争\" class=\"headerlink\" title=\"textContent和innerText之争\"></a>textContent和innerText之争</h6><p>火狐推出的textContent，获得一个节点及其后代的文本内容，一般用这个获得元素的内容。</p>\n<p>IE推出的innerText,两者有很大的区别。</p>\n<p>关于textContent、innerText、innnerHTML之间的区别请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n<hr>\n<h4 id=\"2-2-Node的方法\"><a href=\"#2-2-Node的方法\" class=\"headerlink\" title=\"2.2 Node的方法\"></a>2.2 Node的方法</h4><h5 id=\"Node-appendChild\"><a href=\"#Node-appendChild\" class=\"headerlink\" title=\"Node.appendChild()\"></a>Node.appendChild()</h5><p><code>Node.appendChild()</code> 方法将一个节点添加到指定父节点的<strong>子节点列表的末尾</strong>。</p>\n<p>var child = node.appendChild(child);</p>\n<ul>\n<li><code>node</code> 是要插入子节点的父节点.</li>\n<li><code>child</code>即是参数又是这个方法的返回值.</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-7b5de2b9c7216f23?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"div添加空的p元素\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-911fccee5d962f06?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打印出p那个元素\"></p>\n<h5 id=\"Node-cloneNode\"><a href=\"#Node-cloneNode\" class=\"headerlink\" title=\"Node.cloneNode()\"></a>Node.cloneNode()</h5><p>这个方法就是克隆一个node，分为浅拷贝和深拷贝。</p>\n<ul>\n<li>浅拷贝，<code>Node.cloneNode()</code>只克隆元素节点本身，而不会克隆它的子节点。包括它的文本节点</li>\n<li>深拷贝，<code>Node.cloneNode(true)</code>克隆元素的所有属性以及子节点</li>\n</ul>\n<p>[图片上传失败…(image-f034a1-1515465954210)]</p>\n<blockquote>\n<p>注意:为了防止一个文档中出现两个ID重复的元素,使用cloneNode()方法克隆的节点在需要时应该指定另外一个与原ID值不同的ID</p>\n</blockquote>\n<p>[图片上传失败…(image-f7614d-1515465954210)]<br>如果你想克隆同一个id的元素到不同的元素后面，会报错。</p>\n<h5 id=\"Node-contains\"><a href=\"#Node-contains\" class=\"headerlink\" title=\"Node.contains()\"></a>Node.contains()</h5><p>判断一个节点是不是另一个节点的子节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.contains(div1)</span><br></pre></td></tr></table></figure>\n<p>div1是div的子节点就返回true。</p>\n<h5 id=\"Node-hasChildNodes\"><a href=\"#Node-hasChildNodes\" class=\"headerlink\" title=\"Node.hasChildNodes()\"></a>Node.hasChildNodes()</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.hasChildNodes()</span><br></pre></td></tr></table></figure>\n<p>判断div节点是否还有子节点，有子节点就返回true。</p>\n<h5 id=\"Node-insertBefore\"><a href=\"#Node-insertBefore\" class=\"headerlink\" title=\"Node.insertBefore()\"></a>Node.insertBefore()</h5><p>在当前节点的某个子节点之前再插入一个子节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> insertedElement = parentElement.insertBefore(newElement, referenceElement);</span><br></pre></td></tr></table></figure>\n<p>在parentElement节点的子节点referenceElement前面插入一个newElement节点。</p>\n<p>如果<code>referenceElement</code>为<code>null</code>则<code>newElement</code>将被插入到子节点的末尾<em>。</em>如果<code>newElement</code>已经在DOM树中，<code>newElement</code>首先会从DOM树中移除。</p>\n<p><strong>没有 <code>insertAfter</code> 方法。可以使用 <code>insertBefore</code> 方法和 <code>nextSibling</code> 来模拟它。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parentDiv.insertBefore(sp1, sp2.nextSibling);</span><br></pre></td></tr></table></figure>\n<p>只要sp2.nextSibling === null，那么就可以在parentDiv的末尾添加sp1元素。</p>\n<h5 id=\"Node-isEqualNode-和Node-isSameNode\"><a href=\"#Node-isEqualNode-和Node-isSameNode\" class=\"headerlink\" title=\"Node.isEqualNode()和Node.isSameNode()\"></a>Node.isEqualNode()和Node.isSameNode()</h5><p>两者都是比较两个node是否相等。不过isEqualNode()是两个node看起来相等就返回true，isSameNode()严格使用===判断，而且该方法已被废弃，如果要严格判断两个node是否指向同一个对象，直接用node1 === node2。</p>\n<h5 id=\"Node-normalize\"><a href=\"#Node-normalize\" class=\"headerlink\" title=\"Node.normalize()\"></a>Node.normalize()</h5><p>就是规范化的意思。什么是规范化，在一个”规范化”后的DOM树中，不存在一个空的文本节点，或者两个相邻的文本节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"Part 1 \"</span>));</span><br><span class=\"line\">wrapper.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"Part 2 \"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这时(规范化之前),wrapper.childNodes.length === 2</span></span><br><span class=\"line\"><span class=\"comment\">// wrapper.childNodes[0].textContent === \"Part 1 \"</span></span><br><span class=\"line\"><span class=\"comment\">// wrapper.childNodes[1].textContent === \"Part 2 \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.normalize();</span><br><span class=\"line\"><span class=\"comment\">// 现在(规范化之后), wrapper.childNodes.length === 1</span></span><br><span class=\"line\"><span class=\"comment\">// wrapper.childNodes[0].textContent === \"Part 1 Part 2\"</span></span><br></pre></td></tr></table></figure>\n<p>以上是MDN的例子，很好懂。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-1502e52a3dd0b09a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未规范化的时候\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-6fc3122b503a25d9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"规范化后\"></p>\n<p>以上是自己模仿的<a href=\"http://js.jirengu.com/magocalike/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h5 id=\"Node-removeChild-和Node-replaceChild\"><a href=\"#Node-removeChild-和Node-replaceChild\" class=\"headerlink\" title=\"Node.removeChild()和Node.replaceChild()\"></a>Node.removeChild()和Node.replaceChild()</h5><p>Node.removeChild()是从当前节点删除一个子节点，不过内存里面依然存在，只不过不在页面显示了，返回的就是被移除的那个节点。所以说一个节点移除以后，依然可以使用它，比如插入到另一个节点下面。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-002664a7a534604d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未移除子元素的时候\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-47370bf927951313?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"移除之后\"></p>\n<p>以上是我做的<a href=\"http://js.jirengu.com/hibopeduvi/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p><code>Node.replaceChild</code>方法用于将一个新的节点，替换掉当前节点的一个子节点。它接受两个参数，第一个参数是用来替换的新节点，第二个参数将要被替换走的子节点。它返回被替换走的那个节点。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-877be165899b663d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未替换\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-5b4db6c28cd16124?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"替换了\"></p>\n<p>我做的实验<a href=\"http://js.jirengu.com/pebowoloto/1/edit?html,js,output\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h4 id=\"Document属性和方法\"><a href=\"#Document属性和方法\" class=\"headerlink\" title=\"Document属性和方法\"></a>Document属性和方法</h4><p>关于Document接口的属性和方法，且听下回分解~</p>\n","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"初探JS的函数","url":"https://codevvvv9.github.io/2018/01/05/初探JS的函数/","content":"<h3 id=\"什么是函数\"><a href=\"#什么是函数\" class=\"headerlink\" title=\"什么是函数\"></a>什么是函数</h3><p>函数是对象的一种，也是一段可以重复使用的代码块，开发人员为了完成某项功能，把相关代码块放到一起。</p>\n<p><strong>函数内部可以传参，也可以被当做参数传递</strong></p>\n<a id=\"more\"></a>\n<p>目前定义函数有五种方法</p>\n<h4 id=\"具名函数来定义\"><a href=\"#具名函数来定义\" class=\"headerlink\" title=\"具名函数来定义\"></a>具名函数来定义</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.name <span class=\"comment\">//'f'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"匿名函数来定义\"><a href=\"#匿名函数来定义\" class=\"headerlink\" title=\"匿名函数来定义\"></a>匿名函数来定义</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f</span><br><span class=\"line\">f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.name <span class=\"comment\">//'f'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"具名函数定义了又赋值给了变量\"><a href=\"#具名函数定义了又赋值给了变量\" class=\"headerlink\" title=\"具名函数定义了又赋值给了变量\"></a>具名函数定义了又赋值给了变量</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f1</span><br><span class=\"line\">f1 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1.name <span class=\"comment\">//'f'</span></span><br></pre></td></tr></table></figure>\n<p>要注意：虽然<code>f1.name=&#39;f&#39;</code>，但是f只在函数内部可用，实际上函数的名字还是f1</p>\n<h4 id=\"window-Function来构造\"><a href=\"#window-Function来构造\" class=\"headerlink\" title=\"window.Function来构造\"></a>window.Function来构造</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'return x + y'</span>)</span><br><span class=\"line\">f2.name <span class=\"comment\">//'anonymous'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f3 = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;<span class=\"keyword\">return</span> x - y&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y <span class=\"comment\">//函数体内只有一行代码，可以省略大括号和return</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n2 = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n*n <span class=\"comment\">//只有一个参数，可以省略小括号</span></span><br></pre></td></tr></table></figure>\n<p>常用的定义方法是1、2、5这三种方法。</p>\n<h3 id=\"函数的一些必备知识\"><a href=\"#函数的一些必备知识\" class=\"headerlink\" title=\"函数的一些必备知识\"></a>函数的一些必备知识</h3><h4 id=\"函数的name属性\"><a href=\"#函数的name属性\" class=\"headerlink\" title=\"函数的name属性\"></a>函数的name属性</h4><p>由上面的五种定义方法，我们可以知道函数具有<code>name</code>属性，而且不同的定义方法，name属性也很奇葩。</p>\n<h4 id=\"函数如何调用\"><a href=\"#函数如何调用\" class=\"headerlink\" title=\"函数如何调用\"></a>函数如何调用</h4><p>为了理解后面的this，推荐使用<code>call()</code>方法，而不是使用常见的<code>f()</code></p>\n<p>以第一种定义方法为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.call(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>call()方法的第一个参数就是this,后面的参数才是函数的执行参数。</p>\n<p>下面用代码检验一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">m, n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(m + n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">f1.call(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">Window &#123;<span class=\"attr\">postMessage</span>: ƒ, <span class=\"attr\">blur</span>: ƒ, <span class=\"attr\">focus</span>: ƒ, <span class=\"attr\">close</span>: ƒ, <span class=\"attr\">frames</span>: Window, …&#125; <span class=\"comment\">//不是应该打印undefined，为啥是window呢？</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"comment\">//这才是函数的执行内容</span></span><br></pre></td></tr></table></figure>\n<p>执行f1.call(undefined, 1, 3)后，this不是应该打印出undefined吗，为啥打印了Window呢（注意实际上是个小写的window,不是浏览器打印的大写的Window）,可以用代码验证打印的就是小写的window</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">m, n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(m + n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">f1.call(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span> <span class=\"comment\">//说明是小写的window</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">m, n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === Window)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(m + n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">f1.call(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"literal\">false</span> <span class=\"comment\">//并不是大写的Window</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>我真是服啦，那window和Window有啥区别呢。真是蛋疼啊，竟然考虑这个问题……</p>\n<p>答案就是 var object = new Object，那var window = new Window。而且Window毫无探讨的意义，倒是这个window是个全局属性，多少有点用。</p>\n<hr>\n<p>有时候自己真是有点钻牛角尖，钻进去后，还不会举一反三。如果立刻想到obj的例子就不用浪费时间了。</p>\n<hr>\n<h4 id=\"这就是藏着的this\"><a href=\"#这就是藏着的this\" class=\"headerlink\" title=\"这就是藏着的this\"></a>这就是藏着的this</h4><p>这是因为浏览器捣的鬼，他把undefined变成了window。接下来使用严格模式，让undefined现身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">m, n</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(m + n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">f1.call(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span> <span class=\"comment\">//这个undefined就是call()方法的第一个参数undefined</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>而且call()的第一个参数是啥，this就是啥</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">m, n</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(m + n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">undefine</span><br><span class=\"line\">f1.call(<span class=\"string\">'我是啥this就是啥'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">我是啥<span class=\"keyword\">this</span>就是啥 <span class=\"comment\">//打印的依然是call()的第一个参数</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h4><p>前面分析了call()的第一个参数，那后俩参数是啥呢。</p>\n<p>对，你没猜错，那就是arguments。</p>\n<p>当你写<code>call(undefined, 1, 3)</code>的时候。<code>undefined</code>可以被认为是<code>this</code>，<code>[1, 3]</code>就是<code>arguments</code></p>\n<h3 id=\"函数的call-stack\"><a href=\"#函数的call-stack\" class=\"headerlink\" title=\"函数的call stack\"></a>函数的call stack</h3><p>上面我们接触了call()方法，现在我们学习一下当有多个函数调用的时候，JavaScript解析器是如何调用栈的。</p>\n<p>MDN的解释如下</p>\n<blockquote>\n<p> 调用栈是解析器(如浏览器中的的javascript解析器)的一种机制，可以在脚本调用多个<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/function\" target=\"_blank\" rel=\"noopener\">函数</a>时，跟踪每个函数在完成执行时应该返回控制的点。（如什么函数正在执行，什么函数被这个函数调用，下一个调用的函数是谁）</p>\n<ul>\n<li>当脚本要调用一个函数时，解析器把该函数添加到栈中并且执行这个函数。</li>\n<li>任何被这个函数调用的函数会进一步添加到调用栈中，并且运行到它们被上个程序调用的位置。</li>\n<li>当函数运行结束后，解释器将它从堆栈中取出，并在主代码列表中继续执行代码。</li>\n<li>如果栈占用的空间比分配给它的空间还大，那么则会导致“堆栈溢出”错误。</li>\n</ul>\n</blockquote>\n<p>以下是通过三个方面去理解call stack这个概念的。</p>\n<h4 id=\"普通调用\"><a href=\"#普通调用\" class=\"headerlink\" title=\"普通调用\"></a><a href=\"http://latentflip.com/loupe/?code=ZnVuY3Rpb24gYSgpewogICAgY29uc29sZS5sb2coJ2EnKQogIHJldHVybiAnYScgIAp9CgpmdW5jdGlvbiBiKCl7CiAgICBjb25zb2xlLmxvZygnYicpCiAgICByZXR1cm4gJ2InCn0KCmZ1bmN0aW9uIGMoKXsKICAgIGNvbnNvbGUubG9nKCdjJykKICAgIHJldHVybiAnYycKfQoKYS5jYWxsKCkKYi5jYWxsKCkKYy5jYWxsKCk%3D!!!\" target=\"_blank\" rel=\"noopener\">普通调用</a></h4><p>代码如下，直观的动图可以看上述的链接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'a'</span>  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.call()</span><br><span class=\"line\">b.call()</span><br><span class=\"line\">c.call()</span><br></pre></td></tr></table></figure>\n<p>如上的代码，先有三个函数声明，然后是三个调用。浏览器先执行a.call()，然后执行b.call()，c.call()，下面结合图具体详细分析。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/5/160c5838728cf39e?w=1006&amp;h=621&amp;f=png&amp;s=37670\" alt=\"普通调用\"></p>\n<ul>\n<li>第一步：浏览器入口是a.call(),a函数入栈，执行a函数内部代码</li>\n<li>第二步：console.log(‘a’)执行完毕，就出栈，接着a函数结束，出栈死亡</li>\n<li>第三步：b.call()入栈，执行b函数内部代码</li>\n<li>第四步： console.log(‘b’)执行完毕就出栈，接着b函数结束，出栈死亡</li>\n<li>第五步：c.call()入栈，执行c函数内部代码</li>\n<li>第六步：console.log(‘c’)执行完毕就出栈，接着c函数结束，出栈死亡。</li>\n<li>整个代码结束，浏览器恢复平静。</li>\n</ul>\n<h4 id=\"嵌套调用\"><a href=\"#嵌套调用\" class=\"headerlink\" title=\"嵌套调用\"></a><a href=\"http://latentflip.com/loupe/?code=ZnVuY3Rpb24gYSgpewogICAgY29uc29sZS5sb2coJ2ExJykKICAgIGIuY2FsbCgpCiAgICBjb25zb2xlLmxvZygnYTInKQogIHJldHVybiAnYScgIAp9CmZ1bmN0aW9uIGIoKXsKICAgIGNvbnNvbGUubG9nKCdiMScpCiAgICBjLmNhbGwoKQogICAgY29uc29sZS5sb2coJ2IyJykKICAgIHJldHVybiAnYicKfQpmdW5jdGlvbiBjKCl7CiAgICBjb25zb2xlLmxvZygnYycpCiAgICByZXR1cm4gJ2MnCn0KYS5jYWxsKCkKY29uc29sZS5sb2coJ2VuZCcp!!!\" target=\"_blank\" rel=\"noopener\">嵌套调用</a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a1'</span>)</span><br><span class=\"line\">    b.call()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a2'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'a'</span>  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b1'</span>)</span><br><span class=\"line\">    c.call()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b2'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/5/160c583872bdbfb8?w=1170&amp;h=754&amp;f=png&amp;s=53669\" alt=\"嵌套调用\"></p>\n<ul>\n<li>第一步：浏览器的入口还是a.call()，a.call()入栈，执行a函数内部的代码</li>\n<li>第二步： a函数的第一行语句console.log(‘a1’)，入栈，打印出a1，这句话就出栈死亡。此时a函数继续执行下面的代码。</li>\n<li>第三步： a函数的第二行语句b.call()入栈。执行b函数内部的代码。<ul>\n<li>第四步：进入b函数内部，b函数的第一行语句console.log(‘b1’)入栈，打印出b1，就出栈死亡。</li>\n<li>第五步：b函数的第二行c.call()入栈，又进入c函数内部<ul>\n<li>第六步：进入c函数的内部，第一行语句console.log(‘c’)入栈，打印出c,就出栈死亡。</li>\n<li>第七步：c函数执行完毕，出栈死亡。</li>\n</ul>\n</li>\n<li>第八步：回到b函数内部，执行第三行代码console.log(‘b2’)入栈，打印出b2，出栈死亡。</li>\n<li>第九步： b函数执行完毕，出栈死亡。</li>\n</ul>\n</li>\n<li>第十步： 回到a函数内部，执行第三行代码console.log(‘a2’)，入栈，打印出a2，就出栈死亡。</li>\n<li>第十一步：a函数执行完毕，出栈死亡。</li>\n<li>第十二步：console.log(‘end’)入栈，打印出end,出栈死亡。</li>\n<li>整个代码运行完，浏览器归于平静。</li>\n</ul>\n<h4 id=\"递归调用\"><a href=\"#递归调用\" class=\"headerlink\" title=\"递归调用\"></a><a href=\"http://latentflip.com/loupe/?code=ZnVuY3Rpb24gc3VtKG4pewogICAgaWYobj09MSl7CiAgICAgICAgcmV0dXJuIDEKICAgIH1lbHNlewogICAgICAgIHJldHVybiBuICsgc3VtLmNhbGwodW5kZWZpbmVkLCBuLTEpCiAgICB9Cn0KCnN1bS5jYWxsKHVuZGVmaW5lZCw1KQ%3D%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\" target=\"_blank\" rel=\"noopener\">递归调用</a></h4><p>递归调用就是上面的嵌套调用的复杂变化，细心点，分析就能明白具体的代码顺序。</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><p>除了全局变量，其他变量只能在自己的函数内部被访问到，其他区域无法访问。通过几个面试题来学习一下。</p>\n<ul>\n<li>第一道面试题</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(a) <span class=\"comment\">// 是多少</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1.call()</span><br></pre></td></tr></table></figure>\n<p>问：alert出什么东西？</p>\n<p>这种题切忌上去就做，容易打错成了 <strong>a是2</strong> 一定要先把变量提升。变成如下这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">var</span> a </span><br><span class=\"line\">    alert(a) </span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1.call()</span><br></pre></td></tr></table></figure>\n<p>这样一提升就知道啦，<strong>答案：a是undefined</strong>。</p>\n<ul>\n<li>第二道面试题</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">    f2.call()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 是多少</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1.call()</span><br></pre></td></tr></table></figure>\n<p>问：a是多少</p>\n<p>这个题用就近原则好做。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/1/5/160c583872944cc1?w=821&amp;h=459&amp;f=png&amp;s=24060\" alt=\"树形结构\"></p>\n<p>用树形结构来分析，当上面的代码被浏览器渲染之后</p>\n<ul>\n<li>全局变量里面有：var a = 1，f1、f2函数</li>\n<li>f1函数作用域里面又重新声明了一个var a = 2</li>\n<li>f2函数作用域里面是console.log(a)</li>\n</ul>\n<p>所以打印的那个a就是全局的a，答案是<strong>a=1</strong></p>\n","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"JavaScript标准库之数组","url":"https://codevvvv9.github.io/2018/01/02/JavaScript标准库之数组/","content":"<blockquote>\n<p>学习任何编程语言，数组都是绕不过去的坎，每个编程语言都在其标准库里面内置了功能强大的Array对象。通过参考阮一峰教程和MDN,我把数组常见的方法以及一些误区总结如下，内容较多，而且会继续补充，希望这一篇文章可以把数组的知识一网打尽。<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"1-数组的简单概念\"><a href=\"#1-数组的简单概念\" class=\"headerlink\" title=\"1. 数组的简单概念\"></a>1. 数组的简单概念</h3><h4 id=\"1-1-数组是什么呢？\"><a href=\"#1-1-数组是什么呢？\" class=\"headerlink\" title=\"1.1 数组是什么呢？\"></a>1.1 数组是什么呢？</h4><p>编程总要和数据打交道，常见的普通的数据由基本数据类型可以定义，一些具有多重属性、内容的数据就需要复杂的数据类型去定义，也就是对象来定义，数组也是对象的一种。</p>\n<ul>\n<li>为了方便理解，我们可以认为数组是具有一定顺序的复杂数据的组合(与对象的无序区别)，每个位置对应一个索引，索引从0开始，具有length属性，而且<strong>length属性是可变的</strong>。<h4 id=\"1-2-数组如何定义\"><a href=\"#1-2-数组如何定义\" class=\"headerlink\" title=\"1.2 数组如何定义\"></a>1.2 数组如何定义</h4></li>\n<li>第一种方法是通过Array构造函数来定义(该方法并不常用)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr1</span><br><span class=\"line\">(<span class=\"number\">3</span>) [empty × <span class=\"number\">3</span>]</span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>以上是控制台打印结果，构造了一个长度为3的、每个元素为空的数组。</p>\n<hr>\n<p>以上的写法有个小bug<br>虽然元素为空，但是正常来说，索引应该存在的，但是事实是 索引竟然不存在<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr1[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr1[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> arr1</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">in</span> arr1</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"keyword\">in</span> arr1</span><br></pre></td></tr></table></figure></p>\n<p>索引0、1、2处是undefined，完全合理，但是索引不存在，很奇怪</p>\n<hr>\n<p>而且new不写也是一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr2</span><br><span class=\"line\">(<span class=\"number\">3</span>) [empty × <span class=\"number\">3</span>]</span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但是采用构造函数的这种方法容易产生一些歧义，不同的参数个数，会产生不同的结果。<h5 id=\"1-2-1-构造函数不写参数\"><a href=\"#1-2-1-构造函数不写参数\" class=\"headerlink\" title=\"1.2.1 构造函数不写参数\"></a>1.2.1 构造函数不写参数</h5></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr3</span><br><span class=\"line\">[]</span><br><span class=\"line\">    length:<span class=\"number\">0</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>此时构造出空的数组，而且发现构造函数的()写不写都可以</p>\n<h5 id=\"1-2-2-构造函数写1个正整数参数\"><a href=\"#1-2-2-构造函数写1个正整数参数\" class=\"headerlink\" title=\"1.2.2 构造函数写1个正整数参数\"></a>1.2.2 构造函数写1个正整数参数</h5><p>那这个正整数参数就是构造出来的数组的长度。</p>\n<h5 id=\"1-2-3-构造函数参数是一个非正整数-字符串、boolean、对象等其他值\"><a href=\"#1-2-3-构造函数参数是一个非正整数-字符串、boolean、对象等其他值\" class=\"headerlink\" title=\"1.2.3 构造函数参数是一个非正整数(字符串、boolean、对象等其他值)\"></a>1.2.3 构造函数参数是一个非正整数(字符串、boolean、对象等其他值)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">'jjj'</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">[<span class=\"string\">\"jjj\"</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"jjj\"</span></span><br><span class=\"line\">    length: <span class=\"number\">1</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">[<span class=\"literal\">false</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    length: <span class=\"number\">1</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(&#123;<span class=\"number\">0</span>: <span class=\"string\">'我是一个对象'</span>&#125;)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">[&#123;…&#125;]</span><br><span class=\"line\">    <span class=\"number\">0</span>: &#123;<span class=\"number\">0</span>: <span class=\"string\">\"我是一个对象\"</span>&#125;</span><br><span class=\"line\">    length: <span class=\"number\">1</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>这个非正整数就是数组的内容</p>\n<h5 id=\"1-2-4-构造函数写多个参数\"><a href=\"#1-2-4-构造函数写多个参数\" class=\"headerlink\" title=\"1.2.4 构造函数写多个参数\"></a>1.2.4 构造函数写多个参数</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr4</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"number\">2</span></span><br><span class=\"line\">    length: <span class=\"number\">2</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>此时直接构造出0索引是元素1、1索引是元素2的数组对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">'aa'</span>, <span class=\"string\">'ff'</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr4</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"aa\"</span>, <span class=\"string\">\"ff\"</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"ff\"</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    length: <span class=\"number\">4</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>即多参数时，所有参数都是返回的新数组的成员</p>\n<h5 id=\"1-2-5-构造函数参数是非正整数，报错\"><a href=\"#1-2-5-构造函数参数是非正整数，报错\" class=\"headerlink\" title=\"1.2.5 构造函数参数是非正整数，报错\"></a>1.2.5 构造函数参数是非正整数，报错</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">-1</span>)</span><br><span class=\"line\">VM376:<span class=\"number\">1</span> Uncaught <span class=\"built_in\">RangeError</span>: Invalid array length</span><br><span class=\"line\">    at &lt;anonymous&gt;:<span class=\"number\">1</span>:<span class=\"number\">1</span></span><br><span class=\"line\">(anonymous) @ VM376:<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3.2</span>)</span><br><span class=\"line\">VM377:<span class=\"number\">1</span> Uncaught <span class=\"built_in\">RangeError</span>: Invalid array length</span><br><span class=\"line\">    at &lt;anonymous&gt;:<span class=\"number\">1</span>:<span class=\"number\">1</span></span><br><span class=\"line\">(anonymous) @ VM377:<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-2-6-数组定义的正确方法\"><a href=\"#1-2-6-数组定义的正确方法\" class=\"headerlink\" title=\"1.2.6 数组定义的正确方法\"></a>1.2.6 数组定义的正确方法</h5><p>综上所述，其实实际中直接用字面量定义数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'这样子'</span>, <span class=\"string\">'定义'</span>, <span class=\"string\">'is'</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>, &#123;<span class=\"string\">'good'</span>: <span class=\"string\">'我是数组索引为5的元素的值'</span>&#125;]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">6</span>) [<span class=\"string\">\"这样子\"</span>, <span class=\"string\">\"定义\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>, &#123;…&#125;]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"这样子\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"定义\"</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">\"is\"</span></span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"number\">4</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">5</span>: &#123;<span class=\"attr\">good</span>: <span class=\"string\">\"我是数组索引为5的元素的值\"</span>&#125;</span><br><span class=\"line\">    length: <span class=\"number\">6</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-数组的length属性解疑\"><a href=\"#2-数组的length属性解疑\" class=\"headerlink\" title=\"2. 数组的length属性解疑\"></a>2. 数组的length属性解疑</h3><p>如果你是初学者，一定要记住数组的length属性和里面的元素个数无关，爱几个元素几个元素，length并不是计数的作用。这是我自学是对数组长度最大的误解。<br>正确的理解是：<strong><code>数组的length属性等于最大正整数索引 + 1</code></strong><br>而数组的索引可以随便改变，那么length属性也是一个动态的值，可以变化。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">[]</span><br><span class=\"line\">    length:<span class=\"number\">0</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arr[<span class=\"number\">10</span>] = <span class=\"string\">'我是第10个元素，我前面没有元素，但是数组的长度绝对是11，你信不信'</span></span><br><span class=\"line\"><span class=\"string\">\"我是第10个元素，我前面没有元素，但是数组的长度绝对是11，你信不信\"</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">11</span>) [empty × <span class=\"number\">10</span>, <span class=\"string\">\"我是第10个元素，我前面没有元素，但是数组的长度绝对是11，你信不信\"</span>]</span><br><span class=\"line\">    <span class=\"number\">10</span>:<span class=\"string\">\"我是第10个元素，我前面没有元素，但是数组的长度绝对是11，你信不信\"</span></span><br><span class=\"line\">    length:<span class=\"number\">11</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这个例子一开始是个空数组，长度是0，直接给他一个索引10，可以发现长度立马变为11。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[<span class=\"number\">100</span>] = <span class=\"string\">'这次数组长度绝对是101'</span></span><br><span class=\"line\"><span class=\"string\">\"这次数组长度绝对是101\"</span></span><br><span class=\"line\">arr.length</span><br><span class=\"line\"><span class=\"number\">101</span></span><br></pre></td></tr></table></figure></p>\n<p>通过以上的例子，我们反向推理，把可以明白数组长度根本不连续，是动态变化的，即数组长度是可写的。唯一的不变真理是，它的长度永远等于最大索引+1。</p>\n<h4 id=\"2-1-把数组清空的方法\"><a href=\"#2-1-把数组清空的方法\" class=\"headerlink\" title=\"2.1 把数组清空的方法\"></a>2.1 把数组清空的方法</h4><p>由以上知识可以知道数组长度可以人为改变，进而大胆的猜想，改变长度会不会把数组清空呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrDemo = [<span class=\"string\">'this'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'test'</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arrDemo</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"test\"</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"this\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"is\"</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">\"test\"</span></span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arrDemo[<span class=\"string\">'length'</span>] = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">arrDemo</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"this\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"is\"</span></span><br><span class=\"line\">    length: <span class=\"number\">2</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arrDemo[<span class=\"string\">'length'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">arrDemo</span><br><span class=\"line\">[<span class=\"string\">\"this\"</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"this\"</span></span><br><span class=\"line\">    length: <span class=\"number\">1</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arrDemo[<span class=\"string\">'length'</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\">arrDemo</span><br><span class=\"line\">[]</span><br><span class=\"line\">    length: <span class=\"number\">0</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>把数组length设为0，证明可以清空数组。</p>\n<h4 id=\"2-2-有趣的一点\"><a href=\"#2-2-有趣的一点\" class=\"headerlink\" title=\"2.2 有趣的一点\"></a>2.2 有趣的一点</h4><p>由于数组本质上是对象的一种，所以我们可以为数组添加属性，但是这不影响length属性的值。<br><strong>一定不要有思维定式，以为添加几个新元素，长度就会加几个。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">[]</span><br><span class=\"line\">    length:<span class=\"number\">0</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arr[<span class=\"string\">'add'</span>] = <span class=\"string\">'我加一个新元素，长度绝对还是0'</span></span><br><span class=\"line\"><span class=\"string\">\"我加一个新元素，长度绝对还是0\"</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">[add: <span class=\"string\">\"我加一个新元素，长度绝对还是0\"</span>]</span><br><span class=\"line\">    add: <span class=\"string\">\"我加一个新元素，长度绝对还是0\"</span></span><br><span class=\"line\">    length:<span class=\"number\">0</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arr[<span class=\"string\">'add1'</span>] = <span class=\"string\">'我又加一个新元素，长度绝对还是0'</span></span><br><span class=\"line\"><span class=\"string\">\"我又加一个新元素，长度绝对还是0\"</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">[add: <span class=\"string\">\"我加一个新元素，长度绝对还是0\"</span>, <span class=\"attr\">add1</span>: <span class=\"string\">\"我又加一个新元素，长度绝对还是0\"</span>]</span><br><span class=\"line\">    add: <span class=\"string\">\"我加一个新元素，长度绝对还是0\"</span></span><br><span class=\"line\">    add1: <span class=\"string\">\"我又加一个新元素，长度绝对还是0\"</span></span><br><span class=\"line\">    length: <span class=\"number\">0</span></span><br><span class=\"line\">    __proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>通过这个例子，一开始元素长度为0，只要你没添加一个正整数的索引，无论你添加多少其他元素，长度永远不会变化。</p>\n<ul>\n<li>注意：<strong>方括号运算符里面一定要用引号，我总是手抖忘了加。</strong><h3 id=\"3-伪数组-array-like-object\"><a href=\"#3-伪数组-array-like-object\" class=\"headerlink\" title=\"3. 伪数组(array-like object)\"></a>3. 伪数组(array-like object)</h3>如果一个对象的所有键名都是正整数或零，并且有length属性，那么这个对象就很像数组，语法上称为“类似数组的对象”<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"number\">0</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">\t<span class=\"number\">1</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">\t<span class=\"number\">2</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">\tlength: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">obj</span><br><span class=\"line\">&#123;<span class=\"number\">0</span>: <span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>: <span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>: <span class=\"string\">\"c\"</span>, <span class=\"attr\">length</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"b\"</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">\"c\"</span></span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Object</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">\"a\"</span></span><br><span class=\"line\">obj[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"string\">\"c\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的对象，看着结构特别像但是绝对不是数组。<br>因为<strong>proto</strong>指向的就不是Array的prototype，没有指向Array的共有属性，再怎么想也只是模仿，本质不同。不具备数组的其他方法（第四部分将要列举的方法）。</p>\n<h4 id=\"3-1-数组的本质\"><a href=\"#3-1-数组的本质\" class=\"headerlink\" title=\"3.1 数组的本质\"></a>3.1 数组的本质</h4><p>由伪数组的问题引出真正的数组应该具备什么特点<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-2a11075ec5717463.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"数组.png\"><br><strong>proto</strong>必须指向数组的公有属性才是真正的数组对象。</p>\n<h3 id=\"4-数组实例的常见简单的方法-可以无参或者参数很简单\"><a href=\"#4-数组实例的常见简单的方法-可以无参或者参数很简单\" class=\"headerlink\" title=\"4. 数组实例的常见简单的方法(可以无参或者参数很简单)\"></a>4. 数组实例的常见简单的方法(可以无参或者参数很简单)</h3><h4 id=\"4-1-判断数组还是对象\"><a href=\"#4-1-判断数组还是对象\" class=\"headerlink\" title=\"4.1 判断数组还是对象\"></a>4.1 判断数组还是对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(arr)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"number\">0</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">\t<span class=\"number\">1</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">\t<span class=\"number\">2</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">\tlength: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(obj)</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>Array.isArray()方法可以判断是不是数组对象，以前学过的instanceOf也可以判断。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>所以现在有两个方法可以区分是数组还是对象了。</p>\n<h4 id=\"4-2-valueOf-，toString\"><a href=\"#4-2-valueOf-，toString\" class=\"headerlink\" title=\"4.2 valueOf()，toString()\"></a>4.2 valueOf()，toString()</h4><ul>\n<li><p>valueOf()返回数组本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.valueOf()</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>]</span><br><span class=\"line\">arr.toString()</span><br><span class=\"line\"><span class=\"string\">\"a,b\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>toString()返回数组的字符串形式</p>\n<h4 id=\"4-3-push\"><a href=\"#4-3-push\" class=\"headerlink\" title=\"4.3 push()\"></a>4.3 push()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.push(<span class=\"string\">'f'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"f\"</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>向数组的末尾添加元素，返回添加成功后的数组的长度<br><strong>会改变原数组</strong></p>\n<h4 id=\"4-4-pop\"><a href=\"#4-4-pop\" class=\"headerlink\" title=\"4.4 pop()\"></a>4.4 pop()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.pop()</span><br><span class=\"line\"><span class=\"string\">\"f\"</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>]</span><br></pre></td></tr></table></figure>\n<p>删除数组的最后一个元素，并返回删除的这个元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[].pop() <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>注意：对空数组使用pop方法，不会报错，而是返回undefined。<br>这个方法<strong>会改变原数组</strong></li>\n</ul>\n<hr>\n<p>push() 和pop()方法一起使用可以模拟栈这个数据结构</p>\n<hr>\n<h4 id=\"4-5-join\"><a href=\"#4-5-join\" class=\"headerlink\" title=\"4.5 join()\"></a>4.5 join()</h4><p>以某种形式把数组的所有成员以<strong>字符串的形式返回</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>]</span><br><span class=\"line\">arr.join(<span class=\"string\">'-'</span>)</span><br><span class=\"line\"><span class=\"string\">\"a-b\"</span></span><br></pre></td></tr></table></figure></p>\n<p>以上是以中划线的形式连接起来<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.join()</span><br><span class=\"line\"><span class=\"string\">\"a,b\"</span></span><br></pre></td></tr></table></figure></p>\n<p>如果没有规定格式，则以逗号分隔<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'rr'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">arr.join()</span><br><span class=\"line\"><span class=\"string\">\"a,rr,,\"</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>注意：如果字符串中有null和undefined的，会被转成空字符串。<br><strong>该方法不会改变原数组</strong><h4 id=\"4-6-concat\"><a href=\"#4-6-concat\" class=\"headerlink\" title=\"4.6 concat()\"></a>4.6 concat()</h4>是一个专业合并数组的方法。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'rr'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.concat([<span class=\"string\">'rrr'</span>])</span><br><span class=\"line\">(<span class=\"number\">5</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"rrr\"</span>]</span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>把一个新数组添加到旧数组的后面，返回生成的新数组。<br><strong>不会改变原数组</strong></p>\n<h4 id=\"4-7-shift\"><a href=\"#4-7-shift\" class=\"headerlink\" title=\"4.7 shift()\"></a>4.7 shift()</h4><p>删除数组的第一个元素,并返回删除的那个元素<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">arr.shift()</span><br><span class=\"line\"><span class=\"string\">\"a\"</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>会改变原数组</strong></p>\n<hr>\n<p>push()与shift()方法结合，可以模拟队列这个数据结构</p>\n<hr>\n<h4 id=\"4-8-unshift\"><a href=\"#4-8-unshift\" class=\"headerlink\" title=\"4.8 unshift()\"></a>4.8 unshift()</h4><p>在数组的第一个位置添加元素，并返回添加新元素后的数组长度<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">arr.unshift(<span class=\"string\">'ffff'</span>)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"ffff\"</span>, <span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure></p>\n<p>和shift()方法的作用正好相反。<br><strong>一定会改变原数组</strong></p>\n<h4 id=\"4-9-reverse\"><a href=\"#4-9-reverse\" class=\"headerlink\" title=\"4.9 reverse()\"></a>4.9 reverse()</h4><p>反转数组，返回反转后的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"ffff\"</span>, <span class=\"string\">\"rr\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">arr.reverse()</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>会改变原数组</strong></p>\n<h4 id=\"4-10-slice\"><a href=\"#4-10-slice\" class=\"headerlink\" title=\"4.10 slice()\"></a>4.10 slice()</h4><p>提取原数组的一部分，返回一个新的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br><span class=\"line\">arr.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>]</span><br><span class=\"line\">arr.slice()</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br><span class=\"line\">arr.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>arr.slice(1,3)从索引为1的位置开始截取，到索引3停止，但是不包括索引3。<br>arr.slice()无参是原数组的拷贝<br>arr.slice(1)从索引为1的位置开始截取，到末尾。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\">a.slice(<span class=\"number\">-2</span>) <span class=\"comment\">// [\"b\", \"c\"]</span></span><br><span class=\"line\">a.slice(<span class=\"number\">-2</span>, <span class=\"number\">-1</span>) <span class=\"comment\">// [\"b\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>如果slice方法的参数是负数，则表示倒数计算的位置。<br>上面代码中，-2表示倒数计算的第二个位置，-1表示倒数计算的第一个位置。</p>\n<hr>\n<p>slice()方法可以把伪数组变成真的数组</p>\n<hr>\n<p><strong>不会改变原数组</strong></p>\n<h4 id=\"4-11-splice\"><a href=\"#4-11-splice\" class=\"headerlink\" title=\"4.11 splice()\"></a>4.11 splice()</h4><p>删除原数组的一部分成员，返回被删的元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"literal\">null</span>, <span class=\"string\">\"rr\"</span>, <span class=\"string\">\"ffff\"</span>]</span><br><span class=\"line\">arr</span><br><span class=\"line\">[<span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure></p>\n<p>arr.splice(1,3)，从索引1开始删除，删3个元素！！！<br>一定要注意和slice区分：splice的第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'aaa'</span>, <span class=\"string\">'ff'</span>, <span class=\"string\">'aff'</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">'wu'</span>, <span class=\"number\">999</span>)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"ff\"</span>, <span class=\"string\">\"aff\"</span>]</span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"wu\"</span>, <span class=\"number\">999</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></p>\n<p>arr.splice(1, 3, ‘wu’, 999)，从索引1开始删了3个元素，有加上两个元素，’wu’和999<br>同样的负数表示倒数第几个位置<br><strong>会改变原数组</strong><br>splice()有两个变式</p>\n<ul>\n<li>变式1:我只是想单纯的插入一个元素<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">a.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\">// []</span></span><br><span class=\"line\">a <span class=\"comment\">// [1, 2, 1, 1]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>把第二个参数设为0,就可以在第2个位置插入一个元素了</p>\n<ul>\n<li>变式2:我只给一个参数，就是拆分数组，为两个新数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">(<span class=\"number\">5</span>) [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1111</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">a.splice(<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">1111</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">a</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>a.splice(2)从第三个索引处拆分这个数组。</p>\n<h4 id=\"4-12-indexOf-，lastIndexOf\"><a href=\"#4-12-indexOf-，lastIndexOf\" class=\"headerlink\" title=\"4.12 indexOf()，lastIndexOf()\"></a>4.12 indexOf()，lastIndexOf()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'f'</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"f\"</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">\"f\"</span></span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    length: <span class=\"number\">4</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arr.indexOf(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">arr.indexOf(<span class=\"string\">'f'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">-1</span></span><br><span class=\"line\">arr.lastIndexOf(<span class=\"string\">'f'</span>)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>indexOf()，返回括号里面 的元素第一次出现的位置。<br>如果有两个参数则是表示搜索的位置从第二个参数开始。<br>如果找不到该元素，则返回-1。<br>lastIndexOf()返回括号里面的元素最后一次出现的位置。</p>\n<ul>\n<li>一个MDN的实战例子：获得数组里面某个元素出现的所有位置(利用循环和返回值-1的特点)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"number\">0</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrTemp = []; <span class=\"comment\">//空数组用来存储目标元素出现的所有索引</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> element = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = arr.indexOf(element);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(index != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\tarrTemp.push(index);</span><br><span class=\"line\">\tindex = arr.indexOf(element, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrTemp);</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>] <span class=\"comment\">//'a'出现在0、2、4索引位置处</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>注意：这里有个例外<br>数组里面包含NaN时无法判断<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'f'</span>, <span class=\"literal\">NaN</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"literal\">NaN</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"f\"</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">\"f\"</span></span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"literal\">NaN</span></span><br><span class=\"line\">    length: <span class=\"number\">4</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arr.indexOf(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"number\">-1</span></span><br><span class=\"line\">arr.lastIndexOf(<span class=\"string\">'NaN'</span>)</span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure></p>\n<p>arr数组的第四个位置是NaN,但是无法获得索引。<br><strong>因为indexOf()，lastIndexOf()是严格按照<code>===</code>操作符来检测的，而NaN是唯一的不与自身相等的值。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">1</span> === <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"string\">'a'</span> === <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>奇葩啊，NaN与自己都不相等</p>\n<hr>\n<h3 id=\"5-数组实例的常见复杂的方法-参数是另一个函数\"><a href=\"#5-数组实例的常见复杂的方法-参数是另一个函数\" class=\"headerlink\" title=\"5. 数组实例的常见复杂的方法(参数是另一个函数)\"></a>5. 数组实例的常见复杂的方法(参数是另一个函数)</h3><h4 id=\"5-1-sort\"><a href=\"#5-1-sort\" class=\"headerlink\" title=\"5.1 sort()\"></a>5.1 sort()</h4><p>下面MDN的解释非常棒</p>\n<blockquote>\n<p><code>sort()</code> 方法在适当的位置对数组的元素进行排序，并返回数组。 sort 排序不一定是<a href=\"https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A9.A9.E5.AE.9A.E6.80.A7\" target=\"_blank\" rel=\"noopener\">稳定的</a>。默认排序顺序是根据字符串Unicode码点。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruit = [<span class=\"string\">'cherries'</span>, <span class=\"string\">'apples'</span>, <span class=\"string\">'bananas'</span>];</span><br><span class=\"line\">fruit.sort(); </span><br><span class=\"line\"><span class=\"comment\">// ['apples', 'bananas', 'cherries']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span>]; </span><br><span class=\"line\">scores.sort(); </span><br><span class=\"line\"><span class=\"comment\">// [1, 10, 2, 21]</span></span><br><span class=\"line\"><span class=\"comment\">// 注意10在2之前,</span></span><br><span class=\"line\"><span class=\"comment\">// 因为在 Unicode 指针顺序中\"10\"在\"2\"之前</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> things = [<span class=\"string\">'word'</span>, <span class=\"string\">'Word'</span>, <span class=\"string\">'1 Word'</span>, <span class=\"string\">'2 Words'</span>];</span><br><span class=\"line\">things.sort(); </span><br><span class=\"line\"><span class=\"comment\">// ['1 Word', '2 Words', 'Word', 'word']</span></span><br><span class=\"line\"><span class=\"comment\">// 在Unicode中, 数字在大写字母之前,</span></span><br><span class=\"line\"><span class=\"comment\">// 大写字母在小写字母之前.</span></span><br></pre></td></tr></table></figure>\n<p>上述代码两点注意</p>\n<ul>\n<li><p>第一点是<br>上述代码中的第二部分的<code>[1, 10, 2, 21]</code>是因为<br><code>10</code>的Unicode编码是\\u0031\\u0030，<code>2</code>的Unicode编码是\\u0032，所以<code>10</code>排在<code>2</code>的前面</p>\n</li>\n<li><p>第二点是上述代码中的第三部分的<code>[&#39;1 Word&#39;, &#39;2 Words&#39;, &#39;Word&#39;, &#39;word&#39;]</code>是因为<br><code>&#39;Word&#39;</code>的Unicode编码是</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u0026\\u0023\\u0033\\u0039\\u003b\\u0057\\u006f\\u0072\\u0064\\u0026\\u0023\\u0033\\u0039\\u003b</span><br></pre></td></tr></table></figure>\n<p><code>&#39;word&#39;</code>的Unicode编码是</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u0026\\u0023\\u0033\\u0039\\u003b\\u0077\\u006f\\u0072\\u0064\\u0026\\u0023\\u0033\\u0039\\u003b</span><br></pre></td></tr></table></figure>\n<p>所以   ‘Word’排在’word’前面。</p>\n<p>各种编码查询<a href=\"http://tool.chinaz.com/tools/unicode.aspx\" target=\"_blank\" rel=\"noopener\">站长工具</a><br><strong>sort方法明显的会改变原数组啊</strong></p>\n</li>\n<li><p>我们通常不想使用默认的升序排列，sort方法可以传入函数来改变顺序。<br>MDN的语法是arr.sort(compareFunction)<br><code>compareFunction</code>这个函数用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的诸个字符的Unicode位点进行排序。<br><code>compareFunction</code>这个函数基本的规则是传入两个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compareNumbers</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>a,b参数比较</th>\n<th>代表的意思</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compareFunction(a, b) &lt; 0</td>\n<td>a在b之前</td>\n</tr>\n<tr>\n<td>compareFunction(a, b) &gt; 0</td>\n<td>b在a之前</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">-7</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">a</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"number\">1</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">-7</span>]</span><br><span class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> b-a&#125;)</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">-7</span>]</span><br></pre></td></tr></table></figure>\n<p>降序排列。</p>\n<ul>\n<li>也可以根据具体需求来根据属性来排列<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> students = [<span class=\"string\">'小明'</span>,<span class=\"string\">'小红'</span>,<span class=\"string\">'小花'</span>];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> scores = &#123; 小明: <span class=\"number\">59</span>, 小红: <span class=\"number\">99</span>, 小花: <span class=\"number\">80</span> &#125;; </span><br><span class=\"line\">students.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scores[b] - scores[a]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"小红\"</span>, <span class=\"string\">\"小花\"</span>, <span class=\"string\">\"小明\"</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上是把三个学生根据成绩从大到小排列的</p>\n<h4 id=\"5-2-map\"><a href=\"#5-2-map\" class=\"headerlink\" title=\"5.2 map()\"></a>5.2 map()</h4><p>map() 方法创建一个新数组，其结果是该数组中的<strong>每个元素</strong>都调用一个提供的函数后返回的结果。<br><strong>不影响原数组。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>]</span><br><span class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value = value + <span class=\"string\">\"f\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"aaf\"</span>, <span class=\"string\">\"bbf\"</span>, <span class=\"string\">\"ccf\"</span>]</span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"aa\"</span>, <span class=\"string\">\"bb\"</span>, <span class=\"string\">\"cc\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>以上代码中map()方法里面传入的函数是一个把数组每个值都加上一个’f’。<br>每个元素末尾都加上一个’f’，然后返回这个新的数组，原数组没有任何变化的。<br>我初学的时候，看到上述代码反正很懵逼，这玩意咋出来的这个结果呢。琢磨了很久，还是觉得MDN的解释明白，只不过需要看个3、4遍就能明白了。<br>语法规范是:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Return element for new_array </span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>callback<br>生成新数组元素的函数，使用三个参数：<br>currentValue<br>callback 的第一个参数，数组中正在处理的当前元素。<br>index<br>callback 的第二个参数，数组中正在处理的当前元素的索引。<br>array<br>callback 的第三个参数，map 方法被调用的数组。<br>thisArg<br>可选的。执行 callback 函数时 使用的this 值。<br>返回值<br>一个新数组，每个元素都是回调函数的结果。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue, index, arr</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue*index</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>其实callback 的第三个参数可以不写，也知道调用的到底是哪个Array。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue, index</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue*index</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure></p>\n<p>当你用map()方法的时候，callback 函数会被自动传入三个参数：数组的每一个元素，元素索引，原数组本身。既然原数组本身可以省略，那么由剩下的两个特点我们发散一下，会想到前面我们讲过，伪数组(比如字符串)也具备这两个特点会不会也能用map()方法呢，接下来做个实验。<br>哈哈哈哈，愚蠢的人类，你想的美，怎么可能直接使用呢，必须把伪数组转换一下的。</p>\n<ul>\n<li>第一种转换方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> upper = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str.toUpperCase();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">[].map.call(<span class=\"string\">'abc'</span>, upper)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上是通过map函数的call方法间接使用</p>\n<ul>\n<li>第二种转换方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'abc'</span>.split(<span class=\"string\">''</span>).map(upper)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>&#39;abc&#39;.split(&#39;&#39;)</code>把字符串转成数组<code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code></p>\n<hr>\n<p>至此，字符串和数组相互转化的方法，都学到了,总结如下。</p>\n<ul>\n<li><p>数组转字符串 三种方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].toString()</span><br><span class=\"line\"><span class=\"string\">\"1,3,4\"</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>] + <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"string\">\"1,3,4\"</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].join()</span><br><span class=\"line\"><span class=\"string\">\"1,3,4\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串转数组 一种方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'abxc'</span>.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"c\"</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>在map()的最后，要注意数组的空位问题。<br>我们先看一个map()处理含有空位的数组的奇怪现象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123; <span class=\"keyword\">return</span> n + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, , <span class=\"number\">2</span>].map(f) </span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">2</span>, empty, <span class=\"number\">3</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">2</span>].map(f)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">2</span>, <span class=\"literal\">NaN</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"literal\">null</span>, <span class=\"number\">2</span>].map(f)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure></p>\n<p>可以发现<code>[1, , 2].map(f)</code>空位未执行map()。map方法不会跳过undefined和null，但是会跳过空位。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> + <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">true</span> + <span class=\"number\">1</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"literal\">false</span> + <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//好奇怪</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>用一个更直观的例子来证明map方法会跳过空位<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">2</span>).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'enter...'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">(<span class=\"number\">2</span>) [empty × <span class=\"number\">2</span>]</span><br><span class=\"line\">    length: <span class=\"number\">2</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>本文一开始就讲了Array[2]始构造了长度为2的空数组，没有打印出enter，说明未执行map()方法。</p>\n<blockquote>\n<p>使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。</p>\n</blockquote>\n<hr>\n<p>以上引入了数组的空位（hole）概念，<strong>那什么才是数组的空位呢</strong><br><code>var a= [1, , 2]</code> 中间就是一个空位<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a= [<span class=\"number\">1</span>, , <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">a</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">1</span>, empty, <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"number\">2</span></span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">a[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到，空位计入数组长度,空位可读取，但是是undefined。<br>delete命令可以删除数组内的一个元素<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">1</span>, empty, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">delete</span> a[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">a</span><br><span class=\"line\">(<span class=\"number\">3</span>) [empty × <span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"number\">2</span></span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>delete命令删除成功，返回true,但是length不变，说明空位可以被读取到，所以用delete命令无法清空数组。目前把数组清空的唯一方法就是把length属性改为0。<br>换句话说<strong>length属性不能过滤空位</strong>。<br>当使用length属性进行数组遍历时，一定要非常小心。</p>\n<p>数组的某个位置是空位，与某个位置是undefined，是不一样的。<br>为什么不一样呢。</p>\n<ul>\n<li><p>如果是空位，使用数组的forEach方法(接下来重点研究)、for…in结构、以及Object.keys方法进行遍历，空位都会被跳过。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, , , <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">a</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"number\">1</span>, empty × <span class=\"number\">2</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"number\">5</span></span><br><span class=\"line\">    length: <span class=\"number\">4</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">//只打印出了已经存在具体数值的1和5</span></span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"built_in\">console</span>.log(x)&#125;)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"comment\">//只有0索引和3索引</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"comment\">//只有0索引和3索引</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(a)</span><br><span class=\"line\">(<span class=\"number\">2</span>) [<span class=\"string\">\"0\"</span>, <span class=\"string\">\"3\"</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"0\"</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"3\"</span></span><br><span class=\"line\">    length: <span class=\"number\">2</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果是undefined，使用数组的forEach方法(接下来重点研究)、for…in结构、以及Object.keys方法进行遍历，不会被跳过。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i + <span class=\"string\">'. '</span> + x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 0. undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 1. undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 2. undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(a)</span><br><span class=\"line\"><span class=\"comment\">// ['0', '1', '2']</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的对比可以知道，空位就是数组没有这个元素，所以不会被遍历到，而undefined则表示数组有这个元素，值是undefined，所以遍历不会跳过。</p>\n<hr>\n<h4 id=\"5-3-forEach\"><a href=\"#5-3-forEach\" class=\"headerlink\" title=\"5.3 forEach()\"></a>5.3 forEach()</h4><p>该方法与map()类似，都是使数组的每个元素执行一个函数。与map()的最大区别是没有返回值，而map()返回一个新的数组。forEach()只关心数据的操作，而不关心返回值。forEach()方法传入的函数，实际上是有3个值。<br>MDN的语法规范<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.forEach(callback(currentValue, index, array)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">array.forEach(callback[, thisArg])</span><br></pre></td></tr></table></figure></p>\n<p>参数列表的含义与map()方法的每个参数含义相同。<br>callback()函数的array参数，通常省略，自己要脑补上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//x就是数组的每一个元素，i是每一个元素的索引</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i + <span class=\"string\">': '</span> + x)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"number\">0</span>: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span>: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>谁去调用的forEach()方法，那么callback()里面的array就会自动传入那个数组，但是是隐藏的。和我一样的初学者，都曾怀疑过，哪里传进来的数组呢，最好的答案都在MDN的callback()函数的语法规则里面，具体的细节分析和map()的分析一样。</p>\n<ul>\n<li>注意: 用forEach()方法遍历数组，无法再某个条件时停止遍历，此时应该用普通的for循环<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(arr1[i] === <span class=\"number\">2</span>)&#123;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面代码中，执行到数组的第二个成员时，就会中断执行。forEach方法做不到这一点。</p>\n<ul>\n<li><p>与map()方法一样，forEach方法会跳过数组的空位。而不会跳过undefined和null。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">2</span>].forEach(log)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"literal\">null</span>, <span class=\"number\">2</span>].forEach(log)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, , <span class=\"number\">2</span>].forEach(log)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然了，forEach方法也可以用于类似数组的对象和字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  a: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">  length: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(obj, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( i + <span class=\"string\">':'</span> + value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 0:1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(str, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( i + <span class=\"string\">':'</span> + value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 0:h</span></span><br><span class=\"line\"><span class=\"comment\">// 1:e</span></span><br><span class=\"line\"><span class=\"comment\">// 2:l</span></span><br><span class=\"line\"><span class=\"comment\">// 3:l</span></span><br><span class=\"line\"><span class=\"comment\">// 4:o</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对象和字符串使用foreach一定要用Array.prototype.forEach.call()的。</p>\n<blockquote>\n<p><code>forEach</code> 遍历的范围在第一次调用 <code>callback</code> 前就会确定。调用<code>forEach</code> 后添加到数组中的项不会被 <code>callback</code> 访问到。如果已经存在的值被改变，则传递给 <code>callback</code> 的值是 <code>forEach</code> 遍历到他们那一刻的值。已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了(例如使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\" title=\"shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。\" target=\"_blank\" rel=\"noopener\"><code>shift()</code></a>) ，之后的元素将被跳过</p>\n</blockquote>\n<p>ε=(´ο｀*)))唉，上面这段话啊，可以看出forEach()和map()函数如此的相似啊。</p>\n<ul>\n<li>举一个MDN上面的例子，一旦数组被修改了，遍历不受你的影响<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = [<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>, <span class=\"string\">\"four\"</span>];</span><br><span class=\"line\">words.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (word === <span class=\"string\">\"two\"</span>) &#123;</span><br><span class=\"line\">    words.push(<span class=\"string\">'aaa'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">one</span><br><span class=\"line\">two</span><br><span class=\"line\">three</span><br><span class=\"line\">four</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们发现遍历出了原来的所有元素，在forEach()开始之后的添加的<code>&#39;aaa&#39;</code>并不会遍历到。<br>不过MDN的例子比我的难度大多了啊。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = [<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>, <span class=\"string\">\"four\"</span>];</span><br><span class=\"line\">words.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (word === <span class=\"string\">\"two\"</span>) &#123;</span><br><span class=\"line\">    words.shift();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// four</span></span><br></pre></td></tr></table></figure></p>\n<p>当到达包含值”two”的项时，整个数组的第一个项被移除了，这导致所有剩下的项上移一个位置。因为元素 “four”现在在原数组的第三个位置，three跑到了第二个位置，而此时要去遍历第三个位置，所以不会打印three。</p>\n<h4 id=\"5-4-filter\"><a href=\"#5-4-filter\" class=\"headerlink\" title=\"5.4 filter()\"></a>5.4 filter()</h4><p>filter方法的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。<br>通俗的理解就是过滤器。callback()函数与以上两个一样，也是传入三个参数。<br>第一个参数是当前数组成员的值，这个是必须的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;<span class=\"keyword\">return</span> value&gt;<span class=\"number\">5</span>&#125;)</span><br><span class=\"line\">[<span class=\"number\">7</span>]</span><br><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;<span class=\"keyword\">return</span> value&gt;<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure></p>\n<p>可以理解为给filter()传入的函数一个规则，满足规则的才能返回。</p>\n<h4 id=\"5-5-reduce\"><a href=\"#5-5-reduce\" class=\"headerlink\" title=\"5.5 reduce()\"></a>5.5 reduce()</h4><blockquote>\n<p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<br>以上是MDN的解释，挺难理解字面意思的。直接用实例来理解吧。</p>\n<ul>\n<li>累加求和<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>] </span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preSum, ele</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> preSum + ele;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>reduce()函数传入一个函数作为参数，函数里面传入两个参数，preSum默认是数组的第一个元素，每次都把数组的两个元素相加并返回，ele就是每个数组元素。<br>你也快成规定起始的累加值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preSum, ele</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> preSum + ele;</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">30</span></span><br></pre></td></tr></table></figure></p>\n<p>起始的累加值是10，那么加上数组的20就是30。</p>\n<ul>\n<li>用reduce表示map()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr, n</span>)</span>&#123;</span><br><span class=\"line\">\tarr.push(n*<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;, [])<span class=\"comment\">//[]空数组作为一个初始值</span></span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>利用reduce()完成了map()一样的功能</p>\n<ul>\n<li>用reduce表示filter()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr, n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&gt;<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">\t\tarr.push(n)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\">(<span class=\"number\">3</span>) [<span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果原数组里面的值大于3,就放到新的数组里面。和filter()道理一样。</p>\n<ul>\n<li>计算数组里面技术的和<br>var a = [1,2,3,4,5,6,7,8,9]<br>计算所有奇数的和<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum, n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum + n</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>先判断一下，再把奇数相加</p>\n<h4 id=\"5-6-几个方法组合使用\"><a href=\"#5-6-几个方法组合使用\" class=\"headerlink\" title=\"5.6 几个方法组合使用\"></a>5.6 几个方法组合使用</h4><ul>\n<li>计算数组的偶数和<br>给定一个 数组 var a = [1,2,3,4,5,6,7,8,9]</li>\n</ul>\n<ol>\n<li>获取所有偶数</li>\n<li>得到所有偶数的平方<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n %<span class=\"number\">2</span> ===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n*n</span><br><span class=\"line\">&#125;)<span class=\"comment\">//[4,16,36,64]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>先调用filter()获得所有偶数，再调用map()获得所有偶数平方和</p>\n<h4 id=\"5-7-some-，every\"><a href=\"#5-7-some-，every\" class=\"headerlink\" title=\"5.7 some()，every()\"></a>5.7 some()，every()</h4><blockquote>\n<p>some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。<br>传入的参数也是一个callback()函数，callback 被调用时传入三个参数：元素的值，元素的索引，被遍历的数组。其实一般只要发现时传入callback()函数，基本都是这些参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">5</span>) [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"attr\">notNumber</span>: <span class=\"string\">\"not a number\"</span>]</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"number\">3</span>: <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"number\">4</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    notNumber: <span class=\"string\">\"not a number\"</span></span><br><span class=\"line\">    length: <span class=\"number\">5</span></span><br><span class=\"line\">    __proto__: <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> index &gt; <span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\">arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> index &gt; <span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>some()方法的作用是只要数组中的<strong>某个元素满足传入的函数的要求就返回true</strong>。</p>\n<blockquote>\n<p>every() 方法测试数组的所有元素是否都通过了指定函数的测试。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> elem &gt;= <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>every()是要求数组的<strong>所有元素都满足传入的函数的要求才返回true</strong>。</p>\n<ul>\n<li><strong>注意</strong>：对于空数组，some方法返回false，every方法返回true，回调函数都不会执行。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEven</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">[].every(isEven)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[].some(isEven)</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对上面的结果，我又有什么办法呢，只能选择背过呗。<br><strong>这两个方法都不改变原数组</strong></p>\n<h3 id=\"6-上述数组的方法的使用总结\"><a href=\"#6-上述数组的方法的使用总结\" class=\"headerlink\" title=\"6. 上述数组的方法的使用总结\"></a>6. 上述数组的方法的使用总结</h3><p>数组的上述方法种类繁多，不过有几个特点很明显，一些方法会改变原数组，一些方法不会改变原数组，我以这个细节把上述方法分类如下</p>\n<h4 id=\"6-1-改变原数组的方法\"><a href=\"#6-1-改变原数组的方法\" class=\"headerlink\" title=\"6.1 改变原数组的方法\"></a>6.1 改变原数组的方法</h4><table>\n<thead>\n<tr>\n<th>方法名字</th>\n<th>方法作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>push()</td>\n<td>在元素末尾添加元素，<strong>返回添加新元素后的数组长度</strong></td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>删除数组末尾的元素，<strong>返回删除的那个元素</strong>。与push()方法一起模拟栈这个数据结构</td>\n</tr>\n<tr>\n<td>shift()</td>\n<td>删除数组的第一个元素，<strong>返回删除的那个元素</strong>。与push()方法结合，模拟队列这个数列这个数据结构</td>\n</tr>\n<tr>\n<td>unshift()</td>\n<td>在数组的起始位置添加新元素，<strong>返回添加新元素后的数组长度</strong></td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td>把数组的每一个元素的位置互换，<strong>返回翻转后的数组</strong></td>\n</tr>\n<tr>\n<td>splice()</td>\n<td>根据方法传入的参数删除原数组的部分元素，<strong>返回被删除的元素。可以用来拆分数组</strong></td>\n</tr>\n<tr>\n<td>indexOf()，lastIndexOf()</td>\n<td>返回括号里面 的元素第一次出现和最后一次出现的位置。NaN元素无法获得位置</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>默认按照数组元素的Unicode码点排序，可以自己传入函数，规定排序准则</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6-2-不改变原数组的方法\"><a href=\"#6-2-不改变原数组的方法\" class=\"headerlink\" title=\"6.2 不改变原数组的方法\"></a>6.2 不改变原数组的方法</h4><table>\n<thead>\n<tr>\n<th>方法名字</th>\n<th>方法作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>join()</td>\n<td>以某种形式把数组的所有元素以字符串的形式返回，默认以逗号分隔，<strong>返回生成的新数组</strong></td>\n</tr>\n<tr>\n<td>concat()</td>\n<td>专业合并数组，把新数组添加到旧数组的后面，<strong>返回生成的新数组</strong></td>\n</tr>\n<tr>\n<td>slice()</td>\n<td>根据方法传入的参数提取原数组的部分，<strong>返回提取的这个新数组</strong>。<strong>也可以用来把伪数组变成真数组</strong></td>\n</tr>\n<tr>\n<td>map()</td>\n<td>必须传入一个callback()函数，数组的每一个元素执行这个函数，<strong>返回执行回调函数后的新数组</strong>。该方法会跳过<strong>空位</strong></td>\n</tr>\n<tr>\n<td>forEach()</td>\n<td>必须传入一个callback()函数，数组的每一个元素执行这个函数。<strong>没有返回值，无法终止循环</strong></td>\n</tr>\n<tr>\n<td>filter()</td>\n<td>必须传入一个callback()函数，数组的每一个元素执行这个函数，<strong>返回结果为true的成员组成一个新数组返回</strong></td>\n</tr>\n<tr>\n<td>reduce()</td>\n<td>对数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<strong>具体理解看例子吧</strong></td>\n</tr>\n<tr>\n<td>some()</td>\n<td>只要数组中的某个元素满足传入的函数的要求就返回true</td>\n</tr>\n<tr>\n<td>every()</td>\n<td>数组的所有元素都满足传入的函数的要求才返回true</td>\n</tr>\n</tbody>\n</table>\n<p>正是因为以上的方法对原数组不造成影响，所以我们可以组合使用filter()、map()先过滤再匹配。</p>\n<h4 id=\"6-3-数组的遍历\"><a href=\"#6-3-数组的遍历\" class=\"headerlink\" title=\"6.3 数组的遍历\"></a>6.3 数组的遍历</h4><p>对于有序无序的数据，我们有时候会希望获得所有的key或者value，数组对这个需求尤甚。<br>一般来说，数组的遍历有三种方法</p>\n<ul>\n<li><p>for…in循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr[key])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切忌把arr[key]手抖写成了arr.key。因为arr.key等同于arr[‘key’]，很明显数组没有这个名字叫key的键。<br>for…in循环有个弊端就是它会把非数字的索引也打印出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">5</span>) [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">arr.notNumber = <span class=\"string\">'not a number'</span></span><br><span class=\"line\"><span class=\"string\">\"not a number\"</span></span><br><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">5</span>) [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"attr\">notNumber</span>: <span class=\"string\">\"not a number\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">':'</span> + arr[key])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">0</span>: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span>: <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span>: <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">4</span>: <span class=\"number\">30</span></span><br><span class=\"line\">notNumber: not a number</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果我们只关心数组的数字索引，用传统的下面的传统for循环</p>\n<ul>\n<li>传统for循环<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">5</span>) [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"attr\">notNumber</span>: <span class=\"string\">\"not a number\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i + <span class=\"string\">':'</span> + arr[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>:<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span>:<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span>:<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">4</span>:<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种方法其实是我们人为规定了只遍历数字索引，O(∩_∩)O哈哈~</p>\n<ul>\n<li>forEach(）循环<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr</span><br><span class=\"line\">(<span class=\"number\">5</span>) [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"attr\">notNumber</span>: <span class=\"string\">\"not a number\"</span>]</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(index + <span class=\"string\">':'</span> + value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>:<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span>:<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span>:<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">4</span>:<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种方法也不会遍历非数字的索引。</p>\n","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"margin为负的理解","url":"https://codevvvv9.github.io/2017/12/29/margin为负的理解/","content":"<h3 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h3><ul>\n<li>解决一个问题的关键在于马上着手去解决这个问题。我们都觉得CSS难学，那么就抓紧时间去学，去学，去学<h3 id=\"margin的概念\"><a href=\"#margin的概念\" class=\"headerlink\" title=\"margin的概念\"></a>margin的概念</h3>margin是盒模型中一个很重要的概念，是border之外的区域，我们通常称作外边距，有margin-top,margin-right,margin-bottom.moargin-left四个外边距。注意我书写的顺序是从上开始顺时针的顺序。</li>\n</ul>\n<a id=\"more\"></a>\n<p>对于这四个值，我们在设置的时候必然只能有4种情况：一个值、两个值、三个值、四个值。</p>\n<blockquote>\n<ul>\n<li>第一种：margin: 10px; 表示四个外边距全都是10px;</li>\n<li>第二种：margin: 10px 5px 10px 5px; 表盘上按照从上开始顺时针转一圈，分别表示上外边距10px、右外边距5px、下外边距10px、左外边距5px;</li>\n<li>第三种：margin: 10px 5px; 只有两个数字，上、右都有了，另外的两个去哪找呢。众所周知表盘是对称的，那么第一个数是上外边距和下外边距10px、右外边距和左外边距5px;</li>\n<li>第四种：margin: 10px 5px 10px; 只有三个数，那么还是用对称来找，第二个右外边距依然对应左外边距，那么结果就显而易见了。上外边距10px、左外边距和右外边距5px、下外边距10px；</li>\n</ul>\n</blockquote>\n<p>  以上第二种是核心，方便理解其他的三种方式。同理，padding也是这个顺序。<br>  上面这些必备知识，对于任何一个自学的前端，相信都会，没有任何新意。</p>\n<ul>\n<li>接下来，我们探讨一下，以margin为例，它的值是负数的时候意味着什么呢？这是一个很有趣的实验，对于像我一样的新人来说，负值这个概念还是挺奇怪的，我是理解了好一会才搞明白的。<h4 id=\"先上栗子\"><a href=\"#先上栗子\" class=\"headerlink\" title=\"先上栗子\"></a>先上<a href=\"http://js.jirengu.com/zakoxawasa/1/edit\" target=\"_blank\" rel=\"noopener\">栗子</a></h4>以margin的margin-left为例来演示，看官们也可以管中窥豹。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML的核心代码--&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box1&quot;&gt;测试margin为负值的情况&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>demo很简单，就是一个大div包裹了一个小div。由简单入手，正是<code>删繁就简三秋树，领异标新二月花</code>。<br>下面是CSS的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html&#123;</span><br><span class=\"line\">  border: 1px solid green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body&#123;</span><br><span class=\"line\">  outline: 1px solid orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container&#123;</span><br><span class=\"line\">  border: 1px solid red;</span><br><span class=\"line\">  margin-left:30px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box1&#123;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  outline: 1px solid blue;</span><br><span class=\"line\">  margin-left: -30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之所以把<code>html</code>以及<code>body</code>样式也加上，是因为我发现，要想把这个负值的概念理解的很透彻，经过我的多次实践，一定要采取这种自底向上的，完全展现整个过程的变化，才能说真的理解了这个概念。<br>真正的原因如下</p>\n<ul>\n<li><code>html</code>的<code>border</code>让我们发现<code>body</code>的默认外边距是<code>8px</code></li>\n<li><code>body</code>的<code>outline</code>让我们直观的体会改变<code>box1</code>的<code>margin-left</code>的时候是如何变化的（我假设大家都知道改变左外边距会类名是<code>container</code>的<code>div</code>的<code>border</code>）</li>\n<li>至于<code>body</code> <code>box</code>我没有用border，是因为这个border的宽度会影响图片的效果，进而影响理解。我是用了outline来替代border,它的作用和border一样，也是让我们知道我们要观察的元素的到底在网页的什么位置，人类还是以直观展现为主，太抽象不利于分析，不过他没有宽度，只要颜色。</li>\n</ul>\n<hr>\n<p><strong>实验的目的：改变margin-left的负值的大小，观察他的移动方向，而<code>container</code>的<code>div</code>的margin-left:30px;的设置正是确立边界，我通过对比margin-left的负值的大小与移动方向、移动距离来推论</strong><br>下面我们具体分析整个过程，以下面的图的变化来分析。<br>通常科学的分析方法是找临界值，我采用的是去问题的的对立面来找线索，要分析负值，我们先看margin是正值的情况。</p>\n<ul>\n<li>由正值变为 0 再变为负值不正是一个科学探索的过程吗</li>\n<li>首先，要记得margin-left的第二次赋值会改变他的第一次值，也就是页面显示的永远是你最后赋的值。<h4 id=\"第一步-margin-left-30px的情况\"><a href=\"#第一步-margin-left-30px的情况\" class=\"headerlink\" title=\"第一步 margin-left: 30px的情况\"></a>第一步 margin-left: 30px的情况</h4><img src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c8d41beff4d3?w=1235&amp;h=858&amp;f=png&amp;s=82629\" alt=\"margin-left: 30px的情况的图\"><br>如图所示，效果很直观。margin-left第二次赋值为30px,覆盖了它的初始值10px。图中绿色是html的border,橘黄色是body的outline,大div的border是红色，内部的box1outline是蓝色。<h4 id=\"第二步-margin-left-30px变大的情况\"><a href=\"#第二步-margin-left-30px变大的情况\" class=\"headerlink\" title=\"第二步 margin-left: 30px变大的情况\"></a>第二步 margin-left: 30px变大的情况</h4></li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c9007408a4ea?w=1171&amp;h=863&amp;f=png&amp;s=75365\" alt=\"margin-left: 30px变大的情况的图\"><br>对比上述两个图，很容易的发现：<strong>margin-left变大，content的宽度变小，理解为挤扁了</strong></p>\n<h4 id=\"第三步-margin-left-30px变小的情况\"><a href=\"#第三步-margin-left-30px变小的情况\" class=\"headerlink\" title=\"第三步 margin-left: 30px变小的情况\"></a>第三步 margin-left: 30px变小的情况</h4><p><img src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c920205e35fe?w=1338&amp;h=856&amp;f=png&amp;s=81120\" alt=\"margin-left: 30px变小的情况的图\"><br>对比二、三步的图发现，<strong>margin-left变小，content的宽度变大，理解为外扩了</strong>，当让了，此时还没分析完，我们不能很确定这个结论，继续变小，来分析。</p>\n<hr>\n<p>这是一个伟大分界线，临界值</p>\n<hr>\n<h4 id=\"第四步-margin-left-30px变小变为0了\"><a href=\"#第四步-margin-left-30px变小变为0了\" class=\"headerlink\" title=\"第四步 margin-left: 30px变小变为0了\"></a>第四步 margin-left: 30px变小变为0了</h4><p><img src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c944908df768?w=1619&amp;h=838&amp;f=png&amp;s=123292\" alt=\"margin-left: 30px变小变为0了的图\"></p>\n<hr>\n<p>又是一条伟大分界线，开辟了二次元</p>\n<hr>\n<h4 id=\"第五步-margin-left-30px变小变为负值了\"><a href=\"#第五步-margin-left-30px变小变为负值了\" class=\"headerlink\" title=\"第五步 margin-left: 30px变小变为负值了\"></a>第五步 margin-left: 30px变小变为负值了</h4><p><img src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c958b6374755?w=1329&amp;h=881&amp;f=png&amp;s=85660\" alt=\"margin-left: 30px变小变为负值了的图\"></p>\n<hr>\n<p>又是一条伟大分界线,与body的outline重合</p>\n<hr>\n<h4 id=\"第六步-margin-left-30px变小变为-30px了\"><a href=\"#第六步-margin-left-30px变小变为-30px了\" class=\"headerlink\" title=\"第六步 margin-left: 30px变小变为-30px了\"></a>第六步 margin-left: 30px变小变为-30px了</h4><p><img src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c9713aa4dc08?w=1246&amp;h=898&amp;f=png&amp;s=81449\" alt=\"margin-left: 30px变小变为-30px了的图\"></p>\n<hr>\n<p>又是一条伟大分界线,都超出天际了，还能小</p>\n<hr>\n<h4 id=\"第七步-margin-left-30px变小变为-60px了\"><a href=\"#第七步-margin-left-30px变小变为-60px了\" class=\"headerlink\" title=\"第七步 margin-left: 30px变小变为-60px了\"></a>第七步 margin-left: 30px变小变为-60px了</h4><p><img src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c98296c98322?w=1127&amp;h=845&amp;f=png&amp;s=70219\" alt=\"margin-left: 30px变小变为-60px了的图\"></p>\n<p>至此，整个过程分析完毕，可以肯定一个结论了：<strong>margin-left变大，content的宽度变小，理解为挤扁了，margin-left变小，content的宽度变大，理解为外扩了</strong></p>\n<ul>\n<li>接下来我将继续探索margin-bottom为负的情况，<strong>因为这个会改变父元素的高度</strong></li>\n</ul>\n<hr>\n<p>以上就是我总结的结论。<br>很喜欢张鑫旭老师的一段话，今天就以张老师的<a href=\"http://www.zhangxinxu.com/wordpress/2012/07/bottleneck-css-study/\" target=\"_blank\" rel=\"noopener\">关于CSS学习瓶颈</a>的一段话，来结束这篇文章。</p>\n<blockquote>\n<h4 id=\"理解的对错\"><a href=\"#理解的对错\" class=\"headerlink\" title=\"理解的对错\"></a>理解的对错</h4><p><br>每个人的成长经历不同，大脑擅长处理的东西也不同，导致其看待与理解事物的方式也不同。因此，对于同一CSS表现的差异，每个人的理解都不同。<br><br>一旦有所差异，就有所谓的“对错”之争。估计不少人会拿《CSS权威指南》上的东西说事：你那种理解是错误的，CSS权威指南上说……或W3C官方文档解释说……<br><br><br>我大学电路老师最后一节课专门讲了她的科学观：何为科学？能够自圆其说，自成体系即是科学。中医算科学吗？算！因其有一套自己解释畅通的理论体系。<br>同样，对于CSS的理解，我个人一直认为什么对错的争执等都是没有意义的。如果你的解释可以自圆其说，自成体系，且应用无误，哪怕你的解释与什么规范啊权威啊八竿子都打不着，别人压根理解不了，你都是对的，OK的！<br><br>拘泥只会限制自身的创造力以及认知能力。火影的世界算是世界吗？是，自圆其说，自成体系！海贼王的世界算是世界吗？是自圆其说，自成体系。<br><br>因此，如果你是设计出身，或文学出身的。什么复杂逻辑，深奥解释理解不了，你大可摒弃之，用你自己的世界去解释其表现，你的感性思维以及艺术情怀只会让这个世界变得更精彩！那些自以为是，抱残守缺的杂碎们就不用鸟他们，让他们随着时间消逝去吧~~</p>\n</blockquote>\n<hr>\n","categories":["CSS学习"],"tags":["CSS"]},{"title":"前端校验图片尺寸","url":"https://codevvvv9.github.io/2017/12/28/前端校验图片尺寸/","content":"<blockquote>\n<p>这篇文章主要记录最近实习工作中遇到的前端检查图片尺寸的问题，在这个过程明白的一些道理。</p>\n</blockquote>\n<p>我由于目前的水平有限，只能借助网络来完成这个功能。在这个查找的过程中，发现很多博客都写的有问题，虽然表面完成了，但是一测试，很多不对的地方，感觉都是抄的别人的，没抄完整。<br>那么我希望我写的文章，读者都是可以完美复写的。</p>\n<h3 id=\"先上完美运行的代码\"><a href=\"#先上完美运行的代码\" class=\"headerlink\" title=\"先上完美运行的代码\"></a>先上完美运行的代码</h3><p>以下是我亲测可以运行的代码。连我这种前端0.1年的人都能学会。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;  </span><br><span class=\"line\">&lt;head&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;  </span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;  </span><br><span class=\"line\">    &lt;script&gt;  </span><br><span class=\"line\">        function setImg() &#123;  </span><br><span class=\"line\">            var docObj = document.getElementById(&quot;imgPath&quot;);   //获得上传的文件的数组形式</span><br><span class=\"line\">            var files = document.getElementById(&quot;imgPath&quot;).value;  </span><br><span class=\"line\">            console.log(docObj.files)</span><br><span class=\"line\">            console.log(files)</span><br><span class=\"line\">               </span><br><span class=\"line\">            if (docObj.files &amp;&amp; docObj.files[0]) &#123;  </span><br><span class=\"line\">                    var img = new Image();  </span><br><span class=\"line\">                    img.onload = function()&#123;      </span><br><span class=\"line\">                    var width = img.width;  //图片的宽</span><br><span class=\"line\">                    var height=img.height;   //图片的高</span><br><span class=\"line\">                    var filesize = img </span><br><span class=\"line\">                    console.log(width)</span><br><span class=\"line\">                    console.log(height)</span><br><span class=\"line\">                    console.log(filesize) </span><br><span class=\"line\">                   if (width != 257 || height != 100)&#123;</span><br><span class=\"line\">\t\t\t\talert(&apos;图片尺寸不符合规范，请更新宽高比为257*100的图片&apos;);</span><br><span class=\"line\">\t\t\t&#125; else&#123;</span><br><span class=\"line\">\t\t\t\t//后续代码</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t   if(docObj.files[0].size &gt; maxSize)&#123;</span><br><span class=\"line\">\t\t      alert(&apos;您上传的图片大小超过了50k，请更新符合规范的图片&apos;);</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">                 &#125;;  </span><br><span class=\"line\">                img.onerror=function()&#123;  </span><br><span class=\"line\">                    alert(&quot;error!&quot;);  </span><br><span class=\"line\">                &#125;;  </span><br><span class=\"line\">                img.src=window.URL.createObjectURL(docObj.files[0]);  </span><br><span class=\"line\">                console.log(img.src);</span><br><span class=\"line\">            &#125;     </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &lt;/script&gt;  </span><br><span class=\"line\">  &lt;/head&gt;  </span><br><span class=\"line\">&lt;body&gt;  </span><br><span class=\"line\">    &lt;input id=&quot;imgPath&quot; type=&quot;file&quot;  onchange=&quot;setImg()&quot;/&gt;  </span><br><span class=\"line\">&lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>上述代码的image和file的操作在历经寻找多个不合适的博客之后终于成功了。</p>\n<h3 id=\"File-API以及Image对象\"><a href=\"#File-API以及Image对象\" class=\"headerlink\" title=\"File API以及Image对象\"></a>File API以及Image对象</h3><p>如果input的type=file，就可以选择文件从本地上传到网页。<br>读取文件内容按照<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications\" target=\"_blank\" rel=\"noopener\">MDN操作files的方法</a>如下所示</p>\n<ul>\n<li>1.使用普通的类选择器选择要操作的input元素里面的文件<br>var files = document.getElementById(‘imgpath’).files;<br>要注意获得的是一个file的数组！！！<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-6d0f63240bb59fe6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"files数组的内容.png\"></li>\n</ul>\n<p>如果只要一个文件，就可以用var file = files[0];获得file的所有信息。<br>input元素后面写上multiple，就可以上传多个文件。同理多个文件的第一个文件也使用这个方法。</p>\n<ul>\n<li>2.通过change事件来访问被选择的文件，即为onchange绑定一个函数<br>只要用户选择了一个文件，那么就会传入这个file对象。</li>\n<li>3.再创建一个image对象，一定要先onload。</li>\n<li>4.给img赋上地址img.src=window.URL.createObjectURL(docObj.files[0]);</li>\n</ul>\n","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"深挖JS语法第三集","url":"https://codevvvv9.github.io/2017/12/27/深挖JS语法第三集/","content":"<blockquote>\n<p>这次的内容是研究JS里面的对象</p>\n</blockquote>\n<p>在研究对象之前，我们先研究一下全局对象。</p>\n<p>那么什么是全局对象呢？ECMAScript规定全局对象是global，但是浏览器有规定window是全局对象。</p>\n<p>window就是一个hash表。</p>\n<p>window的属性就是全局变量。</p>\n<h3 id=\"两种全局变量\"><a href=\"#两种全局变量\" class=\"headerlink\" title=\"两种全局变量\"></a>两种全局变量</h3><ul>\n<li>第一种是ECMAScript规定的，常见的有如下几种<ul>\n<li>global.parseInt</li>\n<li>global.parseFloat</li>\n<li>global.Number</li>\n<li>global.String</li>\n<li>global.Boolean</li>\n<li>global.Obejct</li>\n</ul>\n</li>\n<li>第二种是浏览器规定的<ul>\n<li>window.alert</li>\n<li>window.prompt</li>\n<li>window.comfirm</li>\n<li>window.console.log</li>\n<li>window.console.dir</li>\n<li>window.document 要格外注意这是window的，是由W3C规定的。</li>\n<li>window.document.createElement</li>\n<li>window.document.getElementById</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"先认识一下第一种的全局函数\"><a href=\"#先认识一下第一种的全局函数\" class=\"headerlink\" title=\"先认识一下第一种的全局函数\"></a>先认识一下第一种的全局函数</h3><ul>\n<li><p>Number</p>\n<p>搞清楚var a = 1 和 var a = new Number(1)的区别是啥</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a</span><br><span class=\"line\"><span class=\"string\">\"number\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a</span><br><span class=\"line\"><span class=\"string\">\"object\"</span></span><br></pre></td></tr></table></figure>\n<p>使用了Number全局函数了，就要画上节课的内存图，来分析</p>\n</li>\n<li><p>String</p>\n<p>‘hello’ 与 new String(‘hello’) 的区别是什么</p>\n</li>\n<li><p>Boolean</p>\n<p>true 与 new Boolean(true) 的区别是什么</p>\n</li>\n<li><p>Object</p>\n<p>var o1 = {}和var o2 = new Object()的区别是什么</p>\n</li>\n</ul>\n<p>上面的区别都是简单类型和对象的区别，那到底有区别呢？</p>\n<p><img src=\"F:\\饥人谷\\12面向对象JS\\原型链的调用.png\" alt=\"原型链的调用\"></p>\n<p>   上图就是以Number全局函数为例的具体调用过程，<code>String()</code> <code>Boolean</code> <code>Object()</code> 都是类似的过程</p>\n<h3 id=\"公有属性藏到哪里了呢\"><a href=\"#公有属性藏到哪里了呢\" class=\"headerlink\" title=\"公有属性藏到哪里了呢\"></a>公有属性藏到哪里了呢</h3><p>通过上图我们发现，JS把一些大家都公有的东西抽离出来，放到一个单独的地方，谁想调用，就通过自己的一个<strong>proto</strong>的属性去调用，可以省的每个对象自己都存 <code>toString()</code> <code>valueOf()</code> 这种公共的方法。</p>\n<p>在调用的过程中，自己的特有属性又放到自己的对应的公有属性里面。</p>\n<p>由此形成了原型链。</p>\n<h3 id=\"一个伟大的等式\"><a href=\"#一个伟大的等式\" class=\"headerlink\" title=\"一个伟大的等式\"></a>一个伟大的等式</h3><ul>\n<li>var 对象 = new 函数()</li>\n<li>那么必然有 <strong>对象.<strong>proto</strong>  ===  函数.prototype</strong></li>\n<li>而函数.prototype又可以看做一个对象，那么 <strong>函数.prototype.<strong>proto</strong>  ===  Function.prototype</strong></li>\n<li>而Function 也是对象啊，那么 又有 <strong>Function.<strong>proto</strong>  ===  Function.prototype</strong></li>\n<li><p>而 Function.prototype又可以被看做对象，那么 <strong>Function.prototype.<strong>proto</strong>  ===  Object.prototype</strong></p>\n<p>以上几个式子中要格外注意Function的那个式子，自己的<strong>proto</strong>又指向了自己的prototype</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.__proto__ === <span class=\"built_in\">Function</span>.prototype</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">f.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\">f.__proto__.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>最有一点要强调的是Object.<strong>proto</strong> 是真的指向了null</em></strong></p>\n","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"CSS的五个奇怪特性","url":"https://codevvvv9.github.io/2017/12/24/CSS的五个奇怪特性/","content":"<h3 id=\"margin会受到border和display的影响\"><a href=\"#margin会受到border和display的影响\" class=\"headerlink\" title=\"margin会受到border和display的影响\"></a>margin会受到border和display的影响</h3><p>以div元素为例<br>三个并列的div，必然是上下排列，外边距是10px,也就是我们通常说的上下间隔10px<br><a href=\"http://js.jirengu.com/vokixegofo/1/edit?html,output\" target=\"_blank\" rel=\"noopener\">demo</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;JS Bin&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    .demo&#123;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      margin: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- &lt;div class=&quot;demo2&quot; style=&quot;border: 0.1px solid green&quot;&gt;&lt;/div&gt; --&gt;</span><br><span class=\"line\">  &lt;div style=&quot;display: flex&quot; class=&quot;demo2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-e7e96a944dd4bfae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"margin和border的影响.png\"><br>以上是正常的效果图<br>但是<br><strong>凡事总有例外</strong><br>一个boder就可以给你分开，像一条隐形的线分隔开了<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-a9ee0cd26a20ee43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"border分割.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-e25240af8aff6bc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"中间的div其实不影响，但就是分开了.png\"><br>而且，你改变中间那个div的display即使没有border也可以分割</p>\n<ul>\n<li>display: flex 可以分割<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-38d053d65ab3f48c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"flex影响.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-10dcce794d508996.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"flex隔开.png\"><br>对比的效果图如上</li>\n<li>displa: table 可以分割<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-d1d69c0cdc2b74b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"table.png\"></li>\n<li>最令我震惊的是display: inline-block,间距是40px<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-2fad4ea1d7c9d31c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"inline-block.png\"></li>\n</ul>\n<p><strong>以上特例要记住</strong></p>\n<h3 id=\"li的样式受到display的影响\"><a href=\"#li的样式受到display的影响\" class=\"headerlink\" title=\"li的样式受到display的影响\"></a>li的样式受到display的影响</h3><p>ul标签的字标签li标签默认会有小圆点，但是一旦你想给li的display属性点更改，圆点就消失<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-5229665e1942b0b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"li的样式.png\"></p>\n<ul>\n<li>上图是默认样式<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-34166c43659c03df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"li的小圆点消失.png\"></li>\n<li>你更改了display就完蛋了<h3 id=\"绝对定位会改变display的属性\"><a href=\"#绝对定位会改变display的属性\" class=\"headerlink\" title=\"绝对定位会改变display的属性\"></a>绝对定位会改变display的属性</h3>一旦你使用了position: relative position: absolute之后，即使你写了display: inline，但是浏览器计算出来的的仍然是block<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-dc036545ce7f9c92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"position的影响.png\"></li>\n<li>以上是没绝对定位的时候<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-40a30e7694b2f6e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"绝对定位的坑.png\"><br>你会发现绝对定位之后的display不是你规定的inline.<br>inline-block 和 inline都会被改成block<h3 id=\"transform会对fixed的元素影响\"><a href=\"#transform会对fixed的元素影响\" class=\"headerlink\" title=\"transform会对fixed的元素影响\"></a>transform会对fixed的元素影响</h3>正常来说fixed的元素是相对于视口定位的，但是与transform结合后就不是这个现象了。CSS3规范说的是会整体缩放，所以要根据父元素定位。<br>实例如下<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-57f665b107831a49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fixed之后.png\"><br>上图是正常的，无论你如何拖动滚动条都无所谓。<br>但是<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-4993d75f4de0ad85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"transform之后.png\"><h3 id=\"float影响inline元素\"><a href=\"#float影响inline元素\" class=\"headerlink\" title=\"float影响inline元素\"></a>float影响inline元素</h3>其实float属性不是真正的浮起来来了，而是希望做到文图环绕的效果。文字会环绕在浮动元素的周围。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-df810a975a6c376e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未浮动.png\"><br>没有浮动的时候，通过这个图，你也会发现一个奇怪的现象，两个子元素的高度可以超过父元素的高度，而父元素不影响。<br>下图是浮动后神奇的效果<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-254c58d023905480.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"浮动之后.png\"><br>一般人的理解是你浮起来的，<code>我是正常元素啊</code>这几个字会出现到 <code>一个浮动元素</code>的下面，也就是它本体灰色框的左边，而实际上不是的，会感知到有个浮动元素，文字环绕在哪个浮动元素的旁边。</li>\n</ul>\n<hr>\n<p>以上是目前碰到的比较奇怪的五个坑，CSS的坑继续探索中，加油！！！</p>\n","categories":["CSS学习"],"tags":["CSS"]},{"title":"深挖JS语法第一集","url":"https://codevvvv9.github.io/2017/12/23/深挖JS语法第一集/","content":"<blockquote>\n<p>从今天开始用重新认识JS，毕竟前端是靠JS吃饭的，开始深挖一下细节，在这个过程中也反思了一下，为啥java没学好。果然是基础不牢，地动山摇啊，古人诚不欺我也！</p>\n</blockquote>\n<h4 id=\"1-JS的数据类型有哪几种？\"><a href=\"#1-JS的数据类型有哪几种？\" class=\"headerlink\" title=\"1. JS的数据类型有哪几种？\"></a>1. JS的数据类型有哪几种？</h4><p>以前一直说会JS,却连这个问题没好好搞过，给自己两耳光……</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 基本数据类型(也叫简单数据类型)</td>\n<td>number string boolean symbol undefined null</td>\n</tr>\n<tr>\n<td>2. 复杂数据类型</td>\n<td>object</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>注意，array和function属于object类型;symbol是ES6的内容。<a id=\"more\"></a>\n<h4 id=\"2-几个大坑\"><a href=\"#2-几个大坑\" class=\"headerlink\" title=\"2. 几个大坑\"></a>2. 几个大坑</h4></li>\n<li>长字符串里面的大坑<br>长字符串可以用<code>+</code>连接符，优雅易懂。但是还可以这么写</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var longStr = &apos;agggggg\\</span><br><span class=\"line\">bgggggg\\</span><br><span class=\"line\">cgggggg\\</span><br><span class=\"line\">d&apos;</span><br><span class=\"line\">//结果依然是aggggggbggggggcggggggd</span><br></pre></td></tr></table></figure>\n<p>上述代码不报错的前提是<code>\\</code>后面不能有除了换行符以外的任何字符，即使一个空格就报错<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-b7a4686b8d1ce2dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"长字符串的坑.png\"></p>\n<ul>\n<li>字符串的length属性和字符集<ul>\n<li>字符串的length<strong><em>属性</em></strong>是不可更改的,你爱写啥写啥，length属性不变。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-1bc2ad05fbfc9599.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"length属性.png\"></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>java的8个基本数据类型：byte short int long float double char boolean<br>java里面的判断长度的方法只有三个</p>\n<ul>\n<li>字符串的length属性</li>\n<li>数组的length()方法</li>\n<li>集合类的size()方法</li>\n</ul>\n<hr>\n<ul>\n<li>字符串的字符集</li>\n</ul>\n<blockquote>\n<p>由于JavaScript引擎（严格说是ES5规格）不能自动识别辅助平面（编号大于0xFFFF）的Unicode字符，导致所有字符串处理函数遇到这类字符，都会产生错误的结果（详见《标准库》一章的String对象章节）。如果要完成字符串相关操作，就必须判断字符是否落在0xD800到0xDFFF这个区间。<br>替换（String.prototype.replace）、截取子字符串（String.prototype.substring, String.prototype.slice）等其他字符串操作，都必须做类似的处理。</p>\n</blockquote>\n<p>代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getSymbols(string) &#123;</span><br><span class=\"line\">  var length = string.length;</span><br><span class=\"line\">  var index = -1;</span><br><span class=\"line\">  var output = [];</span><br><span class=\"line\">  var character;</span><br><span class=\"line\">  var charCode;</span><br><span class=\"line\">  while (++index &lt; length) &#123;</span><br><span class=\"line\">    character = string.charAt(index);</span><br><span class=\"line\">    charCode = character.charCodeAt(0);</span><br><span class=\"line\">    if (charCode &gt;= 0xD800 &amp;&amp; charCode &lt;= 0xDBFF) &#123;</span><br><span class=\"line\">      output.push(character + string.charAt(++index));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      output.push(character);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var symbols = getSymbols(&apos;𝌆&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">symbols.forEach(function(symbol) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>JavaScript原生提供两个Base64相关方法。<blockquote>\n<p><strong>Base64</strong>是一种基于64个可打印字符来表示<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6\" title=\"二进制\" target=\"_blank\" rel=\"noopener\">二进制数据</a>的表示方法。由于2的6次方等于64，所以每6个<a href=\"https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83\" title=\"比特\" target=\"_blank\" rel=\"noopener\">比特</a>为一个单元，对应某个可打印字符。三个<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82\" target=\"_blank\" rel=\"noopener\">字节</a>有24个比特，对应于4个Base64单元，即3个字节可表示4个可打印字符。它可用来作为<a href=\"https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6\" title=\"电子邮件\" target=\"_blank\" rel=\"noopener\">电子邮件</a>的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。</p>\n</blockquote>\n</li>\n</ul>\n<p>两个方法<br>btoa()：字符串或二进制值转为Base64编码<br>atob()：Base64编码转为原来的编码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var string = &apos;Hello World!&apos;;</span><br><span class=\"line\">btoa(string) // &quot;SGVsbG8gV29ybGQh&quot;</span><br><span class=\"line\">atob(&apos;SGVsbG8gV29ybGQh&apos;) // &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这两个方法不适合非ASCII码的字符，会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btoa(&apos;你好&apos;)</span><br><span class=\"line\">VM1195:1 Uncaught DOMException: Failed to execute &apos;btoa&apos; on &apos;Window&apos;: The string to be encoded contains characters outside of the Latin1 range.</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:1</span><br></pre></td></tr></table></figure>\n<p><strong><em>要将非ASCII码字符转为Base64编码，必须中间插入一个转码环节，再使用这两个方法</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function b64Encode(str) &#123;</span><br><span class=\"line\">  return btoa(encodeURIComponent(str));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function b64Decode(str) &#123;</span><br><span class=\"line\">  return decodeURIComponent(atob(str));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b64Encode(&apos;你好&apos;) // &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;</span><br><span class=\"line\">b64Decode(&apos;JUU0JUJEJUEwJUU1JUE1JUJE&apos;) // &quot;你好&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>undefined和null的区别？<br>这是一个历史遗留问题。<a href=\"https://twitter.com/BrendanEich/status/333008305461006336\" target=\"_blank\" rel=\"noopener\">JS之父在Twitter上的话，需要FQ才能看</a><br>我们应该如何区分呢</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>两个角度来看待</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 语法规范</td>\n<td>变量没有值，就是undefined。事实上，你在console上随便写一个语句，都是undefined</td>\n</tr>\n<tr>\n<td>2. 习惯上理解</td>\n<td>如果有一个对象，你声明了，但是此时不给他赋值，让他等于null;如果你有一个非对象的变量，你此时不想赋值，就让他等于undefined。</td>\n</tr>\n</tbody>\n</table>\n<p>var obj = null,别人一眼就能看出你是想声明一个对象,不过此时不想赋值；var a = undefinded，别人一眼就能看出你是想声明一个非对象，此时不想赋值</p>\n<ul>\n<li>对象的key的问题<br>对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。<br>你用for…in的时候那个顺序的<strong><em>随机的</em></strong><br>大坑来啦……如下代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">   &apos;name&apos;: &apos;wushao&apos;, </span><br><span class=\"line\">   &apos;age&apos;: 8&#125;</span><br><span class=\"line\">for (var key in obj)&#123;</span><br><span class=\"line\">    console.log(obj.key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>你是想打印出’wushao’和8来，结果屁都没有。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-836d5d72870a893d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"key的陷阱.png\"></p>\n<ul>\n<li>注意  [ ]运算符里面<strong><em>必须是字符串，而且是对象的键</em></strong>。这个例子中，key才是字符串，而且是obj的key;你obj.key相当于obj[‘key’]，obj没有这个叫key的键。<br>对象的基本结构式{key: value}<br>key必须是字符串，valu是那7种 的任意一个。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  &apos; &apos;: &apos;frank&apos;</span><br><span class=\"line\">  没问题</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>关于key加不加引号的问题。<br>你保证你的key符合标识符规范，可以不加，但是有个默认的引号在上面。如果不符合标识符规范的，必须加引号<br>同理，obj[ ]括号里面不符合标识符规范的，必须加引号。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  &apos;09a&apos;: &apos;我不符合标识符规范,key必须加引号保护，否则就报错&apos;,</span><br><span class=\"line\">  name: &apos;我符合标识符规范,引号加不加都可以，反正key一定是个字符串&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-1c1ba092b1a5689a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"key的写法.png\"></p>\n<p>-还有啊，对象的每个key-value的结束，一定记得加逗号啊！！！！，能多写不能少写，最新的ES6可以都写逗号，不报错</p>\n<p>总之，记住一个公式</p>\n<blockquote>\n<p>obj.name 等同于 obj.[‘name’]</p>\n</blockquote>\n","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"深挖JavaScript第二集","url":"https://codevvvv9.github.io/2017/12/23/深挖JavaScript语法第二集/","content":"<blockquote>\n<p>JS一定要抠细节，逻辑性。我们这次探讨 内存 的问题、一个IE的BUG以及深拷贝和浅拷贝，和typeof运算符的小技巧</p>\n</blockquote>\n<p>在第一集里面知道了7个基本的数据类型<br>number string boolean symbol null underdefined object<br>那么这七个数据类型如何转换呢</p>\n<h3 id=\"其他数据类型转string\"><a href=\"#其他数据类型转string\" class=\"headerlink\" title=\"其他数据类型转string\"></a>其他数据类型转string</h3><ul>\n<li>String()函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String(0)</span><br><span class=\"line\">&quot;0&quot;</span><br><span class=\"line\">String(true)</span><br><span class=\"line\">&quot;true&quot;</span><br><span class=\"line\">String(false)</span><br><span class=\"line\">&quot;false&quot;</span><br><span class=\"line\">String(null)</span><br><span class=\"line\">&quot;null&quot;</span><br><span class=\"line\">String(undefined)</span><br><span class=\"line\">&quot;undefined&quot;</span><br><span class=\"line\">String(&#123;&#125;)</span><br><span class=\"line\">&quot;[object Object]&quot;</span><br><span class=\"line\">String(&#123;name: 9&#125;)</span><br><span class=\"line\">&quot;[object Object]&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>toString()属性<br>注意null和undefined只是两个值，没有toString()属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">null.toString()</span><br><span class=\"line\">VM371:1 Uncaught TypeError: Cannot read property &apos;toString&apos; of null</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:6</span><br><span class=\"line\">(anonymous) @ VM371:1</span><br><span class=\"line\">undefined.toString()</span><br><span class=\"line\">VM400:1 Uncaught TypeError: Cannot read property &apos;toString&apos; of undefined</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:11</span><br><span class=\"line\">(anonymous) @ VM400:1</span><br></pre></td></tr></table></figure>\n<p>还有一个要注意的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125;.toString()</span><br><span class=\"line\">VM91:1 Uncaught SyntaxError: Unexpected token .</span><br><span class=\"line\">(&#123;&#125;).toString()</span><br><span class=\"line\">&quot;[object Object]&quot;</span><br></pre></td></tr></table></figure>\n<p>其他的都可以<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 8;</span><br><span class=\"line\">a.toString()</span><br><span class=\"line\">&quot;8&quot;</span><br><span class=\"line\">var a = true</span><br><span class=\"line\">a.toString()</span><br><span class=\"line\">&quot;true&quot;</span><br><span class=\"line\">var a = &#123;&#125;</span><br><span class=\"line\">a.toString()</span><br><span class=\"line\">&quot;[object Object]&quot;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>最常见的方法 ‘ ‘+<br>无敌的方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos; +1</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">&apos;&apos;+ true</span><br><span class=\"line\">&quot;true&quot;</span><br><span class=\"line\">&apos;&apos;+ null</span><br><span class=\"line\">&quot;null&quot;</span><br><span class=\"line\">&apos;&apos;+ undefined</span><br><span class=\"line\">&quot;undefined&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它数据类型转number\"><a href=\"#其它数据类型转number\" class=\"headerlink\" title=\"其它数据类型转number\"></a>其它数据类型转number</h3><ul>\n<li>Number()函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&apos;fff&apos;)</span><br><span class=\"line\">NaN</span><br><span class=\"line\">Number(&apos;30&apos;)</span><br><span class=\"line\">30</span><br><span class=\"line\">Number(null) //注意是0</span><br><span class=\"line\">0</span><br><span class=\"line\">Number(undefined) //注意是NaN</span><br><span class=\"line\">NaN</span><br><span class=\"line\">Number(true)</span><br><span class=\"line\">1</span><br><span class=\"line\">Number(false)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>parseInt()和parseFloat()属性<br>parseInt()有个大坑，是从左边第一个字符开始看，不是数字，就停下了，而不是我理解 的有几个数字就打印几个数字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;122&apos;) //默认是十进制</span><br><span class=\"line\">122</span><br><span class=\"line\">parseInt(&apos;011&apos;)</span><br><span class=\"line\">11</span><br><span class=\"line\">parseInt(&apos;011&apos;, 2) //规定是二进制</span><br><span class=\"line\">3</span><br><span class=\"line\">parseInt(&apos;123&apos;, 10)</span><br><span class=\"line\">123</span><br><span class=\"line\">parseInt(&apos;011&apos;, 8) //规定是八进制</span><br><span class=\"line\">9</span><br><span class=\"line\">parseInt(&apos;A09&apos;) //发现第一个字符就不是数字，不往后面判断了</span><br><span class=\"line\">NaN</span><br><span class=\"line\">parseInt(&apos;09A12&apos;)</span><br><span class=\"line\">9</span><br><span class=\"line\">parseFloat(&apos;11.4&apos;)</span><br><span class=\"line\">11.4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>没见过的操作 <code>其他数据类型-0</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">null-0</span><br><span class=\"line\">0</span><br><span class=\"line\">undefined-0</span><br><span class=\"line\">NaN</span><br><span class=\"line\">&apos;91&apos; - 0</span><br><span class=\"line\">91</span><br><span class=\"line\">&apos;91.09&apos; - 0</span><br><span class=\"line\">91.09</span><br><span class=\"line\">&apos;str&apos; - 0</span><br><span class=\"line\">NaN</span><br><span class=\"line\">var a = &#123;&#125;</span><br><span class=\"line\">a-0</span><br><span class=\"line\">NaN</span><br><span class=\"line\">var a = &apos;123&apos;</span><br><span class=\"line\">a-0</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<ul>\n<li>又是一个没见过的操作 <code>+ &#39;&#39;</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&apos;124&apos;</span><br><span class=\"line\">124</span><br><span class=\"line\">+&apos;12.4&apos;</span><br><span class=\"line\">12.4</span><br><span class=\"line\">+false</span><br><span class=\"line\">0</span><br><span class=\"line\">+true</span><br><span class=\"line\">1</span><br><span class=\"line\">+null</span><br><span class=\"line\">0</span><br><span class=\"line\">+undefined</span><br><span class=\"line\">NaN</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它数据类型转成boolean\"><a href=\"#其它数据类型转成boolean\" class=\"headerlink\" title=\"其它数据类型转成boolean\"></a>其它数据类型转成boolean</h3><p>注意5个特殊的falsey值，当然了false必然也是falsey值</p>\n<hr>\n<p><strong>0</strong><br><strong>NaN</strong><br><strong>‘ ‘</strong>    这是空字符串，啥也没有，空格也没有<br><strong>null</strong><br><strong>undefined</strong></p>\n<hr>\n<p>除了以上6个falsey值，其他的都是true</p>\n<ul>\n<li>Boolean()函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean(&apos;&apos;)</span><br><span class=\"line\">false</span><br><span class=\"line\">Boolean(&apos; &apos;)</span><br><span class=\"line\">true</span><br><span class=\"line\">Boolean(0)</span><br><span class=\"line\">false</span><br><span class=\"line\">Boolean(NaN)</span><br><span class=\"line\">false</span><br><span class=\"line\">Boolean(null)</span><br><span class=\"line\">false</span><br><span class=\"line\">Boolean(undefined)</span><br><span class=\"line\">false</span><br><span class=\"line\">Boolean([])</span><br><span class=\"line\">true</span><br><span class=\"line\">Boolean(&#123;&#125;)</span><br><span class=\"line\">true</span><br><span class=\"line\">Boolean(9)</span><br><span class=\"line\">true</span><br><span class=\"line\">Boolean(&apos;pp&apos;)</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>!!</code>的操作<br>怎么理解呢，一个<code>!</code>是取反的操作，再加一个就是双重取反，就是我们想要的结果了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!0</span><br><span class=\"line\">true</span><br><span class=\"line\">!1</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!0</span><br><span class=\"line\">false</span><br><span class=\"line\">!!NaN</span><br><span class=\"line\">false</span><br><span class=\"line\">!!&apos;&apos;</span><br><span class=\"line\">false</span><br><span class=\"line\">!!null</span><br><span class=\"line\">false</span><br><span class=\"line\">!!undefined</span><br><span class=\"line\">false</span><br><span class=\"line\">!!1</span><br><span class=\"line\">true</span><br><span class=\"line\">!!&apos;pp&apos;</span><br><span class=\"line\">true</span><br><span class=\"line\">!![]</span><br><span class=\"line\">true</span><br><span class=\"line\">!!&#123;&#125;</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<h3 id=\"四个经典的内存题\"><a href=\"#四个经典的内存题\" class=\"headerlink\" title=\"四个经典的内存题\"></a>四个经典的内存题</h3><ul>\n<li><p>粗糙的内存图的引入<br>var a = 1 和var a = new Number(1)分别发生了什么<br>简单数据类型存在stack中，存储位置是连续的，像弹匣一样，与数据结构中的栈一样，先进后出(FILO)，而复杂数据类型存储在heap中，存储位置不连续，与数据结构中的堆一样，是树状的发散结构，这一点<strong><em>超级重要啊</em></strong>。时时刻刻要记着数据结构啊。</p>\n</li>\n<li><p>第一个题 简单数据类型的判断 a=? </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">b = a</span><br><span class=\"line\">b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">a</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>答案是a=1<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-0560e23bd6357f1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第一题.png\"></p>\n<ul>\n<li>第二个题 复杂数据类型 的判断 a =?<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;name: &apos;wushao&apos;&#125;</span><br><span class=\"line\">b =a</span><br><span class=\"line\">b=&#123;name: &apos;shao&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a</span><br><span class=\"line\">&#123;name: &quot;wushao&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>答案是a={name: ‘wushao’}，结果不变<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-156139ea55efe504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第二题.png\"></p>\n<ul>\n<li>第三个题 复杂数据类型 的判断 a.name=?</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;name: &apos;wushao&apos;&#125;</span><br><span class=\"line\">b =a</span><br><span class=\"line\">b.name = &apos;qwert&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">a.name</span><br><span class=\"line\">&quot;qwert&quot;</span><br></pre></td></tr></table></figure>\n<p>答案是a.name = ‘qwert’,已经被b.name改变了<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-95dccf49795dfd5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第三题.png\"></p>\n<ul>\n<li>第四个题 复杂数据类型 的判断 a=?</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;name: &apos;a&apos;&#125;</span><br><span class=\"line\">var b = a</span><br><span class=\"line\">b = null</span><br><span class=\"line\"></span><br><span class=\"line\">a</span><br><span class=\"line\">&#123;name: &quot;a&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>答案是 a  = {name: “a”} 不受b的影响<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-2f71c0ad29ba7a84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第四题.png\"></p>\n<p>如图所示</p>\n<h3 id=\"一个很贱的面试题\"><a href=\"#一个很贱的面试题\" class=\"headerlink\" title=\"一个很贱的面试题\"></a>一个很贱的面试题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;n: 1&#125;</span><br><span class=\"line\">var b = a</span><br><span class=\"line\">a.x = a = &#123;n: 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(a.x) //是啥呢 undefined</span><br><span class=\"line\">alert(b.x) //是啥呢 [object Object]</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-535a5ce55e971e93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"面试题.png\"></p>\n<p>大坑之处在于那个a.x一开始浏览器先从左边看的</p>\n<h3 id=\"IE6-的关于垃圾回收机制的一个BUG\"><a href=\"#IE6-的关于垃圾回收机制的一个BUG\" class=\"headerlink\" title=\"IE6 的关于垃圾回收机制的一个BUG\"></a>IE6 的关于垃圾回收机制的一个BUG</h3><p>有以下情形</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fn = function( )&#123; &#125;</span><br><span class=\"line\">document.body.onclick = fn</span><br><span class=\"line\">fn = null</span><br><span class=\"line\">问你 function()&#123;&#125;是不是垃圾</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一种情况，你没有关闭这个tab页<br>那么function不是垃圾<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-c2d28691f8e0081c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"是否是一个垃圾.png\"></li>\n<li>第二种情况，我关闭了这个tab页,那么function就是垃圾了<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-e569b8f33c9d0b08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"关闭网页后就是一个垃圾了.png\"></li>\n</ul>\n<p>IE6的BUG在于，你关闭了网页，但是蓝色圆里面的他不认为是垃圾，除非你关闭浏览器。所以你要在网页关闭的时候手动加上一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//onunload不加载，就是关闭了嘛</span><br><span class=\"line\">window.onunload = function()&#123;</span><br><span class=\"line\">  document.body.onclick = null; //所有的都要有</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"由以上几个题引出深拷贝和浅拷贝-的问题\"><a href=\"#由以上几个题引出深拷贝和浅拷贝-的问题\" class=\"headerlink\" title=\"由以上几个题引出深拷贝和浅拷贝 的问题\"></a>由以上几个题引出深拷贝和浅拷贝 的问题</h3><p>深拷贝是你改变了，原来的不受改变的影响，而浅拷贝会改变原来的属性。<br>对于简单类型的数据来说，赋值就是深拷贝。<br>对于复杂类型的数据（对象）来说，才要区分浅拷贝和深拷贝。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ced7663ffb4f6530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"深拷贝.png\"></p>\n<p>右边蓝色框才是一个完整的复制</p>\n<h3 id=\"typeof运算符的坑\"><a href=\"#typeof运算符的坑\" class=\"headerlink\" title=\"typeof运算符的坑\"></a>typeof运算符的坑</h3><blockquote>\n<p>JavaScript有三种方法，可以确定一个值到底是什么类型。<br>typeof 运算符<br>instanceof 运算符<br>Object.prototype.toString方法</p>\n</blockquote>\n<p>typeof运算符可以判断你要的值得数据类型，有如下结果<br>先看大坑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof null</span><br><span class=\"line\">&quot;object&quot;</span><br><span class=\"line\">typeof Function</span><br><span class=\"line\">&quot;function&quot;</span><br><span class=\"line\">function f()&#123;&#125;</span><br><span class=\"line\">typeof f</span><br><span class=\"line\">&quot;function&quot;</span><br></pre></td></tr></table></figure>\n<p>函数竟然是function类型的数据，坑爹啊。<br>null竟然是object，尼玛，吓坏了，一查原来是历史遗留问题。</p>\n<blockquote>\n<p>1995年JavaScript语言的第一版，所有值都设计成32位，其中最低的3位用来表述数据类型，object对应的值是000。当时，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），完全没考虑null，只把它当作object的一种特殊值，32位全部为0。这是typeof null返回object的根本原因。<br>为了兼容以前的代码，后来就没法修改了。这并不是说null就属于对象，本质上null是一个类似于undefined的特殊值。</p>\n</blockquote>\n<p>你只需要记住，null不是对象 ！null不是对象！ null不是对象！就是一个值null。<br>其他的类型是符合预期的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof 123</span><br><span class=\"line\">&quot;number&quot;</span><br><span class=\"line\">typeof &apos;123&apos;</span><br><span class=\"line\">&quot;string&quot;</span><br><span class=\"line\">typeof true</span><br><span class=\"line\">&quot;boolean&quot;</span><br><span class=\"line\">typeof []</span><br><span class=\"line\">&quot;object&quot;</span><br><span class=\"line\">typeof &#123;&#125;</span><br><span class=\"line\">&quot;object&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个小技巧\"><a href=\"#一个小技巧\" class=\"headerlink\" title=\"一个小技巧\"></a>一个小技巧</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof undefined</span><br><span class=\"line\">&quot;undefined&quot;</span><br><span class=\"line\">typeof a</span><br><span class=\"line\">&quot;undefined&quot;</span><br></pre></td></tr></table></figure>\n<p>上面的a未声明,直接使用会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">VM412:1 Uncaught ReferenceError: a is not defined</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:1</span><br></pre></td></tr></table></figure>\n<p>但是用了typeof就可以啦<br>可以用来判断某个变量是否声明了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (typeof v === &quot;undefined&quot;) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二个小技巧<br>既然typeof对数组（array）和对象（object）的显示结果都是object，那么怎么区分它们呢？instanceof运算符可以做到。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;&#125;;</span><br><span class=\"line\">var a = [];</span><br><span class=\"line\"></span><br><span class=\"line\">o instanceof Array // false</span><br><span class=\"line\">a instanceof Array // true</span><br></pre></td></tr></table></figure>","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"Form表单的两个新属性","url":"https://codevvvv9.github.io/2017/12/21/Form表单的两个新属性/","content":"<h4 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h4><p>今天在实习工作中看到了两个新属性，其实一直就在，但是一直眼瞎，没去MDN去搜搜，今天搜了一下。明白了这俩属性。<br>在这个表单里面的两个以前没见的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form name=&quot;upFileForm&quot; method=&quot;post&quot; action=&quot;/cgi-bin/action&quot; onsubmit=&quot;return isUploadLogo();&quot; target=&quot;returnMsg&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;uploadfile&quot; /&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;file&quot; id=&quot;uploadLogo&quot; name=&quot;TAGET_FILENAME&quot; value=&quot;logo.gif&quot; /&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;submit&quot; id=&quot;immUpdate&quot; class=&quot;newButtonStyle&quot; name=&quot;uploadLogo&quot; value=&quot;立即更新&quot; /&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>enctype属性 </li>\n</ul>\n<blockquote>\n<p> 当 <code>method</code>属性值为 <code>post 时</code>, enctype 是提交form给服务器的内容的 <a href=\"http://en.wikipedia.org/wiki/Mime_type\" title=\"http://en.wikipedia.org/wiki/Mime_type\" target=\"_blank\" rel=\"noopener\">MIME 类型</a>，可能的取值有:<br> <code>application/x-www-form-urlencoded</code>: 如果属性未指定时的默认值。<br>  <code>multipart/form-data</code>: 这个值用于一个 <code>type</code> 属性设置为 “file” 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\" title=\"HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。\" target=\"_blank\" rel=\"noopener\"><code>&lt;input&gt;</code></a> 元素。<br><code>text/plain (HTML5)</code>这个值可以被 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button\" title=\"HTML &lt;button&gt;元素 表示一个可点击的按钮。\" target=\"_blank\" rel=\"noopener\"><code>&lt;button&gt;</code></a>或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\" title=\"HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。\" target=\"_blank\" rel=\"noopener\"><code>&lt;input&gt;</code></a> 元素中的  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button#attr-formenctype\" target=\"_blank\" rel=\"noopener\"><code>formenctype</code></a>属性重载（覆盖）。</p>\n</blockquote>\n<p>MDN写的真是好啊<br>我这个例子中就是设置的是<code>multipart/form-data</code> ,对应的第二个<code>input</code><img src=\"http://upload-images.jianshu.io/upload_images/5422064-df79fdd15f409fc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"立即更新的界面.png\"></p>\n<ul>\n<li>target 属性</li>\n</ul>\n<blockquote>\n<p>target一个名字或者说关键字，用来指示在提交表单之后，在哪里显示收到的回复。在 HTML 4 里, 这是一个用于 frame 的名字/关键字. 在 HTML5 里, 这是一个用于 <em>browsing context 浏览器上下文</em>  的名字/关键字 (举例来说, 标签页tab, 窗口window, or 或者行内 frame). 如下的关键字含有特别的含义:<br>  <code>_self</code>: 在当前HTML4或HTML5文档页面重新加载返回值。这个是默认值。<strong>译注：也就是说如果这个文档在一个frame中的话，self是在当前frame（document）中重新加载的，而不是整个页面（window）。</strong><br> <code>_blank</code>: 以新的HTML4或HTML5文档窗口加载返回值。<br> <code>_parent</code>: 在父级的frame中以HTML4或HTML5文档形式加载返回值，如果没有父级的frame，行为和_self一致。<br> <code>_top</code>: 如果是HTML 4文档: 清空当前文档，加载返回内容；HTML5: 在当前文档的最高级内加载返回值，如果没有父级，和_self的行为一致。<br> <em>iframename</em>: 返回值在指定frame中加载。<br>HTML5: 这个值可以被 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button\" title=\"HTML &lt;button&gt;元素 表示一个可点击的按钮。\" target=\"_blank\" rel=\"noopener\"><code>&lt;button&gt;</code></a>或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\" title=\"HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。\" target=\"_blank\" rel=\"noopener\"><code>&lt;input&gt;</code></a> 元素中的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button#attr-formtarget\" target=\"_blank\" rel=\"noopener\"><code>formtarget</code></a>属性重载（覆盖）。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-65eff02effb766f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"target和enctype属性.png\"><br>不过有疑问的是这里写的是returnMsg是啥意思呢？</p>\n","categories":["HTML学习"],"tags":["HTML"]},{"title":"Form表单不能嵌套的大坑","url":"https://codevvvv9.github.io/2017/12/20/Form表单不能嵌套的大坑/","content":"<h2 id=\"07年就有很多人问的大坑，我今天遇到啦\"><a href=\"#07年就有很多人问的大坑，我今天遇到啦\" class=\"headerlink\" title=\"07年就有很多人问的大坑，我今天遇到啦\"></a>07年就有很多人问的大坑，我今天遇到啦</h2><ul>\n<li>StackOverflow上07年的这个问题就很火 <a href=\"https://stackoverflow.com/questions/379610/can-you-nest-html-forms#\" target=\"_blank\" rel=\"noopener\">Form表单不可以嵌套</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000000518304\" target=\"_blank\" rel=\"noopener\">sf</a> 上都给出了<a href=\"https://www.w3.org/TR/2011/WD-html5-20110525/forms.html#the-form-element\" target=\"_blank\" rel=\"noopener\">w3c的form标准</a></li>\n<li>国内的CSDN也给出了可行的<a href=\"http://blog.csdn.net/u012866869/article/details/39834359\" target=\"_blank\" rel=\"noopener\">解决方案1 </a><a href=\"http://bbs.csdn.net/topics/110024205\" target=\"_blank\" rel=\"noopener\">解决方案2</a><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ab265c34b9d91986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"好玩的评论.png\"></li>\n</ul>\n","categories":["HTML学习"],"tags":["HTML"]},{"title":"阮一峰JS入门的强制转换部分","url":"https://codevvvv9.github.io/2017/12/20/阮一峰JS入门的强制转换部分/","content":"<hr>\n<p><code>神奇的传送门</code> <a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">书籍</a></p>\n<hr>\n<h3 id=\"1-简介、基本语法基本没啥问题，和以前的认知相同\"><a href=\"#1-简介、基本语法基本没啥问题，和以前的认知相同\" class=\"headerlink\" title=\"1.  简介、基本语法基本没啥问题，和以前的认知相同\"></a>1.  简介、基本语法基本没啥问题，和以前的认知相同</h3><h3 id=\"2-强制转换-知识\"><a href=\"#2-强制转换-知识\" class=\"headerlink\" title=\"2.  强制转换 知识\"></a>2.  强制转换 知识</h3><p>主要指使用<strong>Number</strong>、<strong>String</strong>和<strong>Boolean</strong>三个构造函数，手动将各种类型的值，转换成数字、字符串或者布尔值。</p>\n<h4 id=\"2-1-Number-函数\"><a href=\"#2-1-Number-函数\" class=\"headerlink\" title=\"2.1 Number()函数\"></a>2.1 Number()函数</h4><p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数值还是数值</span><br><span class=\"line\">Number(42)//42</span><br><span class=\"line\">//字符串 能全转 才能全转</span><br><span class=\"line\">Number(&apos;42&apos;) //42</span><br><span class=\"line\">//空字符串转为0</span><br><span class=\"line\">Number(&apos; &apos;)//0</span><br><span class=\"line\">// 布尔值：true 转成1，false 转成0</span><br><span class=\"line\">Number(&apos; true&apos;)//1</span><br><span class=\"line\">Number(&apos; false&apos;)//0</span><br><span class=\"line\">// undefined：转成 NaN</span><br><span class=\"line\">Number(undefined) // NaN</span><br><span class=\"line\">// null：转成0</span><br><span class=\"line\">Number(null) // 0</span><br></pre></td></tr></table></figure>\n<p>Number()<strong>很严格</strong>，比parseInt()严格。<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;42 cats&apos;) // 42</span><br><span class=\"line\">Number(&apos;42 cats&apos;) // NaN 只要有一个不能转的字符就是NaN</span><br></pre></td></tr></table></figure></p>\n<p>Number函数会自动过滤一个字符串前导和后缀的空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&apos;\\t\\v\\r12.34\\n&apos;) // 12.34</span><br></pre></td></tr></table></figure>\n<p>分割线强力来袭 <del>~</del><del>~</del><del>~</del></p>\n<hr>\n<ul>\n<li>强调一下对象的转换规则<br>简单的规则是 ***简单的规则是，Number方法的参数是对象时，将返回NaN，除非是包含单个数值的数组。<br>举例:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&#123;a: 1&#125;) // NaN</span><br><span class=\"line\">Number([1, 2, 3]) // NaN</span><br><span class=\"line\">Number([5]) // 5</span><br></pre></td></tr></table></figure>\n<p>接下来了解一下<code>Number()</code>背后的原理。<strong>哇擦嘞,以前真是不注意这些东西，菜鸡一枚啊。</strong></p>\n<blockquote>\n<p>1、调用对象自身的valueOf方法。如果返回原始类型的值，则直接对该值使用Number函数，不再进行后续步<br> 骤。<br>2、如果valueOf方法返回的还是对象，则改为调用对象自身的toString方法。如果toString方法返回原始类型的值，则对该值使用Number函数，不再进行后续步骤。<br>3、如果toString方法返回的是对象，就报错。</p>\n</blockquote>\n<p>原理不好理解，上栗子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;x: 1&#125;;</span><br><span class=\"line\">Number(obj) // NaN</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">if (typeof obj.valueOf() === &apos;object&apos;) &#123;</span><br><span class=\"line\">  Number(obj.toString());</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  Number(obj.valueOf());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的代码意思是：Number函数接收到了obj，先调用obj.valueOf()方法，判断是不是<code>object</code>,结果返回对象自身，于是，继续调用obj.toString方法，这时返回字符串[object Object]，对这个字符串使用Number函数，必然得到NaN</p>\n</blockquote>\n<p>默认情况下，对象的valueOf()方法总是会返回对象自身，所以一般会调用对象的toString()方法，如果toString()方法，返回对象的类型字符串（比如[object Object]），那么Number()，结果就是NaN；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&#123;&#125;) // NaN</span><br></pre></td></tr></table></figure>\n<p>如果toString()方法返回不是原始类型的值，就报错(<strong>这句话的另一层意思也就是toString()方法被重写了啊</strong>)</p>\n<p>依然上栗子<br>obj对象重写了两个方法，注意 toString()方法返回的又是一个对象<br>报的错 <strong>TypeError: Cannot convert object to primitive value</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  valueOf: function () &#123;</span><br><span class=\"line\">    return &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  toString: function () &#123;</span><br><span class=\"line\">    return &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Number(obj)</span><br><span class=\"line\">// TypeError: Cannot convert object to primitive value</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"2-2-String-函数\"><a href=\"#2-2-String-函数\" class=\"headerlink\" title=\"2.2 String()函数\"></a>2.2 String()函数</h4><p>使用String函数，可以将任意类型的值转化成字符串。转换规则如下。</p>\n<ul>\n<li><ol>\n<li>原始数据类型转换</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>数值：转为相应的字符串。<br>字符串：转换后还是原来的值。<br>布尔值：true转为”true”，false转为”false”。<br>undefined：转为”undefined”。<br>null：转为”null”。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String(123) // &quot;123&quot;</span><br><span class=\"line\">String(&apos;abc&apos;) // &quot;abc&quot;</span><br><span class=\"line\">String(true) // &quot;true&quot;</span><br><span class=\"line\">String(undefined) // &quot;undefined&quot;</span><br><span class=\"line\">String(null) // &quot;null&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"2\">\n<li>对象的转换<br>String方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String(&#123;a: 1&#125;) // &quot;[object Object]&quot;</span><br><span class=\"line\">String([1, 2, 3]) // &quot;1,2,3&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>背后的原理基本与Number()相同，只是方法的调用相反</p>\n<blockquote>\n<p>1、先调用对象自身的toString方法。如果返回原始类型的值，则对该值使用String函数，不再进行以下步骤。<br> 2、 如果toString方法返回的是对象，再调用原对象的valueOf方法。如果valueOf方法返回原始类型的值，则对该值使用String函数，不再进行以下步骤。<br>  3、如果valueOf方法返回的是对象，就报错。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String(&#123;a: 1&#125;)</span><br><span class=\"line\">// &quot;[object Object]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于</span><br><span class=\"line\"></span><br><span class=\"line\">String(&#123;a: 1&#125;.toString())</span><br><span class=\"line\">// &quot;[object Object]&quot;</span><br></pre></td></tr></table></figure>\n<p>上面代码先调用对象的toString方法，发现返回的是字符串[object Object]，就不再调用valueOf方法了。</p>\n<p>如果toString法和valueOf方法，返回的都是对象，就会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  valueOf: function () &#123;</span><br><span class=\"line\">    console.log(&apos;valueOf&apos;);</span><br><span class=\"line\">    return &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  toString: function () &#123;</span><br><span class=\"line\">    console.log(&apos;toString&apos;);</span><br><span class=\"line\">    return &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">String(obj)</span><br><span class=\"line\">// TypeError: Cannot convert object to primitive value</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"2-3-Boolean\"><a href=\"#2-3-Boolean\" class=\"headerlink\" title=\"2.3 Boolean()\"></a>2.3 Boolean()</h4><p>除了以下六个值的转换结果为false，其他的值全部为true。</p>\n<blockquote>\n<p>undefined<br>null<br>-0<br>0或+0<br>NaN<br>‘ ‘（空字符串）</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean(undefined) // false</span><br><span class=\"line\">Boolean(null) // false</span><br><span class=\"line\">Boolean(0) // false</span><br><span class=\"line\">Boolean(NaN) // false</span><br><span class=\"line\">Boolean(&apos;&apos;) // false</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意一下<br>注意，所有对象（包括空对象）的转换结果都是true，甚至连false对应的布尔对象new Boolean(false)也是true。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean(&#123;&#125;) // true</span><br><span class=\"line\">Boolean([]) // true</span><br><span class=\"line\">Boolean(new Boolean(false)) // true</span><br></pre></td></tr></table></figure>","categories":["JS语法详解"],"tags":["JavaScript"]},{"title":"打开CSS世界的大门","url":"https://codevvvv9.github.io/2017/12/16/打开CSS世界的大门/","content":"<blockquote>\n<p>这只是一篇让我重新认识CSS的文章，写这篇文章的时候还未搞明白原理，只知其然，不知其所以然。我的这篇文章的小demo让我信心倍增。</p>\n</blockquote>\n<h3 id=\"一、CSS-Cascading-Style-Sheets-是个啥？\"><a href=\"#一、CSS-Cascading-Style-Sheets-是个啥？\" class=\"headerlink\" title=\"一、CSS(Cascading Style Sheets)是个啥？\"></a>一、CSS(Cascading Style Sheets)是个啥？</h3><p>惯例是先了解了解历史，请点击这俩链接。</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8#.E5.8E.86.E5.8F.B2\" target=\"_blank\" rel=\"noopener\">中文百科</a> <a href=\"https://en.wikipedia.org/wiki/Cascading_Style_Sheets#History\" target=\"_blank\" rel=\"noopener\">英文百科</a></li>\n<li>CSS从2.1流行，现在主流的是CSS 3，还有更简练、功能更强的LESS、SASS<br>好了，历史了解完了，你肯定还是啥也不会，因为我曾经学了都还是啥也不会。<br>所以 这个系列的原则就是 <strong><em>先做出来，做多了，有感觉了才有资格喷人</em></strong></li>\n<li>学习资源<ul>\n<li><a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noopener\">CSS-Tricks</a> 你就模仿吧，全是你想不到的</li>\n<li><a href=\"https://tympanus.net/codrops/category/playground/\" target=\"_blank\" rel=\"noopener\">Codrops</a> 我长这么大，可能这是第一次知道原来能把网页显示的这么漂亮，难道你不心动吗？<br>你可以看<a href=\"https://tympanus.net/Development/SeatPreview/\" target=\"_blank\" rel=\"noopener\">模拟选座</a>，各种<a href=\"https://tympanus.net/Development/ElasticProgress/\" target=\"_blank\" rel=\"noopener\">进度条</a>的显示</li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/category/css/page/25/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a> 是真的牛</li>\n<li>阮一峰，你就看吧<a id=\"more\"></a>\n<h3 id=\"二、实战\"><a href=\"#二、实战\" class=\"headerlink\" title=\"二、实战\"></a>二、实战</h3></li>\n</ul>\n</li>\n<li>各种工具</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://colorpix.en.softonic.com/\" target=\"_blank\" rel=\"noopener\">取色器</a></td>\n<td>你猜这能是干啥的</td>\n</tr>\n<tr>\n<td>QQ截图功能</td>\n<td>既可以量尺错也可以取色，取色后按住 <code>ctrl</code>  可以看到16进制的色</td>\n</tr>\n<tr>\n<td>word</td>\n<td>查看字体</td>\n</tr>\n</tbody>\n</table>\n<p><em>查看页面字体和图片的方式</em>  还是使用开发者工具的<code>Network</code> 来看<code>image</code>和<code>font</code><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-bfa7243686043295.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看页面字体.png\"></p>\n<ul>\n<li>CSS引用的四种方式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>style 标签</td>\n<td>在head里面写上<code>&lt;style&gt;</code> <code>&lt;/style&gt;</code>  标签里面就可以写css代码了</td>\n</tr>\n<tr>\n<td>在每个标签的style属性里面直接写</td>\n<td><code>&lt;div style=&quot;&quot;&gt;</code> <code>&lt;/div&gt;</code></td>\n</tr>\n<tr>\n<td>外部引入</td>\n<td>在head里面写上 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css &quot;&gt;</code></td>\n</tr>\n<tr>\n<td>css import</td>\n<td>在你的css文件开头写上<code>@import url(./b.css)</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><h4 id=\"第一次见脱离文档流\"><a href=\"#第一次见脱离文档流\" class=\"headerlink\" title=\"第一次见脱离文档流\"></a>第一次见脱离文档流</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.topNavBar&#123;</span><br><span class=\"line\">    padding: 15px 0px 15px 0px;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>padding: 15px 16px 15px 16px</code>这串代码等同于下列代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding-top: 15px;</span><br><span class=\"line\">padding-bottom: 15px;</span><br><span class=\"line\">padding-left: 16px;</span><br><span class=\"line\">padding-right: 16px;</span><br></pre></td></tr></table></figure></p>\n<p>顺序是<strong><em>从上开始顺时针取值，上 右 下 左</em></strong><br><code>position: fixed;</code> 这是核心代码，让你的topNavBar导航栏固定在顶部，而且不占body的高度。</p>\n<ul>\n<li>如何做横向布局呢？<br>原则 <strong><em>在子类元素的CSS规定 float:left,父类元素必须有一个class=”clearfix”</em></strong><br>下面是经典的消除横向布局的bug的代码，要记住。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clearfix::after&#123;</span><br><span class=\"line\">    content: &apos;&apos;;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>用一个计算题来验证一下，topNavBar真的脱离了文档流</p>\n<ul>\n<li>先看未脱离文档流的时候topNavBar的原始尺寸<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-72688b8cd291c65c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"top.png\"><br>高度是69.59，图片里面的计算写错了<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-f6f43f1739a23d9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"topNavBar没有脱离文档流的样子.png\"><br>没脱离文档流的时候body的高度是1325.09<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-a1d5f8a5a4e927aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"top没有脱离时的body的高度.png\"><br>那么脱离之后，body的高度必然是1325.09-69.59=1255.5<br>接下来就是见证奇迹的时刻<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-082601717d545375.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"top脱离后的高度.png\"><br>果然是1255.5,<strong>脱离成功</strong>！！！</li>\n<li>此时也应该明白文档流的含义了，块级元素<code>display: block</code>(一下占一行，后面有空也不给你用)从上到下流动，内联元素<code>display: inline</code>（不换行，占满为止）从左往右流动。</li>\n<li>块级元素示例<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-e627ca21f733e3d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"块级元素就不给你用.png\"></li>\n<li>内联元素示例<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ce1a6307ff2a82b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"span流截断.png\"></li>\n<li>注意英文单词一个大整体，打断的话修改<code>word-block</code>属性</li>\n</ul>\n<hr>\n<ul>\n<li>请各部门注意：插播一条内联元素的特点呢</li>\n<li><h4 id=\"内联元素无法规定宽和高\"><a href=\"#内联元素无法规定宽和高\" class=\"headerlink\" title=\"内联元素无法规定宽和高\"></a>内联元素<strong><em>无法规定宽和高</em></strong></h4></li>\n<li>margin的上右下左可以设置<br>不信你看图，有图有真相，还附带<a href=\"http://js.jirengu.com/fusoveluta/1/edit?html,css,output\" target=\"_blank\" rel=\"noopener\">链接</a><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-161cbe415c5379ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"inline元素设置宽高无效.png\"></li>\n<li>而且还会有空格的影响</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">&lt;span&gt;2&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>1、2之间必然出现空格的。<br>直观点我们可以看图<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-5d9e50ae4aeb3ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"a标签修改display后之间的空隙是因为有回车.png\"></p>\n<hr>\n<ul>\n<li>明白了文档流（其实还是不明白，后续要继续研究），那么高度是由什么决定的，也差不多了<br>是由其内部的文档流的高度总和决定的。比如div没有内容，那么高度为零。<br>后期要深入了解 <strong>合并</strong>的一些知识，目前没搞懂     <code>？？？？</code></li>\n<li>在这也明白了，display可以改变内联还是块级，比如把span的display改为block他就是div了。</li>\n<li>盒模型<br>内部是element,外面是padding、border，这是通常<code>F12</code>检查元素的尺寸的来源。再往外就是margin。目前就了解这些。</li>\n</ul>\n<hr>\n<ul>\n<li><code>a</code>标签的默认样式<br>如果你不继承的的话，默认会有一个蓝色带下划线的模样，那是浏览器默认的。<br><code>text-decoration</code>属性可以去掉他的下划线。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-d15ab98867171cca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"a标签的默认样式.png\"><br>color属性是可以继承的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&#123;</span><br><span class=\"line\">    color: inherit;</span><br><span class=\"line\">    text-decoration: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><strong>注意：小技巧</strong><br>有时候如果我们发现a标签包裹不了内部的元素可以采用以下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: inline-block;</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>line-height很难，看了专栏，也没懂，大约知道，字体有个基线<code>baseline</code>，上部下部还有高度，所以给字体有个建议行高。<br>默认值是normal,值浏览器规定约为1.2,但是还根据<code>font-family</code>。那么我们就认为你说line-height默认值是1.2错了。<br><strong>line-height 的值是多少像素，那么 span 所占的高度就是多少</strong> 先记住吧。<br>举个例子 我需要一个 div 高度为 30px，div 里有一行字垂直居中，字的大小为 14px，应该怎么写 CSS?<br>答案：两种写法。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">  line-height: 20px;</span><br><span class=\"line\">  padding: 5px 0px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">  line-height: 30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"CSS-position的探讨\"><a href=\"#CSS-position的探讨\" class=\"headerlink\" title=\"CSS position的探讨\"></a>CSS <strong><em><code>position</code></em></strong>的探讨</h4><code>MDN</code>的解释是 CSS属性<code>position</code>用于指定一个元素在文档中的定位方式。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/top\" title=\"top CSS属性是定位元素的位置信息的一部分。它不会影响到非定位元素。\" target=\"_blank\" rel=\"noopener\"><code>top</code></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/right\" title=\"摘要\" target=\"_blank\" rel=\"noopener\"><code>right</code></a> <a href=\"https://developer.mozilla.org/zhCN/docs/Web/CSS/bottom\" title=\"bottom属性用来指定被定位元素的位置。\" target=\"_blank\" rel=\"noopener\"><code>bottom</code></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/left\" title=\"left 属性指定当前元素在有定位的包含块元素中的位置。\" target=\"_blank\" rel=\"noopener\"><code>left</code></a>属性则决定了该元素的最终位置。<br>默认值是static<ul>\n<li>1、可以取那些值<br><code>static</code> <code>relative</code> <code>absolute</code> <code>fixed</code> <code>sticky</code><h4 id=\"由此引出-脱离文档流第二种方法\"><a href=\"#由此引出-脱离文档流第二种方法\" class=\"headerlink\" title=\"由此引出 脱离文档流第二种方法\"></a>由此引出 脱离<code>文档流</code>第二种方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position: relative;//父级元素加上这句</span><br><span class=\"line\">position: absolute;//子类加上这句话</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>例子如下 <a href=\"http://js.jirengu.com/kivod/1/edit?html,css,output\" target=\"_blank\" rel=\"noopener\">relative和absolute的例子</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;a&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;b&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;c&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;d&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;e&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;f&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.a,.d&#123;</span><br><span class=\"line\">  width: 200px;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  padding:20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b,.e&#123;</span><br><span class=\"line\">  width: 150px;</span><br><span class=\"line\">  height: 150px;</span><br><span class=\"line\">  background: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.c,.f&#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background: green;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.a,.e&#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-be7d2ab269a3710c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"position.png\"><br>相互对应，而没有对应错是因为，被不同的大<code>div</code>包裹住了。</p>\n<ul>\n<li><code>width</code> <code>height</code>属性指明了最内部的内容区的宽、高。<br>width的默认值是<strong>auto</strong><br>具体理解看图<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-9d2489b58420dcb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"width.png\"><br><code>max-width</code>会覆盖width的值，<code>mix-width</code>又会覆盖<code>max-width</code>的值，初始值是none。<br>max-width用以限制width的最大宽度。</li>\n<li><h4 id=\"box-sizing元素的作用\"><a href=\"#box-sizing元素的作用\" class=\"headerlink\" title=\"box-sizing元素的作用\"></a><code>box-sizing</code>元素的作用</h4></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>两种盒子模型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传统的盒子模型<strong><code>content-box</code></strong></td>\n<td>详见下面的解释</td>\n</tr>\n<tr>\n<td>新型的盒子模型<strong><code>border-box</code></strong></td>\n<td>详见下面的解释</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em><code>box-sizing</code></em></strong>属性用于更改用于计算元素宽度和高度的默认的 <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Box_model\" title=\"CSS/Box_model\" target=\"_blank\" rel=\"noopener\">CSS 盒子模型</a>。</p>\n<ul>\n<li>原始的盒子模型<strong><code>content-box</code></strong>存在弊端，当你规定了<code>width</code> <code>height</code>之后，浏览器显示的宽度是你写的width+padding &times; 2+border&times;2的宽度，已经不是你想要的宽度，如果你想显示的就是你想要的宽度，你就要在你的想要的宽度上减去（padding&times;2 + boder&times;2）的宽度，这个值才是你要规定的width。很麻烦吧。<br>你如果上面的分析没看懂，就看这个</li>\n</ul>\n<blockquote>\n<p> 比如. 如果 .box {width: 350px}; 而且 {border: 10px solid black;} 那么在浏览器中的渲染的实际宽度将是370px;</p>\n</blockquote>\n<ul>\n<li><strong><code>border-box</code></strong>告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px,那么这100px会包含其它的border和padding，内容区的实际宽度会是width减去border + padding的计算值。大多数情况下这使得我们更容易的去设定一个元素的宽高。<ul>\n<li><h4 id=\"用CSS画个三角形出来\"><a href=\"#用CSS画个三角形出来\" class=\"headerlink\" title=\"用CSS画个三角形出来\"></a>用CSS画个三角形出来</h4>画各种shape的好去处 <a href=\"https://css-tricks.com/examples/ShapesOfCSS/\" target=\"_blank\" rel=\"noopener\">CSS-Tricks shapes</a> ，可以画出一个太极图</li>\n<li>其实还是理解的盒子模型，灵活运用boder<br>有用的代码如下</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.span&#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  width: 0px;</span><br><span class=\"line\">  height: 0px;</span><br><span class=\"line\">  border: 30px solid red;</span><br><span class=\"line\">  /* border-top-color: blue; */</span><br><span class=\"line\">  border-right-color: transparent;</span><br><span class=\"line\">  border-bottom-color: transparent;</span><br><span class=\"line\">  border-left-color: black;</span><br><span class=\"line\">  border-top-width: 0px; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//到最后，其实就是这么几句话</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">  width: 0px;</span><br><span class=\"line\">  height: 0px;</span><br><span class=\"line\">  border: 30px solid transpatent;</span><br><span class=\"line\">  border-left-color: black;</span><br><span class=\"line\">  border-top-width: 0px;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"在这个过程中发现两点好玩的\"><a href=\"#在这个过程中发现两点好玩的\" class=\"headerlink\" title=\"在这个过程中发现两点好玩的\"></a>在这个过程中发现两点好玩的</h4><ul>\n<li>width: 0px和不写是完全不同的，我总被习惯所误导，详见下图<br>1、你要是width: 0px height: 0px，是下面这样式的，是正确的~<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-0ae6880911e18fe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"width为0和不写的区别.png\"><br>2、但是你要是不写的话，这世界立马就变了<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ed218f8a6610b241.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"width为0和不写的区别很大.png\"></li>\n<li><strong>border-top-width</strong>的真实含义，对比图<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-bea8ba44149d4ec9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-e168d570083732df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2.png\"><br>可以知道<strong>border-top-width</strong>具体是哪块了<h4 id=\"综上所述，CSS不能按照惯性思维去随手就写，不能想当然啊。\"><a href=\"#综上所述，CSS不能按照惯性思维去随手就写，不能想当然啊。\" class=\"headerlink\" title=\"综上所述，CSS不能按照惯性思维去随手就写，不能想当然啊。\"></a>综上所述，CSS不能按照惯性思维去随手就写，不能想当然啊。</h4></li>\n</ul>\n<hr>\n<ul>\n<li>图标的引用 <a href=\"http://www.iconfont.cn/?login=1\" target=\"_blank\" rel=\"noopener\">阿里SVG矢量图库</a><br>1、先把图标添加到购物车里面，再添加到项目里面<br>然后按照下面的图片来操作<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-2102a526a3b8a33b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Iconfont的使用.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;//at.alicdn.com/t/font_511143_hb7eteggodj6pqfr.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>2、再打开使用帮助<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-0b68d6b076662eaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"icon.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;#&quot;&gt;</span><br><span class=\"line\">    &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class=\"line\">       &lt;use xlink:href=&quot;#icon-github&quot;&gt;&lt;/use&gt;</span><br><span class=\"line\">    &lt;/svg&gt;</span><br><span class=\"line\">&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>svg的不同属性注意一下 <strong><code>fill</code></strong>颜色属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.userCard svg &#123;</span><br><span class=\"line\">    width: 30px;</span><br><span class=\"line\">    height: 30px;</span><br><span class=\"line\">    fill: white;</span><br><span class=\"line\">    vertical-align: top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>CSS还没有深入，但是有句话我觉得该记下来，<strong><em>要对CSS保持一颗敬畏的心</em></strong>~</p>\n<h4 id=\"加油-骚年\"><a href=\"#加油-骚年\" class=\"headerlink\" title=\"加油 ~~ 骚年 ~~\"></a>加油 ~~ 骚年 ~~</h4>","categories":["CSS学习"],"tags":["CSS"]},{"title":"HTML重点学习","url":"https://codevvvv9.github.io/2017/12/14/HTML重点学习/","content":"<p><strong>通过重点标签的学习前进</strong></p>\n<h3 id=\"一、-iframe-的学习\"><a href=\"#一、-iframe-的学习\" class=\"headerlink\" title=\"一、 iframe 的学习\"></a>一、 <code>iframe</code> 的学习</h3><p>iframe通俗的的理解就是，可以在页面里面嵌套新的页面<br>它的使用会使页面变卡，一般会有一个固定的尺寸，默认的。他也属于可替换元素行列。我们可以通过CSS来改变尺寸<br><code>frameborder</code>消除边框<br><code>name</code>属性与a标签结合</p>\n<pre><code>&lt;!-- &lt;iframe name=iframe src=&quot;http://qq.com&quot; &gt;&lt;/iframe&gt; --&gt;\n\n&lt;iframe name=&quot;000&quot; src=&quot;&quot; &gt;&lt;/iframe&gt;\n&lt;a target=&quot;000&quot; href=&quot;http://qq.com&quot;&gt;aaaa&lt;/a&gt;\n</code></pre><p><code>a</code>标签的链接会在iframe的内嵌窗口里面打开<br><a id=\"more\"></a></p>\n<h3 id=\"二、a标签的学习\"><a href=\"#二、a标签的学习\" class=\"headerlink\" title=\"二、a标签的学习\"></a>二、<code>a</code>标签的学习</h3><p>a标签四种常见的target</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;http://qq.com&quot; target=&quot;_blank&quot;&gt;topQQ&lt;/a&gt; //在新的页面打开链接</span><br><span class=\"line\"> &lt;a href=&quot;http://qq.com&quot; target=&quot;_self&quot;&gt;topQQ&lt;/a&gt; //在当前窗口打开链接</span><br><span class=\"line\"> &lt;a href=&quot;http://qq.com&quot; target=&quot;_parent&quot;&gt;parentQQ&lt;/a&gt; //在父级</span><br><span class=\"line\"> &lt;a href=&quot;http://qq.com&quot; target=&quot;_top&quot;&gt;topQQ&lt;/a&gt; // 在顶级</span><br></pre></td></tr></table></figure>\n<p><code>a</code>标签可以设置download属性，使其不打开链接。而是下载当前页面的HTML。</p>\n<p><strong><em>也可以把你当前目录下的文件下载</em></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;http://qq.com&quot; download&gt;下载&lt;/a&gt;</span><br><span class=\"line\">&lt;a href=&quot;222/分配的ip地址.xls&quot; download&gt;下载文件&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><code>a</code>标签会自动添加当前页面的协议。例如以下例子，如果不写http协议，会根据当前页面的协议自动加上，如果当前页面是http协议（通过下面的http-server模拟），那么就打开<code>qq.com</code>，如果只是本地的HTML，那么协议时file协议，不会下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;//qq.com&quot; download&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;//qq.com&quot; download&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><code>a</code>标签会在地址栏后加上锚点，即#开始的那串字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;#kkkk&quot; download&gt;下载文件&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><code>a</code>标签会在地址栏后加上?name=wushao</p>\n<h3 id=\"一定要记得a标签可以发起get请求\"><a href=\"#一定要记得a标签可以发起get请求\" class=\"headerlink\" title=\"一定要记得a标签可以发起get请求\"></a><strong><em>一定要记得a标签可以发起get请求</em></strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;?name=wushao&quot; download&gt;下载文件&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><code>a</code>标签可以使用<strong><em>伪协议</em></strong>，这是历史遗留问题，以前的前端想在<code>a</code>标签里面直接打开js代码。现在常用于一些奇葩需求。<br>如果，你不想这个<code>a</code>标签，有任何动作，无法点击，就用伪协议。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;javaScript:;&quot; target=&quot;_top&quot;&gt;topQQ&lt;/a&gt; //无法操作了</span><br><span class=\"line\">&lt;a href=&quot;javaScript:alert(1);&quot; target=&quot;_top&quot;&gt;topQQ&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>反之如果你只是加锚点，那么会定位到开始位置。<br>如果你<code>href=&quot; &quot;</code>，那么会刷新页面。<br>综上所述，如果你对<code>a</code>标签什么也不想做，就用伪协议</p>\n<hr>\n<p>小型服务器 <code>npm i -g http-server</code><br>它会安装在npm目录下，把bin目录添加到<code>~/.bashrc</code>脚本配置文件里面，在文件的最后一行加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=&quot;http-server的绝对路径:$PATH&quot;</span><br></pre></td></tr></table></figure>\n<p>配置好path之后，就可以直接使用了。<br>在你想模拟http协议环境的时候，在那个目录下打开http-server就可以用了</p>\n<hr>\n<h3 id=\"三、form标签的学习\"><a href=\"#三、form标签的学习\" class=\"headerlink\" title=\"三、form标签的学习\"></a>三、<code>form</code>标签的学习</h3><p><code>form</code> <code>a</code> 标签最大的区别就是<code>form</code>标签是post提交，虽然你可以修改成get,但是没有人蛋疼的这么做。</p>\n<ul>\n<li>默认的get方法演示<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;users&quot; &gt;</span><br><span class=\"line\">        用户:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">        密码:&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;!-- &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; --&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;button&quot;&gt;</span><br><span class=\"line\">        &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"line\"> &lt;/form&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-9d8f209cb18382ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"form默认的get方法.png\"></p>\n<p><strong><em>以上是智障的写法，下面是优雅的写法</em></strong>。</p>\n<ul>\n<li>注意form必须要用一个type=submit的input不然无法提交数据！！！！<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;users&quot;  method=&quot;post&quot;&gt;</span><br><span class=\"line\">        用户:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">        密码:&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;button&quot;&gt;</span><br><span class=\"line\"> &lt;/form&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-a7445be12ba09f4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"type是submit和button.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-51df818de4d761f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"form方法post的方法.png\"></p>\n<ul>\n<li>以前我们在请求里面只能看见前三个部分，有了form标签之后，终于能看到第四部分，form data啦<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-73056ef251926bcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"post解析.png\"></li>\n<li>如果你的form表单里面没有一个type=submit的input,可以使用type=submit的<code>button</code>的标签,也可以使用<button>提交</button></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;users&quot; &gt;</span><br><span class=\"line\">      用户:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">      密码:&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">      &lt;!-- &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; --&gt;</span><br><span class=\"line\">      &lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;button&quot;&gt;</span><br><span class=\"line\">      &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"line\">      //等价于 &lt;button &gt;提交&lt;/button&gt;</span><br><span class=\"line\">  &lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>form表单<strong><em>有且只有</em></strong>两个方法，你不规定method那么就是get,你就是智障；所以你规定method=”post”，你不智障；如果你写了这两种之外的方法，那么还是按照get方法提交，你是智障中的战斗机。</p>\n<hr>\n<h3 id=\"四、input-button标签的学习\"><a href=\"#四、input-button标签的学习\" class=\"headerlink\" title=\"四、input button标签的学习\"></a>四、<code>input</code> <code>button</code>标签的学习</h3><ul>\n<li><code>input</code> <code>button</code> 标签的最大区别就是<code>input</code>标签是空标签。</li>\n<li><code>input</code> 标签的<code>type</code>有很多种<br>而且input<strong><em>必须有name属性</em></strong>，因为你提交的数据要用，组成name=value。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;POST-name&quot; type=&quot;text&quot; name=&quot;name&quot;&gt; //普通文本</span><br><span class=\"line\">&lt;input id=&quot;POST-name&quot; type=&quot;password&quot; name=&quot;password&quot;&gt; //密码</span><br><span class=\"line\">&lt;input id=&quot;POST-name&quot; type=&quot;submit&quot; value=&quot;提交&quot;&gt; //提交</span><br><span class=\"line\">&lt;input id=&quot;POST-name&quot; type=&quot;checkbox&quot; name=&quot;name&quot;&gt; //复选框</span><br><span class=\"line\">&lt;input id=&quot;POST-name&quot; type=&quot;radio&quot; name=&quot;name&quot;&gt; //单选框</span><br></pre></td></tr></table></figure>\n<ul>\n<li>复选框和单选框的小练习</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;users&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">     用户:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">     密码:&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">     &lt;!-- &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; --&gt;</span><br><span class=\"line\">     &lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;button&quot;&gt;</span><br><span class=\"line\">     &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"line\">     &lt;br&gt;</span><br><span class=\"line\">     &lt;input id=&quot;love&quot; type=&quot;checkbox&quot; name=&quot;loveme&quot;&gt; &lt;label for=&quot;love&quot;&gt;爱我 &lt;/label&gt;</span><br><span class=\"line\">     &lt;input id=&quot;eat&quot; type=&quot;checkbox&quot; name=&quot;loveme&quot;&gt; &lt;label for=&quot;eat&quot;&gt;馒头 &lt;/label&gt; </span><br><span class=\"line\">     &lt;input id=&quot;play&quot; type=&quot;checkbox&quot; name=&quot;loveme&quot; checked&gt; &lt;label for=&quot;play&quot;&gt;篮球 &lt;/label&gt;</span><br><span class=\"line\">     &lt;input id=&quot;apple&quot; type=&quot;radio&quot; name=&quot;name&quot; checked=&quot;checked&quot;&gt;&lt;label for=&quot;apple&quot;&gt;苹果 &lt;/label&gt; </span><br><span class=\"line\">     &lt;input id=&quot;orange&quot; type=&quot;radio&quot; name=&quot;name&quot;&gt;&lt;label for=&quot;orange&quot;&gt;橘子 &lt;/label&gt;  </span><br><span class=\"line\"> &lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-64cee1f0e79b16ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"checkbox和radio.png\"></p>\n<p>checked=”checked” 与 直接书写 checked 一样的效果</p>\n<ul>\n<li>注意以上的代码中，包含的 <code>label</code>标签，有时候我们为了人性化的需求，只要鼠标点中文字的一部分就算选中了，所以用 label标签的for属性与input的id属性关联。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;play&quot; type=&quot;checkbox&quot; name=&quot;loveme&quot; checked&gt; &lt;label for=&quot;play&quot;&gt;篮球 &lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当然了，你身为一个老司机，应该这么写</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label &gt;&lt;input type=&quot;checkbox&quot; name=&quot;loveme&quot; checked&gt; 篮球 &lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>省了两个属性，简洁优雅。<br><code>button</code>标签也有很多<code>type</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button name=&quot;button&quot; type=&quot;button&quot;&gt; Click me &lt;/button&gt; </span><br><span class=\"line\">//仅表示按钮，没有任何作用.它可以有与元素事件相关的客户端脚本，当事件出现时可触发,与js结合使用</span><br><span class=\"line\">&lt;button name=&quot;button&quot; type=&quot;submit&quot;&gt; Click me &lt;/button&gt;</span><br><span class=\"line\">//此按钮提交表单数据给服务器</span><br></pre></td></tr></table></figure>\n<ul>\n<li>input 也可以实现滑动的效果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;range&quot; name=&quot;&quot; value=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-d525712e3354c57f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"range.png\"></p>\n<h3 id=\"五、下拉框\"><a href=\"#五、下拉框\" class=\"headerlink\" title=\"五、下拉框\"></a>五、下拉框</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select&gt;</span><br><span class=\"line\">      &lt;option value=&quot;1&quot;&gt;湖人&lt;/option&gt;</span><br><span class=\"line\">      &lt;option value=&quot;2&quot; selected&gt;凯尔特人人&lt;/option&gt;</span><br><span class=\"line\">      &lt;option value=&quot;3&quot;&gt;马刺&lt;/option&gt;</span><br><span class=\"line\"> &lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>凯尔特人人是默认勾选的</p>\n<h3 id=\"六、table标签的学习\"><a href=\"#六、table标签的学习\" class=\"headerlink\" title=\"六、table标签的学习\"></a>六、<code>table</code>标签的学习</h3><p><code>table</code>在古代用来做布局，现在基本不用了。<br>只有四个元素，thead、tbody、tfoot、colgroup。即使你不写tbody你也有这个标签，而且可以不止一个。thead里面有tr、th，tbody里面有tr、td，tfoot里面有tr、td，colgroup里面有col,用来控制列的宽度，基本不使用了。我现在维护的网页，用的<code>table</code> 布局，修改很麻烦</p>\n<table>\n<thead>\n<tr>\n<th>tr</th>\n<th>table row</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>th</td>\n<td>table header</td>\n</tr>\n<tr>\n<td>td</td>\n<td>table data</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">  &lt;thead&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;th&gt;Header content 1&lt;/th&gt;</span><br><span class=\"line\">      &lt;th&gt;Header content 2&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/thead&gt;</span><br><span class=\"line\">  &lt;tfoot&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;Footer content 1&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;Footer content 2&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/tfoot&gt;</span><br><span class=\"line\">  //即使写在这里。浏览器也会把他放到底部去</span><br><span class=\"line\">  &lt;tbody&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">      &lt;td&gt;Body content 1&lt;/td&gt;</span><br><span class=\"line\">      &lt;td&gt;Body content 2&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">  &lt;/tbody&gt;</span><br><span class=\"line\">  //可以包含多个tbody</span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>noscript</code>标签表示如果用户禁用了js,就显示该标签里面的内容</p>\n<hr>\n<h3 id=\"七、空元素\"><a href=\"#七、空元素\" class=\"headerlink\" title=\"七、空元素\"></a>七、<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%A9%BA%E5%85%83%E7%B4%A0\" target=\"_blank\" rel=\"noopener\">空元素</a></h3><p>就是里面不能有内容的标签 </p>\n<h3 id=\"八、可替换标签\"><a href=\"#八、可替换标签\" class=\"headerlink\" title=\"八、可替换标签 \"></a>八、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element\" target=\"_blank\" rel=\"noopener\">可替换标签 </a></h3><p>CSS 里，<strong>可替换元素（replaced element）</strong>的展现不是由CSS来控制的。这些元素是一类 外观渲染独立于CSS的 外部对象。 典型的可替换元素有<br> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img\" title=\"HTML Image 元素（ &lt;img&gt; ）代表文档中的一个图像。\" target=\"_blank\" rel=\"noopener\"><code>&lt;img&gt;</code></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/object\" title=\"HTML &lt;object&gt; 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。\" target=\"_blank\" rel=\"noopener\"><code>&lt;object&gt;</code></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\" title=\"HTML &lt;video&gt; 元素 用于在HTML或者XHTML文档中嵌入视频内容。\" target=\"_blank\" rel=\"noopener\"><code>&lt;video&gt;</code></a> 和 表单元素，如<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea\" title=\"HTML &lt;textarea&gt; 元素表示一个多行纯文本编辑控件。\" target=\"_blank\" rel=\"noopener\"><code>&lt;textarea&gt;</code></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\" title=\"HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。\" target=\"_blank\" rel=\"noopener\"><code>&lt;input&gt;</code></a> 。 某些元素只在一些特殊情况下表现为可替换元素，例如<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio\" title=\"HTML &lt;audio&gt; 元素用于在文档中表示音频内容。 &lt;audio&gt; 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者&lt;source&gt; 元素来进行描述； 浏览器将会选择最合适的一个来使用。对于不支持&lt;audio&gt;元素的浏览器，&lt;audio&gt;元素也可以作为浏览器不识别的内容加入到文档中。\" target=\"_blank\" rel=\"noopener\"><code>&lt;audio&gt;</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas\" title=\"&lt;canvas&gt;元素可被用来通过脚本（通常是JavaScript）绘制图形。比如,它可以被用来绘制图形,制作图片集合,甚至用来实现动画效果。你可以(也应该)在元素标签内写入可提供替代的的代码内容，这些内容将会在在旧的、不支持&lt;canvas&gt;元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现。\" target=\"_blank\" rel=\"noopener\"><code>&lt;canvas&gt;</code></a><br>上面是MDN的原话，反正我看的云里雾里。用图片解释一下吧。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-3a2c1ea1d92f394f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可替换元素.png\"><br>img标签的尺寸其实是由src决定的，但只是第三级的重要性，你可以用width修改，你也可以用CSS来修改。</p>\n<h3 id=\"九、全局属性\"><a href=\"#九、全局属性\" class=\"headerlink\" title=\"九、全局属性\"></a>九、<a href=\"https://www.w3.org/TR/html5/dom.html#global-attributes\" target=\"_blank\" rel=\"noopener\">全局属性</a></h3><h3 id=\"十、display不止三种\"><a href=\"#十、display不止三种\" class=\"headerlink\" title=\"十、display不止三种\"></a>十、display不止三种</h3><p>不仅仅有 <code>none</code>    <code>inline</code>    <code>block</code> <code>inline-block</code> 还有很多<br>常见的display默认的是block的有divp 、form 和HTML5中的新元素： header 、 footer 、 section。我们不需要特别关心display的，因为这个主要由CSS修改</p>\n","categories":["HTML学习"],"tags":["HTML"]},{"title":"服务器雏形","url":"https://codevvvv9.github.io/2017/12/12/服务器雏形/","content":"<hr>\n<p>我们都知道李爵士建立了第一个网页、第一个浏览器、第一个服务器。前面两个，我们都见过了，但是服务器我们目前没有亲自实现过，所以有必要了解一下，服务器的一些基础知识。</p>\n<hr>\n<p>以下是手写服务器脚本的必备知识</p>\n<ul>\n<li>HTTP是建立在TCP/IP的基础之上的<ul>\n<li>TCP是什么<br>TCP 传输控制协议（Transmission Control Protocol）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面试必问的两道题</span><br><span class=\"line\">1、TCP和UDP的区别</span><br><span class=\"line\">TCP是可靠的、面向连接的，相对UDP速度慢，UDP是不可靠的，不是面向连接的，速度快。可靠是指你的请求成不成功都会有响应，成功了就告诉你ok,失败了也告诉你访问失败，面向连接是指每次必须发起一个请求，这端是浏览器，另一端是你要访问的地址</span><br><span class=\"line\">TCP可以看成是把石子扔到水里，UDP是把石头扔进草垛里面</span><br><span class=\"line\">2、TCP的三次握手是啥</span><br><span class=\"line\">第一次 客户端问服务器，我能连接吗</span><br><span class=\"line\">第二次 服务器回答说，我准备好了，可以连接啦</span><br><span class=\"line\">第三次 客户端说，那我就真的连接喽</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>上述两个面试题可以仔细阅读这两篇文章 <a href=\"https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766\" target=\"_blank\" rel=\"noopener\">TCP与UDP的区别</a>、<a href=\"https://github.com/jawil/blog/issues/14\" target=\"_blank\" rel=\"noopener\">TCP三次握手详解</a><br><a id=\"more\"></a></p>\n<ul>\n<li>路由器的基础<br>只要我们在互联网中，就要用到IP 网络协议（Internet Protocol）,IP有分为内网IP和外网IP,它们的分界线就是路由器。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-98d06d574a0612b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"内网和外网.png\"></li>\n<li>内网之间可以自由沟通，外网之间自由沟通。但是内外网不能直接沟通，必须通过路由，路由是一夫当关万夫莫开，也叫网关。</li>\n<li>当路由器连上电信的服务器，就会获得一个外网IP(<strong>14.17.32.211</strong>),当你重启的时候又会重新分配一个。所以大多数的公司，会买一个固定的。</li>\n<li>好了，此时路由和外界可以联通了，那么如何和你联通呢。答案就是 内网</li>\n<li>路由器会在你家里创建一个内网，内网中的设备使用内网 IP，一般来说这个 IP 的格式都是 192.168.xxx.xxx。路由器还会给自己优先分配一个好的内网IP(<strong>192.168.1.1</strong>)，你就有可能是192.168.1.2。</li>\n<li><strong>现在路由器有两个 IP，一个外网 IP（14.17.32.211）和一个内网 IP（192.168.1.1）</strong><br>具有双重间谍的作用。它是内外沟通的桥梁</li>\n<li>除此之外，还有一个localhost<strong>127.0.0.1</strong>和<strong>0.0.0.0</strong>这两个很重要的IP<br>可以在你的hosts文件里面修改localhost文件</li>\n<li><p>端口和 ip、各种服务<br>你想要访问一个设备（前提是你使用的是 TCP 或 UDP 协议。还记得吗，HTTP 就使用了 TCP），只指定 IP 是不够的，还必须指定端口（Port）。<br>端口就是一个编号，并不是物理设备。因为一个设备里面有很多功能，你不知道用哪个功能，所以要用端口来区分你要哪个服务。<br>-两个问题<br>1、我怎么知道使用哪个端口<br>详见<a href=\"https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3\" target=\"_blank\" rel=\"noopener\">0-1023端口详解</a><br>2、总共有多少个端口啊<br>每个机器一共有 65535（2的16次方减1）个端口（这是协议规定的）。不过这些端口的使用由一些规定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、0 到 1023（2的10次方减1）号端口是留给系统使用的，你只有拥有了管理员权限后，才能使用这 1024 个端口。</span><br><span class=\"line\">2、其他端口可以给普通用户使用</span><br><span class=\"line\">3、如果一个端口正在提供服务，也就是被占用了，那么就不能再使用这个端口。除非你先停掉正在占用这个端口的服务。以后你们会经常遇到这个问题。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>综上所述，要想访问一个地址，必须提供<strong>IP和端口号</strong>！！！<br>IP通过DNS解析你的域名，给你。端口号必须给出<br>问题来了<br>我访问<a href=\"http://qq.com/\" target=\"_blank\" rel=\"noopener\">http://qq.com</a> 时并没有提供端口号，为什么我依然可以访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为浏览器给你加上了80端口</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"用node-js脚本搭建最简单的服务器\"><a href=\"#用node-js脚本搭建最简单的服务器\" class=\"headerlink\" title=\"用node.js脚本搭建最简单的服务器\"></a>用node.js脚本搭建最简单的服务器</h3><ul>\n<li><ol>\n<li>用server接收请求</li>\n</ol>\n</li>\n<li>2.用server发挥响应，完成网页的解析<br>核心代码如下所示，可以模拟一个微型的服务器<br>一定要注意，<strong>response.setHeader(‘ContentType’, ‘text/html;charset=utf-8’)</strong><br>这是告诉浏览器两件事，一是设置头文件，告诉浏览器响应的第四部分按照什么格式来响应，二是告诉浏览器字符编码采用utf-8,避免乱码。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ad3e34b3638f66e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"[图片上传中...(响应修改编码.png-1d11fb-1512915328362-0)]\n\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-24ac1610920f0114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"响应修改编码.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-18e4374d4d6cc371.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"响应内容.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">var fs = require(&apos;fs&apos;)</span><br><span class=\"line\">var url = require(&apos;url&apos;)</span><br><span class=\"line\">var port = process.argv[2]</span><br><span class=\"line\"></span><br><span class=\"line\">if(!port)&#123;</span><br><span class=\"line\">  console.log(&apos;请指定端口号好不啦？\\nnode server.js 8888 这样不会吗？&apos;)</span><br><span class=\"line\">  process.exit(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var server = http.createServer(function(request, response)&#123;</span><br><span class=\"line\">  var parsedUrl = url.parse(request.url, true)</span><br><span class=\"line\">  var path = request.url </span><br><span class=\"line\">  var query = &apos;&apos;</span><br><span class=\"line\">  if(path.indexOf(&apos;?&apos;) &gt;= 0)&#123; query = path.substring(path.indexOf(&apos;?&apos;)) &#125;</span><br><span class=\"line\">  var pathNoQuery = parsedUrl.pathname</span><br><span class=\"line\">  var queryObject = parsedUrl.query</span><br><span class=\"line\">  var method = request.method</span><br><span class=\"line\"></span><br><span class=\"line\">  /******** 从这里开始看，上面不要看 ************/</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(&apos;方方说：得到 HTTP 路径\\n&apos; + path)</span><br><span class=\"line\">  if (path == &apos;/style&apos;)&#123;</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/css;charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(&apos;body&#123;backgroun-color: #ddd;&#125;h1&#123;color: red;&#125;&apos;)</span><br><span class=\"line\">    response.end()\t  </span><br><span class=\"line\">  &#125;else if(path == &apos;/script&apos;)&#123;</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/javascript;charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(&apos;alert(&quot;这是js执行的&quot;)&apos;)    </span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else if(path == &apos;/index&apos;)&#123;</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html;charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;!DOCTYPE&gt;\\n&lt;html&gt;&apos; + </span><br><span class=\"line\">\t    &apos;&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/style&quot;&gt;&lt;/head&gt;&apos; + </span><br><span class=\"line\">\t    &apos;&lt;body&gt;&apos; + </span><br><span class=\"line\">\t    &apos;&lt;h1&gt;你好，Node.js&lt;/h1&gt;&apos; + </span><br><span class=\"line\">\t    &apos;&lt;script src=&quot;/script&quot;&gt;&lt;/script&gt;&apos; + </span><br><span class=\"line\">\t    &apos;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /******** 代码结束，下面不要看 ************/</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port)</span><br><span class=\"line\">console.log(&apos;监听 &apos; + port + &apos; 成功\\n请用在空中转体720度然后用电饭煲打开 http://localhost:&apos; + port)</span><br></pre></td></tr></table></figure>\n<h3 id=\"再次强调-再次强调，后缀是废话。文件内容是有-HTTP-头中的-Content-Type-保证的\"><a href=\"#再次强调-再次强调，后缀是废话。文件内容是有-HTTP-头中的-Content-Type-保证的\" class=\"headerlink\" title=\"再次强调 再次强调，后缀是废话。文件内容是有 HTTP 头中的 Content-Type 保证的\"></a>再次强调 再次强调，后缀是废话。文件内容是有 HTTP 头中的 Content-Type 保证的</h3><p>HTTP 路径不是文件路径！！！/xxx.html 不一定对应 xxx.html 文件<br>HTTP 路径不是文件路径！！！/xxx.html 不一定对应 xxx.html 文件<br>HTTP 路径不是文件路径！！！/xxx.html 不一定对应 xxx.html 文件</p>\n<ul>\n<li>你请求的时候，查询的内容是？后面的内容<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-ecce6194cb5bb9e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查询的参数从问好开始.png\"><h3 id=\"当你在地址栏输入一个网页的时候发生了什么呢？\"><a href=\"#当你在地址栏输入一个网页的时候发生了什么呢？\" class=\"headerlink\" title=\"当你在地址栏输入一个网页的时候发生了什么呢？\"></a>当你在地址栏输入一个网页的时候发生了什么呢？</h3>你输入完之后，缺http,浏览器帮你加上，缺路径，帮你加上/，缺端口，帮你加上80。<br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-88448ddf960020fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ图片20171210222219.png\"></li>\n</ul>\n","categories":["服务器原理学习"],"tags":["Server"]},{"title":"http入门","url":"https://codevvvv9.github.io/2017/12/12/http入门/","content":"<hr>\n<h3 id=\"李爵士发明了万维网，从此世界上的人便可以一起上网了\"><a href=\"#李爵士发明了万维网，从此世界上的人便可以一起上网了\" class=\"headerlink\" title=\"李爵士发明了万维网，从此世界上的人便可以一起上网了\"></a>李爵士发明了万维网，从此世界上的人便可以一起上网了</h3><p>主要包含三个概念 URI、HTTP(HyperText Transfer Protocol)、HTML(HyperText Markup Language)<br>他还发明了以下技术：<br>1、发明了第一个服务器<br>2、发明了第一个浏览器<br>3、写出了第一个网页</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>URI</td>\n<td>俗称网址，通常用它得孩子URL</td>\n</tr>\n<tr>\n<td>HTTP</td>\n<td>让你能够下载这个网页</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td>让你能看懂这个网页</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"URI-分为-URL-Uniform-Resource-Locator-和URN\"><a href=\"#URI-分为-URL-Uniform-Resource-Locator-和URN\" class=\"headerlink\" title=\"URI 分为 URL(Uniform Resource Locator)和URN\"></a>URI 分为 URL(Uniform Resource Locator)和URN</h3><p>URI 是统一资源标识符<br>URL 是统一资源定位符，可以访问到某个网页的具体位置，就是我们平常所说的网址<br><a href=\"https://www.baidu.com/s?wd=hello&amp;rsv_spt=1#5\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=hello&amp;rsv_spt=1#5</a> 通过这个你就可以访问到一个 “唯一的” 网址</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>https:</td>\n<td>协议</td>\n</tr>\n<tr>\n<td><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></td>\n<td>域名</td>\n</tr>\n<tr>\n<td>/s</td>\n<td>路径</td>\n</tr>\n<tr>\n<td>wd=hello&amp;rsv_spt=1</td>\n<td>查询参数</td>\n</tr>\n<tr>\n<td>#5</td>\n<td>锚点，就是你搜素的结果的div的id</td>\n</tr>\n<tr>\n<td>端口还没有学，但是完整的URL包括这6部分</td>\n</tr>\n</tbody>\n</table>\n<p>URN 是统一资源命名，类似于书籍的ISBN,唯一的一个编号</p>\n<hr>\n<h3 id=\"DNS-Domain-Name-System\"><a href=\"#DNS-Domain-Name-System\" class=\"headerlink\" title=\"DNS(Domain Name System)\"></a>DNS(Domain Name System)</h3><p>你输入一个网址，先向DNS去问一下，这个网址的ip,返会给你，然后就可以访问到了。</p>\n<ul>\n<li>输入域名</li>\n<li>可以返回对应的IP<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nslookup baidu.com</span><br><span class=\"line\">ping baidu.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们可以修改hosts,文件去访问谷歌<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\drivers\\etc\\hosts</span><br><span class=\"line\"># Github Start</span><br><span class=\"line\">192.30.253.118\tgist.github.com</span><br><span class=\"line\">151.101.72.249\tglobal-ssl.fastly.net</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"服务器和浏览器的交互-——server-client-HTTP之间的关系\"><a href=\"#服务器和浏览器的交互-——server-client-HTTP之间的关系\" class=\"headerlink\" title=\"服务器和浏览器的交互 ——server client HTTP之间的关系\"></a>服务器和浏览器的交互 ——server client HTTP之间的关系</h3><p>1、client发送请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这是get请求</span><br><span class=\"line\">&gt; GET / HTTP/1.1</span><br><span class=\"line\">&gt; Host: www.baidu.com</span><br><span class=\"line\">&gt; User-Agent: curl/7.49.1</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt; frank: xxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br><span class=\"line\">//这是post请求</span><br><span class=\"line\">&gt; POST / HTTP/1.1</span><br><span class=\"line\">&gt; Host: www.baidu.com</span><br><span class=\"line\">&gt; User-Agent: curl/7.49.1</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt; Frank: xxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br><span class=\"line\">//提交一些内容到百度</span><br><span class=\"line\">&gt; POST / HTTP/1.1</span><br><span class=\"line\">&gt; Host: www.baidu.com</span><br><span class=\"line\">&gt; User-Agent: curl/7.49.1</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt; Frank: xxx</span><br><span class=\"line\">&gt; Content-Length: 10</span><br><span class=\"line\">&gt; Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果是获得数据用get</li>\n<li>如果是提交数据用post<br>在<a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a> 模仿用户登录，你的密码在 Form Data里面，打开network查看，一定记得 <em>view source</em><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-c1620a92f7e3296d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"post请求.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/5422064-a183fb93224e247e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"post详解.png\"><br>在浏览器和服务器交互的那块代码里面，没有带查询参数，下面这个是带参数的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s -v  -- &quot;https://www.baidu.com/s...后面一堆参数&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5422064-872f6dbe064d4207.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"request的路径.png\"></p>\n<h3 id=\"总结一下-请求和响应的基本格式\"><a href=\"#总结一下-请求和响应的基本格式\" class=\"headerlink\" title=\"总结一下 请求和响应的基本格式\"></a>总结一下 请求和响应的基本格式</h3><ul>\n<li>请求的基本格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、动词 路径 协议/版本号</span><br><span class=\"line\">2、key1: value1</span><br><span class=\"line\">2、key2: value2</span><br><span class=\"line\">2、key3: value3</span><br><span class=\"line\">2、key4: value4</span><br><span class=\"line\">2、Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">2、Host: www.baidu.com</span><br><span class=\"line\">2、User-Agent: curl/7.54.0</span><br><span class=\"line\">3、 必然是一个换行，用以区分第2部分和第4部分</span><br><span class=\"line\">4、 要上传的数据</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>1.请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）<br>2.第三部分永远都是一个回车（\\n）<br>3.动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等<br>4.这里的路径包括「查询参数」，但不包括「锚点」详见上图的请求路径<br>5.如果你没有写路径，那么路径默认为 /<br>6.第 2 部分中的 Content-Type 标注了第 4 部分的格式</p>\n<hr>\n<p>2、服务器开放80端口，接收请求，返回内容(响应)<br>3、浏览器负责下载响应内容</p>\n<ul>\n<li>响应的基本格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Length: 2443</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Date: Tue, 10 Oct 2017 09:14:05 GMT</span><br><span class=\"line\">Etag: &quot;5886041d-98b&quot;</span><br><span class=\"line\">Last-Modified: Mon, 23 Jan 2017 13:24:45 GMT</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Server: bfe/1.0.8.18</span><br><span class=\"line\">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、协议/版本 状态码 解释</span><br><span class=\"line\">2、key1: value1</span><br><span class=\"line\">2、key2: value2</span><br><span class=\"line\">2、key3: value3</span><br><span class=\"line\">2、key4: value4</span><br><span class=\"line\">2、Content-Length: 17931</span><br><span class=\"line\">2、Content-Type: text/html</span><br><span class=\"line\">3</span><br><span class=\"line\">4 要下载的内容</span><br></pre></td></tr></table></figure>\n<p>同样的Content-Type规定了第4部分要下载的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见状态码解释</span><br><span class=\"line\">200 ok</span><br><span class=\"line\">301 访问的内容永久转移了</span><br><span class=\"line\">302 暂时的重定向 要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</span><br><span class=\"line\">403 服务器已经理解请求，但是拒绝执行它</span><br><span class=\"line\">404 你访问的文件不存在</span><br><span class=\"line\">500 通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息</span><br><span class=\"line\">502 服务器关闭 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应</span><br></pre></td></tr></table></figure>\n","categories":["HTTP入门"],"tags":["HTTP"]},{"title":"hexo初探","url":"https://codevvvv9.github.io/2017/12/12/hexo初探/","content":"<p>如果第一次就仔细点，何必这么多麻烦呢</p>\n","categories":[],"tags":["hexo环境搭建"]},{"title":"category","url":"https://codevvvv9.github.io/categories/index.html","content":"","categories":[],"tags":[]},{"title":"一只野生猿的故事","url":"https://codevvvv9.github.io/about/index.html","content":"<h3 id=\"我是谁\"><a href=\"#我是谁\" class=\"headerlink\" title=\"我是谁\"></a>我是谁</h3><p>11年本科 进入交通工程专业 懵懂未知</p>\n<p>15年读了研究僧 主攻智能交通方向 始知智能交通与计算机结合如此紧密</p>\n<p>16年4月决定此生<code>coding</code> 彼时<code>C Java javascript</code>大杂烩 杂而不精</p>\n<p>17年12月立志要在前端领域有所成就</p>\n<p>18年6月底毕业正式进入前端开发领域</p>\n<h3 id=\"目前状态\"><a href=\"#目前状态\" class=\"headerlink\" title=\"目前状态\"></a>目前状态</h3><p>在五道口 同方威视 搬砖中</p>\n<h3 id=\"要到哪里去\"><a href=\"#要到哪里去\" class=\"headerlink\" title=\"要到哪里去\"></a>要到哪里去</h3><p>相信自己会成为最强的前端</p>\n<p>之一</p>\n<blockquote>\n<p>当蜘蛛网无情地查封了我的炉台  当灰烬的余烟叹息着贫困的悲哀 </p>\n<p> 我依然固执地铺平失望的灰烬  用美丽的雪花写下：相信未来   </p>\n<p>当我的紫葡萄化为深秋的露水  当我的鲜花依偎在别人的情怀  </p>\n<p>我依然固执地用凝霜的枯藤  在凄凉的大地上写下：相信未来   </p>\n<p>我要用手指那涌向天边的排浪  我要用手掌那托住太阳的大海 </p>\n<p>摇曳着曙光那枝温暖漂亮的笔杆  用孩子的笔体写下：相信未来   </p>\n<p>我之所以坚定地相信未来  是我相信未来人们的眼睛 </p>\n<p>她有拨开历史风尘的睫毛  她有看透岁月篇章的瞳孔   </p>\n<p>不管人们对于我们腐烂的皮肉  那些迷途的惆怅、失败的苦痛 </p>\n<p> 是寄予感动的热泪、深切的同情  还是给以轻蔑的微笑、辛辣的嘲讽   </p>\n<p>我坚信人们对于我们的脊骨  那无数次的探索、迷途、失败和成功  </p>\n<p>一定会给予热情、客观、公正的评定  是的，我焦急地等待着他们的评定  </p>\n<p> 朋友，坚定地相信未来吧 </p>\n<p> 相信不屈不挠的努力  </p>\n<p>相信战胜死亡的年轻  </p>\n<p>相信未来、热爱生命 </p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"","url":"https://codevvvv9.github.io/css/personal-style.css","content":"html.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  /*background-image: url('/images/bg.png');*/\n  background: linear-gradient(to left bottom, hsl(58, 100%, 85%) 0%,hsl(245, 100%, 85%) 100%);\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}","categories":[],"tags":[]},{"title":"","url":"https://codevvvv9.github.io/js/md5.min.js","content":"!function(n){\"use strict\";function t(n,t){var r=(65535&n)+(65535&t);return(n>>16)+(t>>16)+(r>>16)<<16|65535&r}function r(n,t){return=\"\" n<<t|n=\"\">>>32-t}function e(n,e,o,u,c,f){return t(r(t(t(e,n),t(u,f)),c),o)}function o(n,t,r,o,u,c,f){return e(t&r|~t&o,n,t,u,c,f)}function u(n,t,r,o,u,c,f){return e(t&o|r&~o,n,t,u,c,f)}function c(n,t,r,o,u,c,f){return e(t^r^o,n,t,u,c,f)}function f(n,t,r,o,u,c,f){return e(r^(t|~o),n,t,u,c,f)}function i(n,r){n[r>>5]|=128<<r%32,n[14+(r+64>>>9<<4)]=r;var e,i,a,d,h,l=\"1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e<n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]}function\" a(n){var=\"\" t,r=\"\" ,e=\"32*n.length;for(t=0;t<e;t+=8)r+=String.fromCharCode(n[t\">>5]>>>t%32&255);return r}function d(n){var t,r=[];for(r[(n.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;var e=\"8*n.length;for(t=0;t<e;t+=8)r[t\">>5]|=(255&n.charCodeAt(t/8))<<t%32;return r}function=\"\" h(n){return=\"\" a(i(d(n),8*n.length))}function=\"\" l(n,t){var=\"\" r,e,o=\"d(n),u=[],c=[];for(u[15]=c[15]=void\" 0,o.length=\"\">16&&(o=i(o,8*n.length)),r=0;r<16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=\"i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))}function\" g(n){var=\"\" t,r,e=\"\" ;for(r=\"0;r<n.length;r+=1)t=n.charCodeAt(r),e+=\"0123456789abcdef\".charAt(t\">>>4&15)+\"0123456789abcdef\".charAt(15&t);return e}function v(n){return unescape(encodeURIComponent(n))}function m(n){return h(v(n))}function p(n){return g(m(n))}function s(n,t){return l(v(n),v(t))}function C(n,t){return g(s(n,t))}function A(n,t,r){return t?r?s(t,n):C(t,n):r?m(n):p(n)}\"function\"==typeof define&&define.amd?define(function(){return A}):\"object\"==typeof module&&module.exports?module.exports=A:n.md5=A}(this);\n//# sourceMappingURL=md5.min.js.map</16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return></t%32;return></r.length;t+=1)r[t]=0;var></4)]=r;var></r%32,n[14+(r+64></16|65535&r}function>","categories":[],"tags":[]},{"title":"project","url":"https://codevvvv9.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://codevvvv9.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"https://codevvvv9.github.io/tags/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"https://codevvvv9.github.io/tags/index-old.html","content":"","categories":[],"tags":[]},{"title":"timeline","url":"https://codevvvv9.github.io/timeline/index-old.html","content":"","categories":[],"tags":[]},{"title":"timeline","url":"https://codevvvv9.github.io/timeline/index.html","content":"","categories":[],"tags":[]}]